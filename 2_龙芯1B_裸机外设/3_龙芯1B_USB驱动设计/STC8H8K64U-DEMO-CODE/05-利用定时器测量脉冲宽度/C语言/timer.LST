C51 COMPILER V9.59.0.0   TIMER                                                             03/02/2021 14:40:47 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE TIMER
OBJECT MODULE PLACED IN timer.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE timer.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          /*---------------------------------------------------------------------*/
   2          /* --- STC MCU Limited ------------------------------------------------*/
   3          /* --- STC 1T Series MCU Demo Programme -------------------------------*/
   4          /* --- Mobile: (86)13922805190 ----------------------------------------*/
   5          /* --- Fax: 86-0513-55012956,55012947,55012969 ------------------------*/
   6          /* --- Tel: 86-0513-55012928,55012929,55012966 ------------------------*/
   7          /* --- Web: www.STCMCU.com --------------------------------------------*/
   8          /* --- Web: www.STCMCUDATA.com  ---------------------------------------*/
   9          /* --- QQ:  800003751 -------------------------------------------------*/
  10          /* 如果要在程序中使用此代码,请在程序中注明使用了STC的资料及程序        */
  11          /*---------------------------------------------------------------------*/
  12          
  13          /*************  功能说明    **************
  14          
  15          本例程基于STC8H8K64U为主控芯片的实验箱8进行编写测试，STC8G、STC8H系列芯片可通用参考.
  16          
  17          定时器0做16位自动重装, 中断频率为1000HZ，作为数码管扫描显示.
  18          
  19          定时器1做16位自动重装, 中断频率为10000HZ，作为脉冲信号宽度检测.
  20          
  21          用STC的MCU的IO方式驱动8位数码管。
  22          
  23          P33口产生低电平(用户可自定义修改端口跟检测电平)时进行计时，电平变化后停止计时。
  24          
  25          数码管显示脉冲信号宽度，单位0.1ms，测量范围0.1ms~6553.5ms.
  26          
  27          下载时, 选择时钟 24MHZ (用户可自行修改频率).
  28          
  29          ******************************************/
  30          
  31          #include "reg51.h"       //包含此头文件后，里面声明的寄存器不需要再手动输入，避免重复定义
  32          
  33          #define     MAIN_Fosc       24000000UL  //定义主时钟
  34          
  35          
  36          typedef     unsigned char   u8;
  37          typedef     unsigned int    u16;
  38          typedef     unsigned long   u32;
  39          
  40          //手动输入声明"reg51.h"头文件里面没有定义的寄存器
  41          sfr INT_CLKO = 0x8F;
  42          sfr AUXR = 0x8E;
  43          sfr IE2  = 0xAF;
  44          sfr T2H  = 0xD6;
  45          sfr T2L  = 0xD7;
  46          
  47          sfr P4   = 0xC0;
  48          sfr P5   = 0xC8;
  49          sfr P6   = 0xE8;
  50          sfr P7   = 0xF8;
  51          sfr P1M1 = 0x91;    //PxM1.n,PxM0.n     =00--->Standard,    01--->push-pull
  52          sfr P1M0 = 0x92;    //                  =10--->pure input,  11--->open drain
  53          sfr P0M1 = 0x93;
  54          sfr P0M0 = 0x94;
  55          sfr P2M1 = 0x95;
C51 COMPILER V9.59.0.0   TIMER                                                             03/02/2021 14:40:47 PAGE 2   

  56          sfr P2M0 = 0x96;
  57          sfr P3M1 = 0xB1;
  58          sfr P3M0 = 0xB2;
  59          sfr P4M1 = 0xB3;
  60          sfr P4M0 = 0xB4;
  61          sfr P5M1 = 0xC9;
  62          sfr P5M0 = 0xCA;
  63          sfr P6M1 = 0xCB;
  64          sfr P6M0 = 0xCC;
  65          sfr P7M1 = 0xE1;
  66          sfr P7M0 = 0xE2;
  67          
  68          sbit P00 = P0^0;
  69          sbit P01 = P0^1;
  70          sbit P02 = P0^2;
  71          sbit P03 = P0^3;
  72          sbit P04 = P0^4;
  73          sbit P05 = P0^5;
  74          sbit P06 = P0^6;
  75          sbit P07 = P0^7;
  76          sbit P10 = P1^0;
  77          sbit P11 = P1^1;
  78          sbit P12 = P1^2;
  79          sbit P13 = P1^3;
  80          sbit P14 = P1^4;
  81          sbit P15 = P1^5;
  82          sbit P16 = P1^6;
  83          sbit P17 = P1^7;
  84          sbit P20 = P2^0;
  85          sbit P21 = P2^1;
  86          sbit P22 = P2^2;
  87          sbit P23 = P2^3;
  88          sbit P24 = P2^4;
  89          sbit P25 = P2^5;
  90          sbit P26 = P2^6;
  91          sbit P27 = P2^7;
  92          sbit P30 = P3^0;
  93          sbit P31 = P3^1;
  94          sbit P32 = P3^2;
  95          sbit P33 = P3^3;
  96          sbit P34 = P3^4;
  97          sbit P35 = P3^5;
  98          sbit P36 = P3^6;
  99          sbit P37 = P3^7;
 100          sbit P40 = P4^0;
 101          sbit P41 = P4^1;
 102          sbit P42 = P4^2;
 103          sbit P43 = P4^3;
 104          sbit P44 = P4^4;
 105          sbit P45 = P4^5;
 106          sbit P46 = P4^6;
 107          sbit P47 = P4^7;
 108          sbit P50 = P5^0;
 109          sbit P51 = P5^1;
 110          sbit P52 = P5^2;
 111          sbit P53 = P5^3;
 112          sbit P54 = P5^4;
 113          sbit P55 = P5^5;
 114          sbit P56 = P5^6;
 115          sbit P57 = P5^7;
 116          sbit P60 = P6^0;
 117          sbit P61 = P6^1;
C51 COMPILER V9.59.0.0   TIMER                                                             03/02/2021 14:40:47 PAGE 3   

 118          sbit P62 = P6^2;
 119          sbit P63 = P6^3;
 120          sbit P64 = P6^4;
 121          sbit P65 = P6^5;
 122          sbit P66 = P6^6;
 123          sbit P67 = P6^7;
 124          
 125          /****************************** 用户定义宏 ***********************************/
 126          #define Timer0_Reload   (MAIN_Fosc / 1000)      //Timer 0 中断频率, 1000次/秒
 127          #define Timer1_Reload   (MAIN_Fosc / 10000)     //Timer 1 中断频率, 10000次/秒
 128          
 129          #define DIS_DOT     0x20
 130          #define DIS_BLACK   0x10
 131          #define DIS_        0x11
 132          
 133          /***************************** 本地常量声明 **********************************/
 134          u8 code t_display[]={                       //标准字库
 135          //   0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F
 136              0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F,0x77,0x7C,0x39,0x5E,0x79,0x71,
 137          //black  -     H    J    K    L    N    o   P    U     t    G    Q    r   M    y
 138              0x00,0x40,0x76,0x1E,0x70,0x38,0x37,0x5C,0x73,0x3E,0x78,0x3d,0x67,0x50,0x37,0x6e,
 139              0xBF,0x86,0xDB,0xCF,0xE6,0xED,0xFD,0x87,0xFF,0xEF,0x46};    //0. 1. 2. 3. 4. 5. 6. 7. 8. 9. -1
 140          
 141          u8 code T_COM[]={0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80};      //位码
 142          
 143          /***************************** 本地变量声明 **********************************/
 144          u8  LED8[8];        //显示缓冲
 145          u8  display_index;  //显示位索引
 146          bit B_1ms;          //1ms标志
 147          u16 msecond;
 148          u16 Test_cnt;   //显示用的计数变量
 149          u16 Temp_cnt;   //测量用的计数变量
 150          
 151          /*****************************************************************************/
 152          
 153          void Timer0_init(void);
 154          void Timer1_init(void);
 155          void DisplayScan(void);
 156          void Display(void);
 157          
 158          //========================================================================
 159          // 函数: void main(void)
 160          // 描述: 主函数.
 161          // 参数: none.
 162          // 返回: none.
 163          // 版本: V1.0, 2015-1-12
 164          //========================================================================
 165          void main(void)
 166          {
 167   1          u8  i;
 168   1          
 169   1          P0M1 = 0;   P0M0 = 0;   //设置为准双向口
 170   1          P1M1 = 0;   P1M0 = 0;   //设置为准双向口
 171   1          P2M1 = 0;   P2M0 = 0;   //设置为准双向口
 172   1          P3M1 = 0;   P3M0 = 0;   //设置为准双向口
 173   1          P4M1 = 0;   P4M0 = 0;   //设置为准双向口
 174   1          P5M1 = 0;   P5M0 = 0;   //设置为准双向口
 175   1          P6M1 = 0;   P6M0 = 0;   //设置为准双向口
 176   1          P7M1 = 0;   P7M0 = 0;   //设置为准双向口
 177   1      
 178   1          Test_cnt = 0;
 179   1          Temp_cnt = 0;
C51 COMPILER V9.59.0.0   TIMER                                                             03/02/2021 14:40:47 PAGE 4   

 180   1          for(i=0; i<8; i++)  LED8[i] = DIS_BLACK;    //上电消隐
 181   1          
 182   1          Timer0_init();
 183   1          Timer1_init();
 184   1          EA = 1;     //打开总中断
 185   1      
 186   1          while (1)
 187   1          {
 188   2              if(B_1ms)   //1ms到
 189   2              {
 190   3                  B_1ms = 0;
 191   3                  if(++msecond >= 1000)   //1秒到
 192   3                  {
 193   4                      msecond = 0;        //清1000ms计数
 194   4                      Display();          //显示秒计数
 195   4                  }
 196   3              }
 197   2          }
 198   1      }
 199          
 200          //========================================================================
 201          // 函数: void Timer0_init(void)
 202          // 描述: timer0初始化函数.
 203          // 参数: none.
 204          // 返回: none.
 205          // 版本: V1.0, 2015-1-12
 206          //========================================================================
 207          void Timer0_init(void)
 208          {
 209   1              TR0 = 0;    //停止计数
 210   1      
 211   1          #if (Timer0_Reload < 64)    // 如果用户设置值不合适， 则不启动定时器
                      #error "Timer0设置的中断过快!"
              
                  #elif ((Timer0_Reload/12) < 65536UL)    // 如果用户设置值不合适， 则不启动定时器
 215   1              ET0 = 1;    //允许中断
 216   1          //  PT0 = 1;    //高优先级中断
 217   1              TMOD &= ~0x03;
 218   1              TMOD |= 0;  //工作模式, 0: 16位自动重装, 1: 16位定时/计数, 2: 8位自动重装, 3: 16位自动重装, 不可屏
             -蔽中断
 219   1          //  TMOD |=  0x04;  //对外计数或分频
 220   1              TMOD &= ~0x04;  //定时
 221   1          //  INT_CLKO |=  0x01;  //输出时钟
 222   1              INT_CLKO &= ~0x01;  //不输出时钟
 223   1      
 224   1              #if (Timer0_Reload < 65536UL)
 225   1                  AUXR |=  0x80;  //1T mode
 226   1                  TH0 = (u8)((65536UL - Timer0_Reload) / 256);
 227   1                  TL0 = (u8)((65536UL - Timer0_Reload) % 256);
 228   1              #else
                          AUXR &= ~0x80;  //12T mode
                          TH0 = (u8)((65536UL - Timer0_Reload/12) / 256);
                          TL0 = (u8)((65536UL - Timer0_Reload/12) % 256);
                      #endif
 233   1      
 234   1              TR0 = 1;    //开始运行
 235   1      
 236   1          #else
                      #error "Timer0设置的中断过慢!"
                  #endif
 239   1      }
 240          
C51 COMPILER V9.59.0.0   TIMER                                                             03/02/2021 14:40:47 PAGE 5   

 241          //========================================================================
 242          // 函数: void Timer1_init(void)
 243          // 描述: timer1初始化函数.
 244          // 参数: none.
 245          // 返回: none.
 246          // 版本: V1.0, 2015-1-12
 247          //========================================================================
 248          void Timer1_init(void)
 249          {
 250   1              TR1 = 0;    //停止计数
 251   1      
 252   1          #if (Timer1_Reload < 64)    // 如果用户设置值不合适， 则不启动定时器
                      #error "Timer1设置的中断过快!"
              
                  #elif ((Timer1_Reload/12) < 65536UL)    // 如果用户设置值不合适， 则不启动定时器
 256   1              ET1 = 1;    //允许中断
 257   1          //  PT1 = 1;    //高优先级中断
 258   1              TMOD &= ~0x30;
 259   1              TMOD |= (0 << 4);   //工作模式, 0: 16位自动重装, 1: 16位定时/计数, 2: 8位自动重装
 260   1          //  TMOD |=  0x40;  //对外计数或分频
 261   1              TMOD &= ~0x40;  //定时
 262   1          //  INT_CLKO |=  0x02;  //输出时钟
 263   1              INT_CLKO &= ~0x02;  //不输出时钟
 264   1      
 265   1              #if (Timer1_Reload < 65536UL)
 266   1                  AUXR |=  0x40;  //1T mode
 267   1                  TH1 = (u8)((65536UL - Timer1_Reload) / 256);
 268   1                  TL1 = (u8)((65536UL - Timer1_Reload) % 256);
 269   1              #else
                          AUXR &= ~0x40;  //12T mode
                          TH1 = (u8)((65536UL - Timer1_Reload/12) / 256);
                          TL1 = (u8)((65536UL - Timer1_Reload/12) % 256);
                      #endif
 274   1      
 275   1              TR1 = 1;    //开始运行
 276   1      
 277   1          #else
                      #error "Timer1设置的中断过慢!"
                  #endif
 280   1      }
 281          
 282          //========================================================================
 283          // 函数: void timer0_int (void) interrupt TIMER0_VECTOR
 284          // 描述:  timer0中断函数.
 285          // 参数: none.
 286          // 返回: none.
 287          // 版本: V1.0, 2015-1-12
 288          //========================================================================
 289          void timer0_int (void) interrupt 1
 290          {
 291   1          DisplayScan();  //1ms扫描显示一位
 292   1          B_1ms = 1;      //1ms标志
 293   1      }
 294          
 295          //========================================================================
 296          // 函数: void timer1_int (void) interrupt TIMER1_VECTOR
 297          // 描述:  timer1中断函数.
 298          // 参数: none.
 299          // 返回: none.
 300          // 版本: V1.0, 2015-1-12
 301          //========================================================================
 302          void timer1_int (void) interrupt 3
C51 COMPILER V9.59.0.0   TIMER                                                             03/02/2021 14:40:47 PAGE 6   

 303          {
 304   1         if(!P33)
 305   1         {
 306   2            Temp_cnt++;
 307   2         }
 308   1         else
 309   1         {
 310   2            if(Temp_cnt>10)   //有效信号 > 1ms
 311   2            {
 312   3               Test_cnt = Temp_cnt;
 313   3            }
 314   2            Temp_cnt = 0;
 315   2         }
 316   1      }
 317          
 318          /********************** 显示扫描函数 ************************/
 319          void DisplayScan(void)
 320          {   
 321   1         P7 = ~T_COM[7-display_index];
 322   1         P6 = ~t_display[LED8[display_index]];
 323   1         if(++display_index >= 8)   display_index = 0;  //8位结束回0
 324   1      }
 325          
 326          /********************** 显示计数函数 ************************/
 327          void Display(void)
 328          {
 329   1          u8  i;
 330   1          
 331   1          LED8[3] = Test_cnt / 10000;
 332   1          LED8[4] = (Test_cnt % 10000) / 1000;
 333   1          LED8[5] = (Test_cnt % 1000) / 100;
 334   1          LED8[6] = (Test_cnt % 100) / 10;
 335   1          LED8[7] = Test_cnt % 10;
 336   1          
 337   1          for(i=3; i<7; i++)  //消无效0
 338   1          {
 339   2              if(LED8[i] > 0) break;
 340   2              LED8[i] = DIS_BLACK;
 341   2          }
 342   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    452    ----
   CONSTANT SIZE    =     51    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     15    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
