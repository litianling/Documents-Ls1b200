C51 COMPILER V9.59.0.0   IR_TX                                                             03/09/2021 16:13:49 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE IR_TX
OBJECT MODULE PLACED IN IR-Tx.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE IR-Tx.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          /*---------------------------------------------------------------------*/
   2          /* --- STC MCU Limited ------------------------------------------------*/
   3          /* --- STC 1T Series MCU Demo Programme -------------------------------*/
   4          /* --- Mobile: (86)13922805190 ----------------------------------------*/
   5          /* --- Fax: 86-0513-55012956,55012947,55012969 ------------------------*/
   6          /* --- Tel: 86-0513-55012928,55012929,55012966 ------------------------*/
   7          /* --- Web: www.STCMCU.com --------------------------------------------*/
   8          /* --- Web: www.STCMCUDATA.com  ---------------------------------------*/
   9          /* --- QQ:  800003751 -------------------------------------------------*/
  10          /* 如果要在程序中使用此代码,请在程序中注明使用了STC的资料及程序        */
  11          /*---------------------------------------------------------------------*/
  12          
  13          
  14          /*************  本程序功能说明  **************
  15          
  16          本例程基于STC8H8K64U为主控芯片的实验箱8进行编写测试，STC8H系列芯片可通用参考.
  17          
  18          用户可以在宏定义中改变MCU主时钟频率. 范围 8MHZ ~ 33MHZ.
  19          
  20          红外接收程序。模拟市场上用量最大的NEC的编码。
  21          
  22          用户可以在宏定义中指定用户码.
  23          
  24          使用PWM4产生38KHZ载波, 1/3占空比, 每个38KHZ周期发射管发射9us,关闭16.3us.
  25          
  26          使用开发板上的16个IO扫描按键, MCU不睡眠, 连续扫描按键.
  27          
  28          当键按下, 第一帧为数据, 后面的帧为重复帧,不带数据, 具体定义请自行参考NEC的编码资料.
  29          
  30          键释放后, 停止发送.
  31          
  32          ******************************************/
  33          
  34          
  35          #include    "reg51.h"       //包含此头文件后，里面声明的寄存器不需要再手动输入，避免重复定义
  36          #include    "intrins.h"
  37          
  38          #define     MAIN_Fosc       24000000UL  //定义主时钟
  39          
  40          typedef     unsigned char   u8;
  41          typedef     unsigned int    u16;
  42          typedef     unsigned long   u32;
  43          
  44          //手动输入声明"reg51.h"头文件里面没有定义的寄存器
  45          sfr TH2  = 0xD6;
  46          sfr TL2  = 0xD7;
  47          sfr IE2   = 0xAF;
  48          sfr INT_CLKO = 0x8F;
  49          sfr AUXR = 0x8E;
  50          sfr AUXR1 = 0xA2;
  51          sfr P_SW1 = 0xA2;
  52          sfr P_SW2 = 0xBA;
  53          sfr S2CON = 0x9A;
  54          sfr S2BUF = 0x9B;
  55          
C51 COMPILER V9.59.0.0   IR_TX                                                             03/09/2021 16:13:49 PAGE 2   

  56          sfr P4   = 0xC0;
  57          sfr P5   = 0xC8;
  58          sfr P6   = 0xE8;
  59          sfr P7   = 0xF8;
  60          sfr P1M1 = 0x91;    //PxM1.n,PxM0.n     =00--->Standard,    01--->push-pull
  61          sfr P1M0 = 0x92;    //                  =10--->pure input,  11--->open drain
  62          sfr P0M1 = 0x93;
  63          sfr P0M0 = 0x94;
  64          sfr P2M1 = 0x95;
  65          sfr P2M0 = 0x96;
  66          sfr P3M1 = 0xB1;
  67          sfr P3M0 = 0xB2;
  68          sfr P4M1 = 0xB3;
  69          sfr P4M0 = 0xB4;
  70          sfr P5M1 = 0xC9;
  71          sfr P5M0 = 0xCA;
  72          sfr P6M1 = 0xCB;
  73          sfr P6M0 = 0xCC;
  74          sfr P7M1 = 0xE1;
  75          sfr P7M0 = 0xE2;
  76          
  77          sbit P00 = P0^0;
  78          sbit P01 = P0^1;
  79          sbit P02 = P0^2;
  80          sbit P03 = P0^3;
  81          sbit P04 = P0^4;
  82          sbit P05 = P0^5;
  83          sbit P06 = P0^6;
  84          sbit P07 = P0^7;
  85          sbit P10 = P1^0;
  86          sbit P11 = P1^1;
  87          sbit P12 = P1^2;
  88          sbit P13 = P1^3;
  89          sbit P14 = P1^4;
  90          sbit P15 = P1^5;
  91          sbit P16 = P1^6;
  92          sbit P17 = P1^7;
  93          sbit P20 = P2^0;
  94          sbit P21 = P2^1;
  95          sbit P22 = P2^2;
  96          sbit P23 = P2^3;
  97          sbit P24 = P2^4;
  98          sbit P25 = P2^5;
  99          sbit P26 = P2^6;
 100          sbit P27 = P2^7;
 101          sbit P30 = P3^0;
 102          sbit P31 = P3^1;
 103          sbit P32 = P3^2;
 104          sbit P33 = P3^3;
 105          sbit P34 = P3^4;
 106          sbit P35 = P3^5;
 107          sbit P36 = P3^6;
 108          sbit P37 = P3^7;
 109          sbit P40 = P4^0;
 110          sbit P41 = P4^1;
 111          sbit P42 = P4^2;
 112          sbit P43 = P4^3;
 113          sbit P44 = P4^4;
 114          sbit P45 = P4^5;
 115          sbit P46 = P4^6;
 116          sbit P47 = P4^7;
 117          sbit P50 = P5^0;
C51 COMPILER V9.59.0.0   IR_TX                                                             03/09/2021 16:13:49 PAGE 3   

 118          sbit P51 = P5^1;
 119          sbit P52 = P5^2;
 120          sbit P53 = P5^3;
 121          sbit P54 = P5^4;
 122          sbit P55 = P5^5;
 123          sbit P56 = P5^6;
 124          sbit P57 = P5^7;
 125          
 126          /****************************** 用户定义宏 ***********************************/
 127          
 128          #define PWMA_ENO     (*(unsigned char  volatile xdata *)  0xFEB1)
 129          #define PWMA_PS      (*(unsigned char  volatile xdata *)  0xFEB2)
 130          
 131          #define PWMA_CR1     (*(unsigned char  volatile xdata *)  0xFEC0)
 132          #define PWMA_CR2     (*(unsigned char  volatile xdata *)  0xFEC1)
 133          #define PWMA_SMCR    (*(unsigned char  volatile xdata *)  0xFEC2) 
 134          #define PWMA_ETR     (*(unsigned char  volatile xdata *)  0xFEC3) 
 135          #define PWMA_IER     (*(unsigned char  volatile xdata *)  0xFEC4) 
 136          #define PWMA_SR1     (*(unsigned char  volatile xdata *)  0xFEC5) 
 137          #define PWMA_SR2     (*(unsigned char  volatile xdata *)  0xFEC6) 
 138          #define PWMA_EGR     (*(unsigned char  volatile xdata *)  0xFEC7) 
 139          #define PWMA_CCMR1   (*(unsigned char  volatile xdata *)  0xFEC8) 
 140          #define PWMA_CCMR2   (*(unsigned char  volatile xdata *)  0xFEC9)
 141          #define PWMA_CCMR3   (*(unsigned char  volatile xdata *)  0xFECA)
 142          #define PWMA_CCMR4   (*(unsigned char  volatile xdata *)  0xFECB)
 143          #define PWMA_CCER1   (*(unsigned char  volatile xdata *)  0xFECC)
 144          #define PWMA_CCER2   (*(unsigned char  volatile xdata *)  0xFECD)
 145          #define PWMA_CNTRH   (*(unsigned char  volatile xdata *)  0xFECE)
 146          #define PWMA_CNTRL   (*(unsigned char  volatile xdata *)  0xFECF)
 147          #define PWMA_PSCRH   (*(unsigned char  volatile xdata *)  0xFED0)
 148          #define PWMA_PSCRL   (*(unsigned char  volatile xdata *)  0xFED1)
 149          #define PWMA_ARRH    (*(unsigned char  volatile xdata *)  0xFED2)
 150          #define PWMA_ARRL    (*(unsigned char  volatile xdata *)  0xFED3)
 151          #define PWMA_RCR     (*(unsigned char  volatile xdata *)  0xFED4)
 152          #define PWMA_CCR1H   (*(unsigned char  volatile xdata *)  0xFED5)
 153          #define PWMA_CCR1L   (*(unsigned char  volatile xdata *)  0xFED6)
 154          #define PWMA_CCR2H   (*(unsigned char  volatile xdata *)  0xFED7)
 155          #define PWMA_CCR2L   (*(unsigned char  volatile xdata *)  0xFED8)
 156          #define PWMA_CCR3H   (*(unsigned char  volatile xdata *)  0xFED9)
 157          #define PWMA_CCR3L   (*(unsigned char  volatile xdata *)  0xFEDA)
 158          #define PWMA_CCR4H   (*(unsigned char  volatile xdata *)  0xFEDB)
 159          #define PWMA_CCR4L   (*(unsigned char  volatile xdata *)  0xFEDC)
 160          #define PWMA_BKR     (*(unsigned char  volatile xdata *)  0xFEDD)
 161          #define PWMA_DTR     (*(unsigned char  volatile xdata *)  0xFEDE)
 162          #define PWMA_OISR    (*(unsigned char  volatile xdata *)  0xFEDF)
 163          
 164          /*************  红外发送相关变量    **************/
 165          #define User_code   0xFF00      //定义红外用户码
 166          
 167          sbit    P_IR_TX   = P1^6;   //定义红外发送端口
 168          #define IR_TX_ON    0
 169          #define IR_TX_OFF   1
 170          
 171          u16     tx_cnt;     //发送或空闲的脉冲计数(等于38KHZ的脉冲数，对应时间), 红外频率为38KHZ, 周期26.3us
 172          u8      TxTime;     //发送时间
 173          
 174          /*************  IO键盘变量声明  **************/
 175          
 176          u8  IO_KeyState, IO_KeyState1, IO_KeyHoldCnt;   //行列键盘变量
 177          u8  KeyHoldCnt; //键按下计时
 178          u8  KeyCode;    //给用户使用的键码, 1~16有效
 179          
C51 COMPILER V9.59.0.0   IR_TX                                                             03/09/2021 16:13:49 PAGE 4   

 180          /*************  本地函数声明    **************/
 181          void    delay_ms(u8 ms);
 182          void    IO_KeyScan(void);
 183          void    PWM_config(void);
 184          void    IR_TxPulse(u16 pulse);
 185          void    IR_TxSpace(u16 pulse);
 186          void    IR_TxByte(u8 dat);
 187          
 188          /********************** 主函数 ************************/
 189          void main(void)
 190          {
 191   1          P0M1 = 0;   P0M0 = 0;   //设置为准双向口
 192   1          P1M1 = 0;   P1M0 = 0;   //设置为准双向口
 193   1          P2M1 = 0;   P2M0 = 0;   //设置为准双向口
 194   1          P3M1 = 0;   P3M0 = 0;   //设置为准双向口
 195   1          P4M1 = 0;   P4M0 = 0;   //设置为准双向口
 196   1          P5M1 = 0;   P5M0 = 0;   //设置为准双向口
 197   1          P6M1 = 0;   P6M0 = 0;   //设置为准双向口
 198   1          P7M1 = 0;   P7M0 = 0;   //设置为准双向口
 199   1          
 200   1          PWM_config();
 201   1          P_IR_TX = IR_TX_OFF;
 202   1          
 203   1          EA = 1;                     //打开总中断
 204   1          
 205   1          while(1)
 206   1          {
 207   2              delay_ms(30);       //30ms
 208   2              IO_KeyScan();
 209   2      
 210   2              if(KeyCode != 0)        //检测到键码
 211   2              {
 212   3                  TxTime = 0;
 213   3                                      //一帧数据最小长度 = 9 + 4.5 + 0.5625 + 24 * 1.125 + 8 * 2.25 = 59.0625 ms
 214   3                                      //一帧数据最大长度 = 9 + 4.5 + 0.5625 + 8 * 1.125 + 24 * 2.25 = 77.0625 ms
 215   3                  IR_TxPulse(342);    //对应9ms，同步头       9ms
 216   3                  IR_TxSpace(171);    //对应4.5ms，同步头间隔 4.5ms
 217   3                  IR_TxPulse(21);     //开始发送数据          0.5625ms
 218   3      
 219   3                  IR_TxByte(User_code%256);   //发用户码低字节
 220   3                  IR_TxByte(User_code/256);   //发用户码高字节
 221   3                  IR_TxByte(KeyCode);         //发数据
 222   3                  IR_TxByte(~KeyCode);        //发数据反码
 223   3                  
 224   3                  if(TxTime < 56)     //一帧按最大77ms发送, 不够的话,补偿时间     108ms
 225   3                  {
 226   4                      TxTime = 56 - TxTime;
 227   4                      TxTime = TxTime + TxTime / 8;
 228   4                      delay_ms(TxTime);
 229   4                  }
 230   3                  delay_ms(31);
 231   3      
 232   3                  while(IO_KeyState != 0) //键未释放
 233   3                  {
 234   4                      IR_TxPulse(342);    //对应9ms，   同步头        9ms
 235   4                      IR_TxSpace(86);     //对应2.25ms，同步头间隔    2.25ms
 236   4                      IR_TxPulse(21);     //开始发送数据              0.5625ms
 237   4                      delay_ms(96);
 238   4                      IO_KeyScan();
 239   4                  }
 240   3                  KeyCode = 0;
 241   3              }
C51 COMPILER V9.59.0.0   IR_TX                                                             03/09/2021 16:13:49 PAGE 5   

 242   2          }
 243   1      } 
 244          /**********************************************/
 245          
 246          //========================================================================
 247          // 函数: void delay_ms(u8 ms)
 248          // 描述: 延时函数。
 249          // 参数: ms,要延时的ms数, 这里只支持1~255ms. 自动适应主时钟.
 250          // 返回: none.
 251          // 版本: VER1.0
 252          // 日期: 2021-3-9
 253          // 备注: 
 254          //========================================================================
 255          void delay_ms(u8 ms)
 256          {
 257   1           u16 i;
 258   1           do{
 259   2                i = MAIN_Fosc / 10000;
 260   2                while(--i);   //10T per loop
 261   2           }while(--ms);
 262   1      }
 263          
 264          /*****************************************************
 265              行列键扫描程序
 266              使用XY查找4x4键的方法，只能单键，速度快
 267          
 268             Y     P04      P05      P06      P07
 269                    |        |        |        |
 270          X         |        |        |        |
 271          P00 ---- K00 ---- K01 ---- K02 ---- K03 ----
 272                    |        |        |        |
 273          P01 ---- K04 ---- K05 ---- K06 ---- K07 ----
 274                    |        |        |        |
 275          P02 ---- K08 ---- K09 ---- K10 ---- K11 ----
 276                    |        |        |        |
 277          P03 ---- K12 ---- K13 ---- K14 ---- K15 ----
 278                    |        |        |        |
 279          ******************************************************/
 280          
 281          
 282          u8 code T_KeyTable[16] = {0,1,2,0,3,0,0,0,4,0,0,0,0,0,0,0};
 283          
 284          void IO_KeyDelay(void)
 285          {
 286   1          u8 i;
 287   1          i = 60;
 288   1          while(--i)  ;
 289   1      }
 290          
 291          void IO_KeyScan(void)    //50ms call
 292          {
 293   1          u8  j;
 294   1      
 295   1          j = IO_KeyState1;   //保存上一次状态
 296   1      
 297   1          P0 = 0xf0;  //X低，读Y
 298   1          IO_KeyDelay();
 299   1          IO_KeyState1 = P0 & 0xf0;
 300   1      
 301   1          P0 = 0x0f;  //Y低，读X
 302   1          IO_KeyDelay();
 303   1          IO_KeyState1 |= (P0 & 0x0f);
C51 COMPILER V9.59.0.0   IR_TX                                                             03/09/2021 16:13:49 PAGE 6   

 304   1          IO_KeyState1 ^= 0xff;   //取反
 305   1          
 306   1          if(j == IO_KeyState1)   //连续两次读相等
 307   1          {
 308   2              j = IO_KeyState;
 309   2              IO_KeyState = IO_KeyState1;
 310   2              if(IO_KeyState != 0)    //有键按下
 311   2              {
 312   3                  F0 = 0;
 313   3                  if(j == 0)  F0 = 1; //第一次按下
 314   3                  else if(j == IO_KeyState)
 315   3                  {
 316   4                      if(++IO_KeyHoldCnt >= 20)   //1秒后重键
 317   4                      {
 318   5                          IO_KeyHoldCnt = 18;
 319   5                          F0 = 1;
 320   5                      }
 321   4                  }
 322   3                  if(F0)
 323   3                  {
 324   4                      j = T_KeyTable[IO_KeyState >> 4];
 325   4                      if((j != 0) && (T_KeyTable[IO_KeyState& 0x0f] != 0)) 
 326   4                          KeyCode = (j - 1) * 4 + T_KeyTable[IO_KeyState & 0x0f] + 16;    //计算键码，17~32
 327   4                  }
 328   3              }
 329   2              else    IO_KeyHoldCnt = 0;
 330   2          }
 331   1          P0 = 0xff;
 332   1      }
 333          
 334          
 335          /************* 发送脉冲函数 **************/
 336          void IR_TxPulse(u16 pulse)
 337          {
 338   1          tx_cnt = pulse;
 339   1          PWMA_CCER2 = 0x00; //写 CCMRx 前必须先清零 CCxE 关闭通道
 340   1          PWMA_CCMR4 = 0x60; //设置 PWM4 模式1 输出
 341   1          PWMA_CCER2 = 0xB0; //使能 CC4E 通道, 低电平有效
 342   1          PWMA_IER = 0x10;   //使能捕获/比较 4 中断
 343   1          while(tx_cnt);
 344   1      }
 345          
 346          /************* 发送空闲函数 **************/
 347          void IR_TxSpace(u16 pulse)
 348          {
 349   1          tx_cnt = pulse;
 350   1          PWMA_CCER2 = 0x00; //写 CCMRx 前必须先清零 CCxE 关闭通道
 351   1          PWMA_CCMR4 = 0x40; //设置 PWM4 强制为无效电平
 352   1          PWMA_CCER2 = 0xB0; //使能 CC4E 通道, 低电平有效
 353   1          PWMA_IER = 0x10;   //使能捕获/比较 4 中断
 354   1          while(tx_cnt);
 355   1      }
 356          
 357          
 358          /************* 发送一个字节函数 **************/
 359          void IR_TxByte(u8 dat)
 360          {
 361   1          u8 i;
 362   1          for(i=0; i<8; i++)
 363   1          {
 364   2              if(dat & 1)     IR_TxSpace(63), TxTime += 2;    //数据1对应 1.6875 + 0.5625 ms 
 365   2              else            IR_TxSpace(21), TxTime++;       //数据0对应 0.5625 + 0.5625 ms
C51 COMPILER V9.59.0.0   IR_TX                                                             03/09/2021 16:13:49 PAGE 7   

 366   2              IR_TxPulse(21);         //脉冲都是0.5625ms
 367   2              dat >>= 1;              //下一个位
 368   2          }
 369   1      }
 370          
 371          //========================================================================
 372          // 函数: void PWM_config(void)
 373          // 描述: PCA配置函数.
 374          // 参数: None
 375          // 返回: none.
 376          // 版本: V1.0, 2012-11-22
 377          //========================================================================
 378          void PWM_config(void)
 379          {
 380   1          P_SW2 |= 0x80;
 381   1          
 382   1          PWMA_CCER2 = 0x00; //写 CCMRx 前必须先清零 CCxE 关闭通道
 383   1          PWMA_CCMR4 = 0x60; //设置 PWM4 模式1 输出
 384   1          //PWMA_CCER2 = 0xB0; //使能 CC4E 通道, 低电平有效
 385   1      
 386   1          PWMA_ARRH = 0x02; //设置周期时间
 387   1          PWMA_ARRL = 0x77;
 388   1          PWMA_CCR4H = 0;
 389   1          PWMA_CCR4L = 210; //设置占空比时间
 390   1      
 391   1      //  PWMA_ENO = 0x80; //使能 PWM4N 输出
 392   1          PWMA_ENO = 0x40; //使能 PWM4P 输出
 393   1      //  PWMA_PS = 0x00;  //高级 PWM 通道 4N 输出脚选择位, 0x00:P1.7, 0x40:P2.7, 0x80:P6.7, 0xC0:P3.3
 394   1          PWMA_PS = 0x00;  //高级 PWM 通道 4P 输出脚选择位, 0x00:P1.6, 0x40:P2.6, 0x80:P6.6, 0xC0:P3.4
 395   1          PWMA_BKR = 0x80; //使能主输出
 396   1      //    PWMA_IER = 0x10; // 使能中断
 397   1          PWMA_CR1 |= 0x01; //开始计时
 398   1      //    P_SW2 &= 0x7f;
 399   1      }
 400          
 401          /******************* PWM中断函数 ********************/
 402          void PWMA_ISR() interrupt 26
 403          {
 404   1          if(PWMA_SR1 & 0X10)
 405   1          {
 406   2              //PWMA_SR1 &=~0X10;
 407   2              PWMA_SR1 = 0;
 408   2            
 409   2              if(--tx_cnt == 0)
 410   2              {
 411   3                  PWMA_CCER2 = 0x00; //写 CCMRx 前必须先清零 CCxE 关闭通道
 412   3                  PWMA_CCMR4 = 0x40; //设置 PWM4 强制为无效电平
 413   3                  PWMA_CCER2 = 0xB0; //使能 CC4E 通道, 低电平有效
 414   3                  PWMA_IER = 0x00;   // 关闭中断
 415   3              }
 416   2          }
 417   1      }
 418          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    541    ----
   CONSTANT SIZE    =     16    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      8    ----
   IDATA SIZE       =   ----    ----
C51 COMPILER V9.59.0.0   IR_TX                                                             03/09/2021 16:13:49 PAGE 8   

   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
