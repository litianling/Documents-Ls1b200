C51 COMPILER V9.59.0.0   RTC                                                               02/08/2021 11:36:16 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE RTC
OBJECT MODULE PLACED IN RTC.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE RTC.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          /*---------------------------------------------------------------------*/
   2          /* --- STC MCU Limited ------------------------------------------------*/
   3          /* --- STC 1T Series MCU Demo Programme -------------------------------*/
   4          /* --- Mobile: (86)13922805190 ----------------------------------------*/
   5          /* --- Fax: 86-0513-55012956,55012947,55012969 ------------------------*/
   6          /* --- Tel: 86-0513-55012928,55012929,55012966 ------------------------*/
   7          /* --- Web: www.STCMCU.com --------------------------------------------*/
   8          /* --- Web: www.STCMCUDATA.com  ---------------------------------------*/
   9          /* --- QQ:  800003751 -------------------------------------------------*/
  10          /* 如果要在程序中使用此代码,请在程序中注明使用了STC的资料及程序        */
  11          /*---------------------------------------------------------------------*/
  12          
  13          
  14          /*************  本程序功能说明  **************
  15          
  16          本例程基于STC8H8K64U为主控芯片的实验箱8进行编写测试，STC8G、STC8H系列芯片可通用参考.
  17          
  18          读写RTC, IC为PCF8563.
  19          
  20          用STC的MCU的IO方式驱动8位数码管。
  21          
  22          使用Timer0的16位自动重装来产生1ms节拍,程序运行于这个节拍下, 用户修改MCU主时钟频率时,自动定时于1ms.
  23          
  24          8位数码管显示时间(小时-分钟-秒).
  25          
  26          行列扫描按键键码为17~32.
  27          
  28          按键只支持单键按下, 不支持多键同时按下, 那样将会有不可预知的结果.
  29          
  30          键按下超过1秒后,将以10键/秒的速度提供重键输出. 用户只需要检测KeyCode是否非0来判断键是否按下.
  31          
  32          调整时间键:
  33          键码17: 小时+.
  34          键码18: 小时-.
  35          键码19: 分钟+.
  36          键码20: 分钟-.
  37          
  38          下载时, 选择时钟 24MHZ (用户可自行修改频率).
  39          
  40          ******************************************/
  41          
  42          
  43          #include    "reg51.h"       //包含此头文件后，里面声明的寄存器不需要再手动输入，避免重复定义
  44          #include    "intrins.h"
  45          
  46          #define     MAIN_Fosc       24000000L   //定义主时钟
  47          
  48          typedef     unsigned char   u8;
  49          typedef     unsigned int    u16;
  50          typedef     unsigned long   u32;
  51          
  52          //手动输入声明"reg51.h"头文件里面没有定义的寄存器
  53          sfr TH2  = 0xD6;
  54          sfr TL2  = 0xD7;
  55          sfr IE2   = 0xAF;
C51 COMPILER V9.59.0.0   RTC                                                               02/08/2021 11:36:16 PAGE 2   

  56          sfr INT_CLKO = 0x8F;
  57          sfr AUXR = 0x8E;
  58          sfr AUXR1 = 0xA2;
  59          sfr P_SW1 = 0xA2;
  60          sfr P_SW2 = 0xBA;
  61          sfr S2CON = 0x9A;
  62          sfr S2BUF = 0x9B;
  63          
  64          sfr P4   = 0xC0;
  65          sfr P5   = 0xC8;
  66          sfr P6   = 0xE8;
  67          sfr P7   = 0xF8;
  68          sfr P1M1 = 0x91;    //PxM1.n,PxM0.n     =00--->Standard,    01--->push-pull
  69          sfr P1M0 = 0x92;    //                  =10--->pure input,  11--->open drain
  70          sfr P0M1 = 0x93;
  71          sfr P0M0 = 0x94;
  72          sfr P2M1 = 0x95;
  73          sfr P2M0 = 0x96;
  74          sfr P3M1 = 0xB1;
  75          sfr P3M0 = 0xB2;
  76          sfr P4M1 = 0xB3;
  77          sfr P4M0 = 0xB4;
  78          sfr P5M1 = 0xC9;
  79          sfr P5M0 = 0xCA;
  80          sfr P6M1 = 0xCB;
  81          sfr P6M0 = 0xCC;
  82          sfr P7M1 = 0xE1;
  83          sfr P7M0 = 0xE2;
  84          
  85          sbit P00 = P0^0;
  86          sbit P01 = P0^1;
  87          sbit P02 = P0^2;
  88          sbit P03 = P0^3;
  89          sbit P04 = P0^4;
  90          sbit P05 = P0^5;
  91          sbit P06 = P0^6;
  92          sbit P07 = P0^7;
  93          sbit P10 = P1^0;
  94          sbit P11 = P1^1;
  95          sbit P12 = P1^2;
  96          sbit P13 = P1^3;
  97          sbit P14 = P1^4;
  98          sbit P15 = P1^5;
  99          sbit P16 = P1^6;
 100          sbit P17 = P1^7;
 101          sbit P20 = P2^0;
 102          sbit P21 = P2^1;
 103          sbit P22 = P2^2;
 104          sbit P23 = P2^3;
 105          sbit P24 = P2^4;
 106          sbit P25 = P2^5;
 107          sbit P26 = P2^6;
 108          sbit P27 = P2^7;
 109          sbit P30 = P3^0;
 110          sbit P31 = P3^1;
 111          sbit P32 = P3^2;
 112          sbit P33 = P3^3;
 113          sbit P34 = P3^4;
 114          sbit P35 = P3^5;
 115          sbit P36 = P3^6;
 116          sbit P37 = P3^7;
 117          sbit P40 = P4^0;
C51 COMPILER V9.59.0.0   RTC                                                               02/08/2021 11:36:16 PAGE 3   

 118          sbit P41 = P4^1;
 119          sbit P42 = P4^2;
 120          sbit P43 = P4^3;
 121          sbit P44 = P4^4;
 122          sbit P45 = P4^5;
 123          sbit P46 = P4^6;
 124          sbit P47 = P4^7;
 125          sbit P50 = P5^0;
 126          sbit P51 = P5^1;
 127          sbit P52 = P5^2;
 128          sbit P53 = P5^3;
 129          sbit P54 = P5^4;
 130          sbit P55 = P5^5;
 131          sbit P56 = P5^6;
 132          sbit P57 = P5^7;
 133          
 134          #define I2CCFG          (*(unsigned char volatile xdata *)0xfe80)
 135          #define I2CMSCR         (*(unsigned char volatile xdata *)0xfe81)
 136          #define I2CMSST         (*(unsigned char volatile xdata *)0xfe82)
 137          #define I2CSLCR         (*(unsigned char volatile xdata *)0xfe83)
 138          #define I2CSLST         (*(unsigned char volatile xdata *)0xfe84)
 139          #define I2CSLADR        (*(unsigned char volatile xdata *)0xfe85)
 140          #define I2CTXD          (*(unsigned char volatile xdata *)0xfe86)
 141          #define I2CRXD          (*(unsigned char volatile xdata *)0xfe87)
 142          #define I2CMSAUX        (*(unsigned char volatile xdata *)0xfe88)
 143          
 144          sbit SDA = P1^4;
 145          sbit SCL = P1^5;
 146          
 147          /***********************************************************/
 148          
 149          #define DIS_DOT     0x20
 150          #define DIS_BLACK   0x10
 151          #define DIS_        0x11
 152          
 153          #define SLAW    0xA2
 154          #define SLAR    0xA3
 155          
 156          
 157          /****************************** 用户定义宏 ***********************************/
 158          
 159          #define Timer0_Reload   (65536UL -(MAIN_Fosc / 1000))       //Timer 0 中断频率, 1000次/秒
 160          
 161          /*****************************************************************************/
 162          
 163          
 164          /*************  本地常量声明    **************/
 165          u8 code t_display[]={                       //标准字库
 166          //   0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F
 167              0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F,0x77,0x7C,0x39,0x5E,0x79,0x71,
 168          //black  -     H    J    K    L    N    o   P    U     t    G    Q    r   M    y
 169              0x00,0x40,0x76,0x1E,0x70,0x38,0x37,0x5C,0x73,0x3E,0x78,0x3d,0x67,0x50,0x37,0x6e,
 170              0xBF,0x86,0xDB,0xCF,0xE6,0xED,0xFD,0x87,0xFF,0xEF,0x46};    //0. 1. 2. 3. 4. 5. 6. 7. 8. 9. -1
 171          
 172          u8 code T_COM[]={0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80};      //位码
 173          
 174          
 175          /*************  本地变量声明    **************/
 176          
 177          u8  LED8[8];        //显示缓冲
 178          u8  display_index;  //显示位索引
 179          bit B_1ms;          //1ms标志
C51 COMPILER V9.59.0.0   RTC                                                               02/08/2021 11:36:16 PAGE 4   

 180          
 181          u8 IO_KeyState, IO_KeyState1, IO_KeyHoldCnt;    //行列键盘变量
 182          u8  KeyHoldCnt; //键按下计时
 183          u8  KeyCode;    //给用户使用的键码
 184          u8  cnt50ms;
 185          
 186          u8  hour,minute,second; //RTC变量
 187          u16 msecond;
 188          
 189          
 190          /*************  本地函数声明    **************/
 191          void    IO_KeyScan(void);   //50ms call
 192          void    WriteNbyte(u8 addr, u8 *p, u8 number);
 193          void    ReadNbyte( u8 addr, u8 *p, u8 number);
 194          void    DisplayRTC(void);
 195          void    ReadRTC(void);
 196          void    WriteRTC(void);
 197          
 198          
 199          /**********************************************/
 200          void main(void)
 201          {
 202   1          u8  i;
 203   1      
 204   1          P0M1 = 0;   P0M0 = 0;   //设置为准双向口
 205   1          P1M1 = 0;   P1M0 = 0;   //设置为准双向口
 206   1          P2M1 = 0;   P2M0 = 0;   //设置为准双向口
 207   1          P3M1 = 0;   P3M0 = 0;   //设置为准双向口
 208   1          P4M1 = 0;   P4M0 = 0;   //设置为准双向口
 209   1          P5M1 = 0;   P5M0 = 0;   //设置为准双向口
 210   1          P6M1 = 0;   P6M0 = 0;   //设置为准双向口
 211   1          P7M1 = 0;   P7M0 = 0;   //设置为准双向口
 212   1          
 213   1          display_index = 0;
 214   1          
 215   1          for(i=0; i<8; i++)  LED8[i] = 0x10; //上电消隐
 216   1          
 217   1          AUXR = 0x80;    //Timer0 set as 1T, 16 bits timer auto-reload, 
 218   1          TH0 = (u8)(Timer0_Reload / 256);
 219   1          TL0 = (u8)(Timer0_Reload % 256);
 220   1          ET0 = 1;    //Timer0 interrupt enable
 221   1          TR0 = 1;    //Tiner0 run
 222   1      
 223   1          P_SW2 |= 0x80;
 224   1          I2CCFG = 0xe0;                  //使能I2C主机模式
 225   1          I2CMSST = 0x00;
 226   1      
 227   1          EA = 1;     //打开总中断
 228   1          
 229   1          ReadRTC();
 230   1          F0 = 0;
 231   1          if(second >= 60)    F0 = 1; //错误
 232   1          if(minute >= 60)    F0 = 1; //错误
 233   1          if(hour   >= 24)    F0 = 1; //错误
 234   1          if(F0)  //有错误, 默认12:00:00
 235   1          {
 236   2              second = 0;
 237   2              minute = 0;
 238   2              hour  = 12;
 239   2              WriteRTC();
 240   2          }
 241   1      
C51 COMPILER V9.59.0.0   RTC                                                               02/08/2021 11:36:16 PAGE 5   

 242   1          DisplayRTC();
 243   1          LED8[2] = DIS_;
 244   1          LED8[5] = DIS_;
 245   1      
 246   1          KeyHoldCnt = 0; //键按下计时
 247   1          KeyCode = 0;    //给用户使用的键码
 248   1      
 249   1          IO_KeyState = 0;
 250   1          IO_KeyState1 = 0;
 251   1          IO_KeyHoldCnt = 0;
 252   1          cnt50ms = 0;
 253   1      
 254   1          while(1)
 255   1          {
 256   2              if(B_1ms)   //1ms到
 257   2              {
 258   3                  B_1ms = 0;
 259   3                  if(++msecond >= 1000)   //1秒到
 260   3                  {
 261   4                      msecond = 0;
 262   4                      ReadRTC();
 263   4                      DisplayRTC();
 264   4                  }
 265   3      
 266   3                  if(++cnt50ms >= 50)     //50ms扫描一次行列键盘
 267   3                  {
 268   4                      cnt50ms = 0;
 269   4                      IO_KeyScan();
 270   4                  }
 271   3                  
 272   3                  if(KeyCode != 0)        //有键按下
 273   3                  {
 274   4                      if(KeyCode == 17)   //hour +1
 275   4                      {
 276   5                          if(++hour >= 24)    hour = 0;
 277   5                          WriteRTC();
 278   5                          DisplayRTC();
 279   5                      }
 280   4                      if(KeyCode == 18)   //hour -1
 281   4                      {
 282   5                          if(--hour >= 24)    hour = 23;
 283   5                          WriteRTC();
 284   5                          DisplayRTC();
 285   5                      }
 286   4                      if(KeyCode == 19)   //minute +1
 287   4                      {
 288   5                          second = 0;
 289   5                          if(++minute >= 60)  minute = 0;
 290   5                          WriteRTC();
 291   5                          DisplayRTC();
 292   5                      }
 293   4                      if(KeyCode == 20)   //minute -1
 294   4                      {
 295   5                          second = 0;
 296   5                          if(--minute >= 60)  minute = 59;
 297   5                          WriteRTC();
 298   5                          DisplayRTC();
 299   5                      }
 300   4      
 301   4                      KeyCode = 0;
 302   4                  }
 303   3      
C51 COMPILER V9.59.0.0   RTC                                                               02/08/2021 11:36:16 PAGE 6   

 304   3              }
 305   2          }
 306   1      } 
 307          
 308          /********************** 显示时钟函数 ************************/
 309          void    DisplayRTC(void)
 310          {
 311   1          if(hour >= 10)  LED8[0] = hour / 10;
 312   1          else            LED8[0] = DIS_BLACK;
 313   1          LED8[1] = hour % 10;
 314   1          LED8[2] = DIS_;
 315   1          LED8[3] = minute / 10;
 316   1          LED8[4] = minute % 10;
 317   1          LED8[6] = second / 10;
 318   1          LED8[7] = second % 10;
 319   1      }
 320          
 321          /********************** 读RTC函数 ************************/
 322          void    ReadRTC(void)
 323          {
 324   1          u8  tmp[3];
 325   1      
 326   1          ReadNbyte(2, tmp, 3);
 327   1          second = ((tmp[0] >> 4) & 0x07) * 10 + (tmp[0] & 0x0f);
 328   1          minute = ((tmp[1] >> 4) & 0x07) * 10 + (tmp[1] & 0x0f);
 329   1          hour   = ((tmp[2] >> 4) & 0x03) * 10 + (tmp[2] & 0x0f);
 330   1      }
 331          
 332          /********************** 写RTC函数 ************************/
 333          void    WriteRTC(void)
 334          {
 335   1          u8  tmp[3];
 336   1      
 337   1          tmp[0] = ((second / 10) << 4) + (second % 10);
 338   1          tmp[1] = ((minute / 10) << 4) + (minute % 10);
 339   1          tmp[2] = ((hour / 10) << 4) + (hour % 10);
 340   1          WriteNbyte(2, tmp, 3);
 341   1      }
 342          
 343          
 344          /*****************************************************
 345              行列键扫描程序
 346              使用XY查找4x4键的方法，只能单键，速度快
 347          
 348             Y     P04      P05      P06      P07
 349                    |        |        |        |
 350          X         |        |        |        |
 351          P00 ---- K00 ---- K01 ---- K02 ---- K03 ----
 352                    |        |        |        |
 353          P01 ---- K04 ---- K05 ---- K06 ---- K07 ----
 354                    |        |        |        |
 355          P02 ---- K08 ---- K09 ---- K10 ---- K11 ----
 356                    |        |        |        |
 357          P03 ---- K12 ---- K13 ---- K14 ---- K15 ----
 358                    |        |        |        |
 359          ******************************************************/
 360          
 361          
 362          u8 code T_KeyTable[16] = {0,1,2,0,3,0,0,0,4,0,0,0,0,0,0,0};
 363          
 364          void IO_KeyDelay(void)
 365          {
C51 COMPILER V9.59.0.0   RTC                                                               02/08/2021 11:36:16 PAGE 7   

 366   1          u8 i;
 367   1          i = 60;
 368   1          while(--i)  ;
 369   1      }
 370          
 371          void IO_KeyScan(void)    //50ms call
 372          {
 373   1          u8  j;
 374   1      
 375   1          j = IO_KeyState1;   //保存上一次状态
 376   1      
 377   1          P0 = 0xf0;  //X低，读Y
 378   1          IO_KeyDelay();
 379   1          IO_KeyState1 = P0 & 0xf0;
 380   1      
 381   1          P0 = 0x0f;  //Y低，读X
 382   1          IO_KeyDelay();
 383   1          IO_KeyState1 |= (P0 & 0x0f);
 384   1          IO_KeyState1 ^= 0xff;   //取反
 385   1          
 386   1          if(j == IO_KeyState1)   //连续两次读相等
 387   1          {
 388   2              j = IO_KeyState;
 389   2              IO_KeyState = IO_KeyState1;
 390   2              if(IO_KeyState != 0)    //有键按下
 391   2              {
 392   3                  F0 = 0;
 393   3                  if(j == 0)  F0 = 1; //第一次按下
 394   3                  else if(j == IO_KeyState)
 395   3                  {
 396   4                      if(++IO_KeyHoldCnt >= 20)   //1秒后重键
 397   4                      {
 398   5                          IO_KeyHoldCnt = 18;
 399   5                          F0 = 1;
 400   5                      }
 401   4                  }
 402   3                  if(F0)
 403   3                  {
 404   4                      j = T_KeyTable[IO_KeyState >> 4];
 405   4                      if((j != 0) && (T_KeyTable[IO_KeyState& 0x0f] != 0)) 
 406   4                          KeyCode = (j - 1) * 4 + T_KeyTable[IO_KeyState & 0x0f] + 16;    //计算键码，17~32
 407   4                  }
 408   3              }
 409   2              else    IO_KeyHoldCnt = 0;
 410   2          }
 411   1          P0 = 0xff;
 412   1      }
 413          
 414          
 415          /********************** 显示扫描函数 ************************/
 416          void DisplayScan(void)
 417          {   
 418   1          P7 = ~T_COM[7-display_index];
 419   1          P6 = ~t_display[LED8[display_index]];
 420   1          if(++display_index >= 8)    display_index = 0;  //8位结束回0
 421   1      }
 422          
 423          
 424          /********************** Timer0 1ms中断函数 ************************/
 425          void timer0 (void) interrupt 1
 426          {
 427   1          DisplayScan();  //1ms扫描显示一位
C51 COMPILER V9.59.0.0   RTC                                                               02/08/2021 11:36:16 PAGE 8   

 428   1          B_1ms = 1;      //1ms标志
 429   1      }
 430          
 431          
 432          void Wait()
 433          {
 434   1          while (!(I2CMSST & 0x40));
 435   1          I2CMSST &= ~0x40;
 436   1      }
 437          
 438          void Start()
 439          {
 440   1          I2CMSCR = 0x01;                         //发送START命令
 441   1          Wait();
 442   1      }
 443          
 444          void SendData(char dat)
 445          {
 446   1          I2CTXD = dat;                           //写数据到数据缓冲区
 447   1          I2CMSCR = 0x02;                         //发送SEND命令
 448   1          Wait();
 449   1      }
 450          
 451          void RecvACK()
 452          {
 453   1          I2CMSCR = 0x03;                         //发送读ACK命令
 454   1          Wait();
 455   1      }
 456          
 457          char RecvData()
 458          {
 459   1          I2CMSCR = 0x04;                         //发送RECV命令
 460   1          Wait();
 461   1          return I2CRXD;
 462   1      }
 463          
 464          void SendACK()
 465          {
 466   1          I2CMSST = 0x00;                         //设置ACK信号
 467   1          I2CMSCR = 0x05;                         //发送ACK命令
 468   1          Wait();
 469   1      }
 470          
 471          void SendNAK()
 472          {
 473   1          I2CMSST = 0x01;                         //设置NAK信号
 474   1          I2CMSCR = 0x05;                         //发送ACK命令
 475   1          Wait();
 476   1      }
 477          
 478          void Stop()
 479          {
 480   1          I2CMSCR = 0x06;                         //发送STOP命令
 481   1          Wait();
 482   1      }
 483          
 484          void WriteNbyte(u8 addr, u8 *p, u8 number)  /*  WordAddress,First Data Address,Byte lenth   */
 485          {
 486   1          Start();                                //发送起始命令
 487   1          SendData(SLAW);                         //发送设备地址+写命令
 488   1          RecvACK();
 489   1          SendData(addr);                         //发送存储地址
C51 COMPILER V9.59.0.0   RTC                                                               02/08/2021 11:36:16 PAGE 9   

 490   1          RecvACK();
 491   1          do
 492   1          {
 493   2              SendData(*p++);
 494   2              RecvACK();
 495   2          }
 496   1          while(--number);
 497   1          Stop();                                 //发送停止命令
 498   1      }
 499          
 500          void ReadNbyte(u8 addr, u8 *p, u8 number)   /*  WordAddress,First Data Address,Byte lenth   */
 501          {
 502   1          Start();                                //发送起始命令
 503   1          SendData(SLAW);                         //发送设备地址+写命令
 504   1          RecvACK();
 505   1          SendData(addr);                         //发送存储地址
 506   1          RecvACK();
 507   1          Start();                                //发送起始命令
 508   1          SendData(SLAR);                         //发送设备地址+读命令
 509   1          RecvACK();
 510   1          do
 511   1          {
 512   2              *p = RecvData();
 513   2              p++;
 514   2              if(number != 1) SendACK();          //send ACK
 515   2          }
 516   1          while(--number);
 517   1          SendNAK();                              //send no ACK 
 518   1          Stop();                                 //发送停止命令
 519   1      }
 520          /****************************/
 521          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    970    ----
   CONSTANT SIZE    =     67    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     20      16
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
