C51 COMPILER V9.59.0.0   PWM                                                               02/08/2021 10:02:24 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE PWM
OBJECT MODULE PLACED IN PWM.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE PWM.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          /*---------------------------------------------------------------------*/
   2          /* --- STC MCU Limited ------------------------------------------------*/
   3          /* --- STC 1T Series MCU Demo Programme -------------------------------*/
   4          /* --- Mobile: (86)13922805190 ----------------------------------------*/
   5          /* --- Fax: 86-0513-55012956,55012947,55012969 ------------------------*/
   6          /* --- Tel: 86-0513-55012928,55012929,55012966 ------------------------*/
   7          /* --- Web: www.STCMCU.com --------------------------------------------*/
   8          /* --- Web: www.STCMCUDATA.com  ---------------------------------------*/
   9          /* --- QQ:  800003751 -------------------------------------------------*/
  10          /* 如果要在程序中使用此代码,请在程序中注明使用了STC的资料及程序        */
  11          /*---------------------------------------------------------------------*/
  12          
  13          
  14          /*************  功能说明    **************
  15          
  16          本例程基于STC8H8K64U为主控芯片的实验箱8进行编写测试，STC8H系列芯片可通用参考.
  17          
  18          利用高级PWMA/PWMB中断实现定时器功能.
  19          
  20          定时周期 = ((PWMx_PSCR + 1) * (PWMx_ARR + 1)) / SYSclk.
  21          
  22          下载时, 选择时钟 24MHZ (用户可自行修改频率).
  23          
  24          ******************************************/
  25          
  26          #include    "reg51.h"       //包含此头文件后，里面声明的寄存器不需要再手动输入，避免重复定义
  27          #include    "intrins.h"
  28          
  29          #define     MAIN_Fosc       24000000L   //定义主时钟
  30          
  31          typedef     unsigned char   u8;
  32          typedef     unsigned int    u16;
  33          typedef     unsigned long   u32;
  34          
  35          //手动输入声明"reg51.h"头文件里面没有定义的寄存器
  36          sfr TH2  = 0xD6;
  37          sfr TL2  = 0xD7;
  38          sfr IE2   = 0xAF;
  39          sfr INT_CLKO = 0x8F;
  40          sfr AUXR = 0x8E;
  41          sfr P_SW1 = 0xA2;
  42          sfr P_SW2 = 0xBA;
  43          
  44          sfr P4   = 0xC0;
  45          sfr P5   = 0xC8;
  46          sfr P6   = 0xE8;
  47          sfr P7   = 0xF8;
  48          sfr P1M1 = 0x91;    //PxM1.n,PxM0.n     =00--->Standard,    01--->push-pull
  49          sfr P1M0 = 0x92;    //                  =10--->pure input,  11--->open drain
  50          sfr P0M1 = 0x93;
  51          sfr P0M0 = 0x94;
  52          sfr P2M1 = 0x95;
  53          sfr P2M0 = 0x96;
  54          sfr P3M1 = 0xB1;
  55          sfr P3M0 = 0xB2;
C51 COMPILER V9.59.0.0   PWM                                                               02/08/2021 10:02:24 PAGE 2   

  56          sfr P4M1 = 0xB3;
  57          sfr P4M0 = 0xB4;
  58          sfr P5M1 = 0xC9;
  59          sfr P5M0 = 0xCA;
  60          sfr P6M1 = 0xCB;
  61          sfr P6M0 = 0xCC;
  62          sfr P7M1 = 0xE1;
  63          sfr P7M0 = 0xE2;
  64          
  65          sbit P00 = P0^0;
  66          sbit P01 = P0^1;
  67          sbit P02 = P0^2;
  68          sbit P03 = P0^3;
  69          sbit P04 = P0^4;
  70          sbit P05 = P0^5;
  71          sbit P06 = P0^6;
  72          sbit P07 = P0^7;
  73          sbit P10 = P1^0;
  74          sbit P11 = P1^1;
  75          sbit P12 = P1^2;
  76          sbit P13 = P1^3;
  77          sbit P14 = P1^4;
  78          sbit P15 = P1^5;
  79          sbit P16 = P1^6;
  80          sbit P17 = P1^7;
  81          sbit P20 = P2^0;
  82          sbit P21 = P2^1;
  83          sbit P22 = P2^2;
  84          sbit P23 = P2^3;
  85          sbit P24 = P2^4;
  86          sbit P25 = P2^5;
  87          sbit P26 = P2^6;
  88          sbit P27 = P2^7;
  89          sbit P30 = P3^0;
  90          sbit P31 = P3^1;
  91          sbit P32 = P3^2;
  92          sbit P33 = P3^3;
  93          sbit P34 = P3^4;
  94          sbit P35 = P3^5;
  95          sbit P36 = P3^6;
  96          sbit P37 = P3^7;
  97          sbit P40 = P4^0;
  98          sbit P41 = P4^1;
  99          sbit P42 = P4^2;
 100          sbit P43 = P4^3;
 101          sbit P44 = P4^4;
 102          sbit P45 = P4^5;
 103          sbit P46 = P4^6;
 104          sbit P47 = P4^7;
 105          sbit P50 = P5^0;
 106          sbit P51 = P5^1;
 107          sbit P52 = P5^2;
 108          sbit P53 = P5^3;
 109          sbit P54 = P5^4;
 110          sbit P55 = P5^5;
 111          sbit P56 = P5^6;
 112          sbit P57 = P5^7;
 113          sbit P60 = P6^0;
 114          sbit P61 = P6^1;
 115          sbit P62 = P6^2;
 116          sbit P63 = P6^3;
 117          sbit P64 = P6^4;
C51 COMPILER V9.59.0.0   PWM                                                               02/08/2021 10:02:24 PAGE 3   

 118          sbit P65 = P6^5;
 119          sbit P66 = P6^6;
 120          sbit P67 = P6^7;
 121          
 122          /****************************** 用户定义宏 ***********************************/
 123          
 124          #define PWMA_ENO     (*(unsigned char  volatile xdata *)  0xFEB1)
 125          #define PWMA_PS      (*(unsigned char  volatile xdata *)  0xFEB2)
 126          #define PWM2_ENO     (*(unsigned char  volatile xdata *)  0xFEB5)
 127          #define PWM2_PS      (*(unsigned char  volatile xdata *)  0xFEB6)                               
 128          
 129          #define PWMA_CR1     (*(unsigned char  volatile xdata *)  0xFEC0)
 130          #define PWMA_CR2     (*(unsigned char  volatile xdata *)  0xFEC1)
 131          #define PWMA_SMCR    (*(unsigned char  volatile xdata *)  0xFEC2) 
 132          #define PWMA_ETR     (*(unsigned char  volatile xdata *)  0xFEC3) 
 133          #define PWMA_IER     (*(unsigned char  volatile xdata *)  0xFEC4) 
 134          #define PWMA_SR1     (*(unsigned char  volatile xdata *)  0xFEC5) 
 135          #define PWMA_SR2     (*(unsigned char  volatile xdata *)  0xFEC6) 
 136          #define PWMA_EGR     (*(unsigned char  volatile xdata *)  0xFEC7) 
 137          #define PWMA_CCMR1   (*(unsigned char  volatile xdata *)  0xFEC8) 
 138          #define PWMA_CCMR2   (*(unsigned char  volatile xdata *)  0xFEC9)
 139          #define PWMA_CCMR3   (*(unsigned char  volatile xdata *)  0xFECA)
 140          #define PWMA_CCMR4   (*(unsigned char  volatile xdata *)  0xFECB)
 141          #define PWMA_CCER1   (*(unsigned char  volatile xdata *)  0xFECC)
 142          #define PWMA_CCER2   (*(unsigned char  volatile xdata *)  0xFECD)
 143          #define PWMA_CNTRH   (*(unsigned char  volatile xdata *)  0xFECE)
 144          #define PWMA_CNTRL   (*(unsigned char  volatile xdata *)  0xFECF)
 145          #define PWMA_PSCR    (*(unsigned int   volatile xdata *)  0xFED0)
 146          #define PWMA_PSCRH   (*(unsigned char  volatile xdata *)  0xFED0)
 147          #define PWMA_PSCRL   (*(unsigned char  volatile xdata *)  0xFED1)
 148          #define PWMA_ARR     (*(unsigned int   volatile xdata *)  0xFED2)
 149          #define PWMA_ARRH    (*(unsigned char  volatile xdata *)  0xFED2)
 150          #define PWMA_ARRL    (*(unsigned char  volatile xdata *)  0xFED3)
 151          #define PWMA_RCR     (*(unsigned char  volatile xdata *)  0xFED4)
 152          #define PWMA_CCR1H   (*(unsigned char  volatile xdata *)  0xFED5)
 153          #define PWMA_CCR1L   (*(unsigned char  volatile xdata *)  0xFED6)
 154          #define PWMA_CCR2H   (*(unsigned char  volatile xdata *)  0xFED7)
 155          #define PWMA_CCR2L   (*(unsigned char  volatile xdata *)  0xFED8)
 156          #define PWMA_CCR3H   (*(unsigned char  volatile xdata *)  0xFED9)
 157          #define PWMA_CCR3L   (*(unsigned char  volatile xdata *)  0xFEDA)
 158          #define PWMA_CCR4H   (*(unsigned char  volatile xdata *)  0xFEDB)
 159          #define PWMA_CCR4L   (*(unsigned char  volatile xdata *)  0xFEDC)
 160          #define PWMA_BKR     (*(unsigned char  volatile xdata *)  0xFEDD)
 161          #define PWMA_DTR     (*(unsigned char  volatile xdata *)  0xFEDE)
 162          #define PWMA_OISR    (*(unsigned char  volatile xdata *)  0xFEDF)
 163          
 164          #define PWMB_CR1     (*(unsigned char  volatile xdata *)  0xFEE0)
 165          #define PWMB_CR2     (*(unsigned char  volatile xdata *)  0xFEE1)
 166          #define PWMB_SMCR    (*(unsigned char  volatile xdata *)  0xFEE2)
 167          #define PWMB_ETR     (*(unsigned char  volatile xdata *)  0xFEE3)
 168          #define PWMB_IER     (*(unsigned char  volatile xdata *)  0xFEE4)
 169          #define PWMB_SR1     (*(unsigned char  volatile xdata *)  0xFEE5)
 170          #define PWMB_SR2     (*(unsigned char  volatile xdata *)  0xFEE6)
 171          #define PWMB_EGR     (*(unsigned char  volatile xdata *)  0xFEE7)
 172          #define PWMB_CCMR1   (*(unsigned char  volatile xdata *)  0xFEE8)
 173          #define PWMB_CCMR2   (*(unsigned char  volatile xdata *)  0xFEE9)
 174          #define PWMB_CCMR3   (*(unsigned char  volatile xdata *)  0xFEEA)
 175          #define PWMB_CCMR4   (*(unsigned char  volatile xdata *)  0xFEEB)
 176          #define PWMB_CCER1   (*(unsigned char  volatile xdata *)  0xFEEC)
 177          #define PWMB_CCER2   (*(unsigned char  volatile xdata *)  0xFEED)
 178          #define PWMB_CNTRH   (*(unsigned char  volatile xdata *)  0xFEEE)
 179          #define PWMB_CNTRL   (*(unsigned char  volatile xdata *)  0xFEEF)
C51 COMPILER V9.59.0.0   PWM                                                               02/08/2021 10:02:24 PAGE 4   

 180          #define PWMB_PSCR    (*(unsigned int   volatile xdata *)  0xFEF0)
 181          #define PWMB_PSCRH   (*(unsigned char  volatile xdata *)  0xFEF0)
 182          #define PWMB_PSCRL   (*(unsigned char  volatile xdata *)  0xFEF1)
 183          #define PWMB_ARR     (*(unsigned int   volatile xdata *)  0xFEF2)
 184          #define PWMB_ARRH    (*(unsigned char  volatile xdata *)  0xFEF2)
 185          #define PWMB_ARRL    (*(unsigned char  volatile xdata *)  0xFEF3)
 186          #define PWMB_RCR     (*(unsigned char  volatile xdata *)  0xFEF4)
 187          #define PWMB_CCR1H   (*(unsigned char  volatile xdata *)  0xFEF5)
 188          #define PWMB_CCR1L   (*(unsigned char  volatile xdata *)  0xFEF6)
 189          #define PWMB_CCR2H   (*(unsigned char  volatile xdata *)  0xFEF7)
 190          #define PWMB_CCR2L   (*(unsigned char  volatile xdata *)  0xFEF8)
 191          #define PWMB_CCR3H   (*(unsigned char  volatile xdata *)  0xFEF9)
 192          #define PWMB_CCR3L   (*(unsigned char  volatile xdata *)  0xFEFA)
 193          #define PWMB_CCR4H   (*(unsigned char  volatile xdata *)  0xFEFB)
 194          #define PWMB_CCR4L   (*(unsigned char  volatile xdata *)  0xFEFC)
 195          #define PWMB_BKR     (*(unsigned char  volatile xdata *)  0xFEFD)
 196          #define PWMB_DTR     (*(unsigned char  volatile xdata *)  0xFEFE)
 197          #define PWMB_OISR    (*(unsigned char  volatile xdata *)  0xFEFF)
 198          
 199          /*****************************************************************************/
 200          
 201          void PWMA_Timer(u32 timer);
 202          void PWMB_Timer(u32 timer);
 203          
 204          /******************** 主函数 **************************/
 205          void main(void)
 206          {
 207   1        P0M1 = 0;   P0M0 = 0;   //设置为准双向口
 208   1        P1M1 = 0;   P1M0 = 0;   //设置为准双向口
 209   1        P2M1 = 0;   P2M0 = 0;   //设置为准双向口
 210   1        P3M1 = 0;   P3M0 = 0;   //设置为准双向口
 211   1        P4M1 = 0;   P4M0 = 0;   //设置为准双向口
 212   1        P5M1 = 0;   P5M0 = 0;   //设置为准双向口
 213   1        P6M1 = 0;   P6M0 = 0;   //设置为准双向口
 214   1        P7M1 = 0;   P7M0 = 0;   //设置为准双向口
 215   1      
 216   1        PWMA_Timer(1000);   //1ms
 217   1        PWMB_Timer(5000000);  //5s
 218   1      
 219   1        P40 = 0;    //给LED供电
 220   1        EA = 1;     //打开总中断
 221   1      
 222   1        while (1);
 223   1      }
 224          
 225          //========================================================================
 226          // 函数: void PWMA_Timer(u32 timer)
 227          // 描述: PWMA配置函数.
 228          // 参数: None
 229          // 返回: none.
 230          // 版本: V1.0, 2021-02-08
 231          //========================================================================
 232          void PWMA_Timer(u32 timer)
 233          {
 234   1        u16 psc=1;
 235   1        P_SW2 |= 0x80;
 236   1          
 237   1        timer *= (MAIN_Fosc / 1000000); //timer us
 238   1        while(timer > 65535L)
 239   1        {
 240   2          psc *= 2;
 241   2          timer >>= 1;
C51 COMPILER V9.59.0.0   PWM                                                               02/08/2021 10:02:24 PAGE 5   

 242   2        }
 243   1        timer--;
 244   1        psc--;
 245   1        
 246   1        //定时周期 = ((PWMx_PSCR + 1) * (PWMx_ARR + 1)) / SYSclk
 247   1        PWMA_ARR = timer; //设置周期时间
 248   1        PWMA_PSCR = psc;  //设置预分频器
 249   1      
 250   1        PWMA_IER = 0x01; // 使能中断
 251   1        PWMA_CR1 |= 0x01; //开始计时
 252   1      //  P_SW2 &= 0x7f;
 253   1      }
 254          
 255          //========================================================================
 256          // 函数: void PWMB_Timer(u32 timer)
 257          // 描述: PWMB配置函数.
 258          // 参数: None
 259          // 返回: none.
 260          // 版本: V1.0, 2021-02-08
 261          //========================================================================
 262          void PWMB_Timer(u32 timer)
 263          {
 264   1        u16 psc=1;
 265   1        P_SW2 |= 0x80;
 266   1        
 267   1        timer *= (MAIN_Fosc / 1000000); //timer us
 268   1        while(timer > 65535L)
 269   1        {
 270   2          psc *= 2;
 271   2          timer >>= 1;
 272   2        }
 273   1        timer--;
 274   1        psc--;
 275   1        
 276   1        //定时周期 = ((PWMx_PSCR + 1) * (PWMx_ARR + 1)) / SYSclk
 277   1        PWMB_ARR = timer; //设置周期时间
 278   1        PWMB_PSCR = psc;  //设置预分频器
 279   1      
 280   1        PWMB_IER = 0x01; // 使能中断
 281   1        PWMB_CR1 |= 0x01; //开始计时
 282   1      //  P_SW2 &= 0x7f;
 283   1      }
 284          
 285          //========================================================================
 286          // 函数: PWMA_ISR() interrupt 26
 287          // 描述: PWMA中断函数.
 288          // 参数: None
 289          // 返回: none.
 290          // 版本: V1.0, 2020-12-04
 291          //========================================================================
 292          void PWMA_ISR() interrupt 26
 293          {
 294   1        PWMA_SR1 = 0;
 295   1        P60 = ~P60;
 296   1      }
 297          
 298          //========================================================================
 299          // 函数: PWMB_ISR() interrupt 27
 300          // 描述: PWMB中断函数.
 301          // 参数: None
 302          // 返回: none.
 303          // 版本: V1.0, 2020-12-04
C51 COMPILER V9.59.0.0   PWM                                                               02/08/2021 10:02:24 PAGE 6   

 304          //========================================================================
 305          void PWMB_ISR() interrupt 27
 306          {
 307   1        PWMB_SR1 = 0;
 308   1        P64 = ~P64;
 309   1      }
 310          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    413    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      12
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
