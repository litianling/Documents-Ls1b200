C51 COMPILER V9.59.0.0   USB                                                               03/15/2021 15:41:32 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE USB
OBJECT MODULE PLACED IN USB.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE USB.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          /*---------------------------------------------------------------------*/
   2          /* --- STC MCU Limited ------------------------------------------------*/
   3          /* --- STC 1T Series MCU Demo Programme -------------------------------*/
   4          /* --- Mobile: (86)13922805190 ----------------------------------------*/
   5          /* --- Fax: 86-0513-55012956,55012947,55012969 ------------------------*/
   6          /* --- Tel: 86-0513-55012928,55012929,55012966 ------------------------*/
   7          /* --- Web: www.STCMCU.com --------------------------------------------*/
   8          /* --- Web: www.STCMCUDATA.com  ---------------------------------------*/
   9          /* --- QQ:  800003751 -------------------------------------------------*/
  10          /* 如果要在程序中使用此代码,请在程序中注明使用了STC的资料及程序        */
  11          /*---------------------------------------------------------------------*/
  12          
  13          /*************  功能说明    **************
  14          
  15          本例程基于STC8H8K64U为主控芯片的实验箱8进行编写测试.
  16          
  17          将USB配置为HID键盘设备；
  18          
  19          P0口4*4行列扫描按键模拟成小键盘按键，用户可修改按键码定义成其它功能按键；
  20          
  21          支持复合按键，比如 CTRL + ALT + DEL，最多可识别3个按键同时按下；
  22          
  23          使用P6口显示键盘指示灯状态，如P60对应NumLock指示灯，P61对应CapsLock指示灯...
  24          
  25          下载时, 选择时钟 24MHZ (用户可自行修改频率)。
  26          
  27          ******************************************/
  28          
  29          #include "reg51.h"       //包含此头文件后，里面声明的寄存器不需要再手动输入，避免重复定义
  30          #include "intrins.h"
  31          #include "USB.h"
  32          
  33          #define MAIN_Fosc       24000000L   //定义主时钟
  34          
  35          //手动输入声明"reg51.h"头文件里面没有定义的寄存器
  36          sfr IE2 = 0xAF;
  37          sfr USBCLK = 0xDC;
  38          sfr USBADR = 0xFC;
  39          sfr USBCON = 0xF4;
  40          sfr USBDAT = 0xEC;
  41          
  42          sfr TH2  = 0xD6;
  43          sfr TL2  = 0xD7;
  44          sfr INT_CLKO = 0x8F;
  45          sfr AUXR = 0x8E;
  46          sfr AUXR1 = 0xA2;
  47          sfr P_SW1 = 0xA2;
  48          sfr P_SW2 = 0xBA;
  49          sfr S2CON = 0x9A;
  50          sfr S2BUF = 0x9B;
  51          
  52          #define Timer0_Reload   (65536UL -(MAIN_Fosc / 1000))       //Timer 0 中断频率, 1000次/秒
  53          
  54          #define IRC48MCR (*(unsigned char volatile xdata *)0xfe07)
  55          #define RSTFLAG (*(unsigned char volatile xdata *)0xfe09)
C51 COMPILER V9.59.0.0   USB                                                               03/15/2021 15:41:32 PAGE 2   

  56          
  57          #define KeyIO P0    //P0口做行列按键矩阵
  58          
  59          bit  B_1ms;         //1ms标志
  60          WORD cnt50ms;
  61          WORD KeyCode;       //键码, 16个按键状态
  62          WORD OldKeyCode;    //旧键码状态
  63          WORD NewKeyCode;    //新键码状态
  64          
  65          WORD KeyHoldTime;   //按键保持时间
  66          bit  KeyChangeTemp;
  67          bit  KeyChangeFlag; //按键状态已更新(USB上传标志)
  68          
  69          char code DEVICEDESC[18] =
  70          {
  71            0x12, //bLength(18);
  72            0x01, //bDescriptorType(Device);
  73            0x00,0x02, //bcdUSB(2.00);
  74            0x00, //bDeviceClass(0);
  75            0x00, //bDeviceSubClass0);
  76            0x00, //bDeviceProtocol(0);
  77            0x40, //bMaxPacketSize0(64);
  78            0x54,0x53, //idVendor(5354);
  79            0x80,0x44, //idProduct(4480);
  80            0x00,0x01, //bcdDevice(1.00);
  81            0x01, //iManufacturer(1);
  82            0x02, //iProduct(2);
  83            0x03, //iSerialNumber(3);
  84            0x01, //bNumConfigurations(1);
  85          };
  86          
  87          char code CONFIGDESC[41] =
  88          {
  89            0x09, //bLength(9);
  90            0x02, //bDescriptorType(Configuration);
  91            0x29,0x00, //wTotalLength(41);
  92            0x01, //bNumInterfaces(1);
  93            0x01, //bConfigurationValue(1);
  94            0x00, //iConfiguration(0);
  95            0xa0, //bmAttributes(BUSPower);
  96            0xc8, //MaxPower(400mA);
  97            
  98            0x09, //bLength(9);
  99            0x04, //bDescriptorType(Interface);
 100            0x00, //bInterfaceNumber(0);
 101            0x00, //bAlternateSetting(0);
 102            0x02, //bNumEndpoints(2);
 103            0x03, //bInterfaceClass(HID);
 104            0x01, //bInterfaceSubClass(1);
 105            0x01, //bInterfaceProtocol(1);
 106            0x00, //iInterface(0);
 107            
 108            0x09, //bLength(9);
 109            0x21, //bDescriptorType(HID);
 110            0x01,0x10, //bcdHID(1.01);
 111            0x00, //bCountryCode(0);
 112            0x01, //bNumDescriptors(1);
 113            0x22, //bDescriptorType(HID Report);
 114            0x3f,0x00, //wDescriptorLength(63);
 115            0x07, //bLength(7);
 116            0x05, //bDescriptorType(Endpoint);
 117            0x81, //bEndpointAddress(EndPoint1 as IN);
C51 COMPILER V9.59.0.0   USB                                                               03/15/2021 15:41:32 PAGE 3   

 118            0x03, //bmAttributes(Interrupt);
 119            0x40,0x00, //wMaxPacketSize(64);
 120            0x0a, //bInterval(10ms);
 121            0x07, //bLength(7);
 122            0x05, //bDescriptorType(Endpoint);
 123            0x01, //bEndpointAddress(EndPoint1 as OUT);
 124            0x03, //bmAttributes(Interrupt);
 125            0x40,0x00, //wMaxPacketSize(64);
 126            0x0a, //bInterval(10ms);
 127          };
 128          
 129          char code HIDREPORTDESC[63] =
 130          {
 131            0x05, 0x01,    // USAGE_PAGE (Generic Desktop)
 132            0x09, 0x06,    // USAGE (Keyboard)
 133            0xa1, 0x01,    // COLLECTION (Application)
 134            0x05, 0x07,    //   USAGE_PAGE (Keyboard)
 135            0x19, 0xe0,    //   USAGE_MINIMUM (Keyboard LeftControl)
 136            0x29, 0xe7,    //   USAGE_MAXIMUM (Keyboard Right GUI)
 137            0x15, 0x00,    //   LOGICAL_MINIMUM (0)
 138            0x25, 0x01,    //   LOGICAL_MAXIMUM (1)
 139            0x75, 0x01,    //   REPORT_SIZE (1)
 140            0x95, 0x08,    //   REPORT_COUNT (8)
 141            0x81, 0x02,    //   INPUT (Data,Var,Abs)
 142            0x95, 0x01,    //   REPORT_COUNT (1)
 143            0x75, 0x08,    //   REPORT_SIZE (8)
 144            0x81, 0x03,    //   INPUT (Cnst,Var,Abs)
 145            0x95, 0x05,    //   REPORT_COUNT (5)
 146            0x75, 0x01,    //   REPORT_SIZE (1)
 147            0x05, 0x08,    //   USAGE_PAGE (LEDs)
 148            0x19, 0x01,    //   USAGE_MINIMUM (Num Lock)
 149            0x29, 0x05,    //   USAGE_MAXIMUM (Kana)
 150            0x91, 0x02,    //   OUTPUT (Data,Var,Abs)
 151            0x95, 0x01,    //   REPORT_COUNT (1)
 152            0x75, 0x03,    //   REPORT_SIZE (3)
 153            0x91, 0x03,    //   OUTPUT (Cnst,Var,Abs)
 154            0x95, 0x06,    //   REPORT_COUNT (6)
 155            0x75, 0x08,    //   REPORT_SIZE (8)
 156            0x15, 0x00,    //   LOGICAL_MINIMUM (0)
 157            0x25, 0xFF,    //   LOGICAL_MAXIMUM (255)
 158            0x05, 0x07,    //   USAGE_PAGE (Keyboard)
 159            0x19, 0x00,    //   USAGE_MINIMUM (Reserved (no event indicated))
 160            0x29, 0x65,    //   USAGE_MAXIMUM (Keyboard Application)
 161            0x81, 0x00,    //   INPUT (Data,Ary,Abs)
 162            0xc0           // END_COLLECTION
 163          };
 164          
 165          char code LANGIDDESC[4] =
 166          {
 167            0x04,0x03,
 168            0x09,0x04,
 169          };
 170          
 171          char code MANUFACTDESC[8] =
 172          {
 173            0x08,0x03,
 174            'S',0,
 175            'T',0,
 176            'C',0,
 177          };
 178          
 179          char code PRODUCTDESC[30] =
C51 COMPILER V9.59.0.0   USB                                                               03/15/2021 15:41:32 PAGE 4   

 180          {
 181            0x1e,0x03,
 182            'S',0,
 183            'T',0,
 184            'C',0,
 185            ' ',0,
 186            'U',0,
 187            'S',0,
 188            'B',0,
 189            ' ',0,
 190            'D',0,
 191            'e',0,
 192            'v',0,
 193            'i',0,
 194            'c',0,
 195            'e',0,
 196          };
 197          
 198          char code KeyBoardCode[16] = {
 199            0x53, //0: Num Lock键
 200            0xFF, //1: NULL - 左Ctrl键
 201            0xFF, //2: NULL - 左ALT键
 202            0x2A, //3: BackSpace
 203          
 204            0x5F, //4: 7键
 205            0x60, //5: 8键
 206            0x61, //6: 9键
 207            0x62, //7: 0键
 208          
 209            0x5C, //8: 4键
 210            0x5D, //9: 5键
 211            0x5E, //A: 6键
 212            0x63, //B: DEL键
 213          
 214            0x59, //C: 1键
 215            0x5A, //D: 2键
 216            0x5B, //E: 3键
 217            0x58, //F: 回车键
 218          };
 219          
 220          char code SetReport[8] = {0x21,0x09,0x00,0x02,0x00,0x00,0x01,0x00};
 221          
 222          void UsbInit();
 223          BYTE ReadReg(BYTE addr);
 224          void WriteReg(BYTE addr, BYTE dat);
 225          BYTE ReadFifo(BYTE fifo, BYTE *pdat);
 226          void WriteFifo(BYTE fifo, BYTE *pdat, BYTE cnt);
 227          void Timer0_Config(WORD tReload);
 228          void KeyScan(void);
 229          void SendKeyStatus(void);
 230          
 231          /******************** 主函数 **************************/
 232          void main()
 233          {
 234   1        BYTE i;
 235   1        
 236   1        P0M1 = 0x00;   P0M0 = 0x00;   //设置为准双向口
 237   1        P1M1 = 0x00;   P1M0 = 0x00;   //设置为准双向口
 238   1        P2M1 = 0x00;   P2M0 = 0x00;   //设置为准双向口
 239   1        P3M1 = 0x00;   P3M0 = 0x00;   //设置为准双向口
 240   1        P4M1 = 0x00;   P4M0 = 0x00;   //设置为准双向口
 241   1        P5M1 = 0x00;   P5M0 = 0x00;   //设置为准双向口
C51 COMPILER V9.59.0.0   USB                                                               03/15/2021 15:41:32 PAGE 5   

 242   1        P6M1 = 0x00;   P6M0 = 0x00;   //设置为准双向口
 243   1        P7M1 = 0x00;   P7M0 = 0x00;   //设置为准双向口
 244   1        
 245   1        Timer0_Config(Timer0_Reload);
 246   1        UsbInit();
 247   1        EA = 1;
 248   1      
 249   1         for(i=0;i<8;i++)
 250   1        {
 251   2         HidInput[i]=0;
 252   2        }
 253   1      
 254   1        P40 = 0;      //打开P6口LED电源
 255   1        while (1)
 256   1        {
 257   2          if(B_1ms)   //1ms到
 258   2          {
 259   3            B_1ms = 0;
 260   3          
 261   3            if(++cnt50ms >= 30)     //30ms扫描一次行列键盘
 262   3            {
 263   4              cnt50ms = 0;
 264   4              KeyScan();
 265   4            }
 266   3      
 267   3            if(KeyChangeFlag)   //按键状态产生变化
 268   3            {
 269   4              KeyChangeFlag = 0;
 270   4              SendKeyStatus();
 271   4            }
 272   3          }
 273   2        }
 274   1      }
 275          
 276          BYTE ReadReg(BYTE addr)
 277          {
 278   1        BYTE dat;
 279   1        while (USBADR & 0x80);
 280   1        USBADR = addr | 0x80;
 281   1        while (USBADR & 0x80);
 282   1        dat = USBDAT;
 283   1        return dat;
 284   1      }
 285          
 286          void WriteReg(BYTE addr, BYTE dat)
 287          {
 288   1        while (USBADR & 0x80);
 289   1        USBADR = addr & 0x7f;
 290   1        USBDAT = dat;
 291   1      }
 292          
 293          BYTE ReadFifo(BYTE fifo, BYTE *pdat)
 294          {
 295   1        BYTE cnt;
 296   1        BYTE ret;
 297   1        ret = cnt = ReadReg(COUNT0);
 298   1        while (cnt--)
 299   1        {
 300   2          *pdat++ = ReadReg(fifo);
 301   2        }
 302   1        return ret;
 303   1      }
C51 COMPILER V9.59.0.0   USB                                                               03/15/2021 15:41:32 PAGE 6   

 304          
 305          void WriteFifo(BYTE fifo, BYTE *pdat, BYTE cnt)
 306          {
 307   1        while (cnt--)
 308   1        {
 309   2          WriteReg(fifo, *pdat++);
 310   2        }
 311   1      }
 312          
 313          void UsbInit()
 314          {
 315   1        P3M0 = 0x00;
 316   1        P3M1 = 0x03;
 317   1        P_SW2 |= 0x80;
 318   1        RSTFLAG = 0x07;
 319   1        IRC48MCR = 0x80;
 320   1        while (!(IRC48MCR & 0x01));
 321   1        P_SW2 &= ~0x80;
 322   1        USBCLK = 0x00;
 323   1        USBCON = 0x90;
 324   1        WriteReg(FADDR, 0x00);
 325   1        WriteReg(POWER, 0x08);
 326   1        WriteReg(INTRIN1E, 0x3f);
 327   1        WriteReg(INTROUT1E, 0x3f);
 328   1        WriteReg(INTRUSBE, 0x00);
 329   1        WriteReg(POWER, 0x01);
 330   1        Ep0Stage.bStage = EPIDLE;
 331   1        IE2 |= 0x80;
 332   1      }
 333          
 334          void usb_isr() interrupt 25
 335          {
 336   1        BYTE intrusb;
 337   1        BYTE intrin;
 338   1        BYTE introut;
 339   1        BYTE csr;
 340   1        BYTE cnt;
 341   1        WORD len;
 342   1        intrusb = ReadReg(INTRUSB);
 343   1        intrin = ReadReg(INTRIN1);
 344   1        introut = ReadReg(INTROUT1);
 345   1        if (intrusb & RSTIF)
 346   1        {
 347   2          WriteReg(INDEX, 1);
 348   2          WriteReg(INCSR1, INCLRDT);
 349   2          WriteReg(INDEX, 1);
 350   2          WriteReg(OUTCSR1, OUTCLRDT);
 351   2          Ep0Stage.bStage = EPIDLE;
 352   2        }
 353   1        if (intrin & EP0IF)
 354   1        {
 355   2          WriteReg(INDEX, 0);
 356   2          csr = ReadReg(CSR0);
 357   2          if (csr & STSTL)
 358   2          {
 359   3            WriteReg(CSR0, csr & ~STSTL);
 360   3            Ep0Stage.bStage = EPIDLE;
 361   3          }
 362   2          if (csr & SUEND)
 363   2          {
 364   3            WriteReg(CSR0, csr | SSUEND);
 365   3          }
C51 COMPILER V9.59.0.0   USB                                                               03/15/2021 15:41:32 PAGE 7   

 366   2          switch (Ep0Stage.bStage)
 367   2          {
 368   3            case EPIDLE:
 369   3            if (csr & OPRDY)
 370   3            {
 371   4              Ep0Stage.bStage = EPSTATUS;
 372   4              ReadFifo(FIFO0, (BYTE *)&Setup);
 373   4              ((BYTE *)&Ep0Stage.wResidue)[0] = Setup.wLengthH;
 374   4              ((BYTE *)&Ep0Stage.wResidue)[1]= Setup.wLengthL;
 375   4              switch (Setup.bmRequestType & REQUEST_MASK)
 376   4              {
 377   5                case STANDARD_REQUEST:
 378   5                switch (Setup.bRequest)
 379   5                {
 380   6                  case SET_ADDRESS:
 381   6                    WriteReg(FADDR, Setup.wValueL);
 382   6                  break;
 383   6                  
 384   6                  case SET_CONFIG:
 385   6                    WriteReg(INDEX, 1);
 386   6                    WriteReg(INCSR2, INMODEIN);
 387   6                    WriteReg(INMAXP, 8);
 388   6                    WriteReg(INDEX, 1);
 389   6                    WriteReg(INCSR2, INMODEOUT);
 390   6                    WriteReg(OUTMAXP, 8);
 391   6                    WriteReg(INDEX, 0);
 392   6                  break;
 393   6                  
 394   6                  case GET_DESCRIPTOR:
 395   6                    Ep0Stage.bStage = EPDATAIN;
 396   6                    switch (Setup.wValueH)
 397   6                    {
 398   7                      case DESC_DEVICE:
 399   7                        Ep0Stage.pData = DEVICEDESC;
 400   7                        len = sizeof(DEVICEDESC);
 401   7                      break;
 402   7                      
 403   7                      case DESC_CONFIG:
 404   7                        Ep0Stage.pData = CONFIGDESC;
 405   7                        len = sizeof(CONFIGDESC);
 406   7                      break;
 407   7                      
 408   7                      case DESC_STRING:
 409   7                      switch (Setup.wValueL)
 410   7                      {
 411   8                        case 0:
 412   8                          Ep0Stage.pData = LANGIDDESC;
 413   8                          len = sizeof(LANGIDDESC);
 414   8                        break;
 415   8                        
 416   8                        case 1:
 417   8                          Ep0Stage.pData = MANUFACTDESC;
 418   8                          len = sizeof(MANUFACTDESC);
 419   8                        break;
 420   8                        
 421   8                        case 2:
 422   8                          Ep0Stage.pData = PRODUCTDESC;
 423   8                          len = sizeof(PRODUCTDESC);
 424   8                        break;
 425   8                        
 426   8                        default:
 427   8                          Ep0Stage.bStage = EPSTALL;
C51 COMPILER V9.59.0.0   USB                                                               03/15/2021 15:41:32 PAGE 8   

 428   8                        break;
 429   8                      }
 430   7                      break;
 431   7                      
 432   7                      case DESC_HIDREPORT:
 433   7                        Ep0Stage.pData = HIDREPORTDESC;
 434   7                        len = sizeof(HIDREPORTDESC);
 435   7                      break;
 436   7                      
 437   7                      default:
 438   7                        Ep0Stage.bStage = EPSTALL;
 439   7                      break;
 440   7                    }
 441   6                    if (len < Ep0Stage.wResidue)
 442   6                    {
 443   7                      Ep0Stage.wResidue = len;
 444   7                    }
 445   6                  break;
 446   6                    
 447   6                  default:
 448   6                    Ep0Stage.bStage = EPSTALL;
 449   6                  break;
 450   6                }
 451   5                break;
 452   5                
 453   5                case CLASS_REQUEST:
 454   5                  switch (Setup.bRequest)
 455   5                  {
 456   6                    case GET_REPORT:
 457   6                      Ep0Stage.pData = HidFreature;
 458   6                      Ep0Stage.bStage = EPDATAIN;
 459   6                    break;
 460   6                    
 461   6                    case SET_REPORT:
 462   6                      Ep0Stage.pData = HidFreature;
 463   6                      Ep0Stage.bStage = EPDATAOUT;
 464   6                    break;
 465   6                    
 466   6                    case SET_IDLE:
 467   6                    break;
 468   6                    
 469   6                    case GET_IDLE:
 470   6                    case GET_PROTOCOL:
 471   6                    case SET_PROTOCOL:
 472   6                    default:
 473   6                      Ep0Stage.bStage = EPSTALL;
 474   6                    break;
 475   6                  }
 476   5                break;
 477   5                  
 478   5                default:
 479   5                  Ep0Stage.bStage = EPSTALL;
 480   5                break;
 481   5              }
 482   4              
 483   4              switch (Ep0Stage.bStage)
 484   4              {
 485   5                case EPDATAIN:
 486   5                  WriteReg(CSR0, SOPRDY);
 487   5                  goto L_Ep0SendData;
 488   5                break;
 489   5                
C51 COMPILER V9.59.0.0   USB                                                               03/15/2021 15:41:32 PAGE 9   

 490   5                case EPDATAOUT:
 491   5                  WriteReg(CSR0, SOPRDY);
 492   5                break;
 493   5                
 494   5                case EPSTATUS:
 495   5                  WriteReg(CSR0, SOPRDY | DATEND);
 496   5                  Ep0Stage.bStage = EPIDLE;
 497   5                break;
 498   5                
 499   5                case EPSTALL:
 500   5                  WriteReg(CSR0, SOPRDY | SDSTL);
 501   5                  Ep0Stage.bStage = EPIDLE;
 502   5                break;
 503   5              }
 504   4            }
 505   3            break;
 506   3            
 507   3            case EPDATAIN:
 508   3              if (!(csr & IPRDY))
 509   3              {
 510   4                L_Ep0SendData:
 511   4                cnt = Ep0Stage.wResidue > 64 ? 64 : Ep0Stage.wResidue;
 512   4                WriteFifo(FIFO0, Ep0Stage.pData, cnt);
 513   4                Ep0Stage.wResidue -= cnt;
 514   4                Ep0Stage.pData += cnt;
 515   4                if (Ep0Stage.wResidue == 0)
 516   4                {
 517   5                  WriteReg(CSR0, IPRDY | DATEND);
 518   5                  Ep0Stage.bStage = EPIDLE;
 519   5                }
 520   4                else
 521   4                {
 522   5                  WriteReg(CSR0, IPRDY);
 523   5                }
 524   4              }
 525   3            break;
 526   3            
 527   3            case EPDATAOUT:
 528   3            if (csr & OPRDY)
 529   3            {
 530   4              cnt = ReadFifo(FIFO0, Ep0Stage.pData);
 531   4              Ep0Stage.wResidue -= cnt;
 532   4              Ep0Stage.pData += cnt;
 533   4              if (Ep0Stage.wResidue == 0)
 534   4              {
 535   5                WriteReg(CSR0, SOPRDY | DATEND);
 536   5                Ep0Stage.bStage = EPIDLE;
 537   5              }
 538   4              else
 539   4              {
 540   5                WriteReg(CSR0, SOPRDY);
 541   5              }
 542   4            }
 543   3            break;
 544   3          }
 545   2        }
 546   1        
 547   1        if (intrin & EP1INIF)
 548   1        {
 549   2          WriteReg(INDEX, 1);
 550   2          csr = ReadReg(INCSR1);
 551   2          if (csr & INSTSTL)
C51 COMPILER V9.59.0.0   USB                                                               03/15/2021 15:41:32 PAGE 10  

 552   2          {
 553   3            WriteReg(INCSR1, INCLRDT);
 554   3          }
 555   2          if (csr & INUNDRUN)
 556   2          {
 557   3            WriteReg(INCSR1, 0);
 558   3          }
 559   2        }
 560   1        
 561   1        if (introut & EP1OUTIF)
 562   1        {
 563   2          WriteReg(INDEX, 1);
 564   2          csr = ReadReg(OUTCSR1);
 565   2          if (csr & OUTSTSTL)
 566   2          {
 567   3            WriteReg(OUTCSR1, OUTCLRDT);
 568   3          }
 569   2          if (csr & OUTOPRDY)
 570   2          {
 571   3            ReadFifo(FIFO1, HidOutput);
 572   3            WriteReg(OUTCSR1, 0);
 573   3            
 574   3            P6 = ~HidOutput[0]; //显示指示灯状态
 575   3          }
 576   2        }
 577   1      }
 578          
 579          BYTE KeyCount(WORD dat)
 580          {
 581   1        BYTE i;
 582   1      
 583   1        i = 0;
 584   1        while(dat)
 585   1        {
 586   2          if(dat & 0x8000) i++;
 587   2          dat <<= 1;
 588   2        }
 589   1        return i;
 590   1      }
 591          
 592          //HidInput 第一字节用来表示特殊按键，第二字节保留，后面的六字节为普通按键
 593          void SendKeyStatus(void)
 594          {
 595   1        BYTE i,n;
 596   1        
 597   1        if(KeyCode) //如果有按键按下
 598   1        {
 599   2          //4*4的键盘，最多能够识别3个按键同时按下，
 600   2          //如果开关上接二极管可以同时识别更多的按键
 601   2          if(KeyCount(KeyCode) > 3) 
 602   2          {
 603   3            return;  //按键过多
 604   3          }
 605   2          else
 606   2          {
 607   3            n = 2;
 608   3            for(i=0;i<16;i++)
 609   3            {
 610   4              if(i == 1)
 611   4              {
 612   5                if(KeyCode & (1<<i)) //左Ctrl键
 613   5                {
C51 COMPILER V9.59.0.0   USB                                                               03/15/2021 15:41:32 PAGE 11  

 614   6                  HidInput[0] |= 1;
 615   6                }
 616   5                else
 617   5                {
 618   6                  HidInput[0] &= ~1;
 619   6                }
 620   5              }
 621   4              else if(i == 2)
 622   4              {
 623   5                if(KeyCode & (1<<i)) //左ALT键
 624   5                {
 625   6                  HidInput[0] |= 1<<2;
 626   6                }
 627   5                else
 628   5                {
 629   6                  HidInput[0] &= ~(1<<2);
 630   6                }
 631   5              }
 632   4              else
 633   4              {
 634   5                if(KeyCode & (1<<i))
 635   5                {
 636   6                  HidInput[n++] = KeyBoardCode[i];   //按键码表
 637   6                }
 638   5              }
 639   4            }
 640   3            
 641   3            for(;n<8;n++)
 642   3            {
 643   4              HidInput[n]=0;  //多余的清0
 644   4            }
 645   3          }
 646   2        }
 647   1        else //如果无按键按下，则返回0
 648   1        {
 649   2          for(i=0;i<8;i++)
 650   2          {
 651   3            HidInput[i]=0;
 652   3          }
 653   2        }
 654   1      
 655   1        //返回8个字节数据
 656   1        WriteReg(INDEX, 1);
 657   1        for(i=0;i<8;i++)
 658   1        {
 659   2          WriteReg(FIFO1, HidInput[i]);
 660   2        }
 661   1        WriteReg(INCSR1, INIPRDY);
 662   1      }
 663          
 664          /********************** Timer0 1ms中断函数 ************************/
 665          void timer0 (void) interrupt 1
 666          {
 667   1          B_1ms = 1;      //1ms标志
 668   1      }
 669          
 670          //========================================================================
 671          // 函数: void Timer0_Config(u16 tReload)
 672          // 描述: 定时器设置.
 673          // 参数: tReload: 定时时间..
 674          // 返回: NULL.
 675          // 版本: V1.0, 2012-10-22
C51 COMPILER V9.59.0.0   USB                                                               03/15/2021 15:41:32 PAGE 12  

 676          //========================================================================
 677          void Timer0_Config(WORD tReload)
 678          {
 679   1        AUXR = 0x80;    //Timer0 set as 1T, 16 bits timer auto-reload, 
 680   1        TH0 = (BYTE)(tReload / 256);
 681   1        TL0 = (BYTE)(tReload % 256);
 682   1        ET0 = 1;    //Timer0 interrupt enable
 683   1        TR0 = 1;    //Tiner0 run
 684   1      }
 685          
 686          /*****************************************************
 687              行列键扫描程序
 688              使用XY查找4x4键的方法，只能单键，速度快
 689          
 690             Y     P04      P05      P06      P07
 691                    |        |        |        |
 692          X         |        |        |        |
 693          P00 ---- K00 ---- K01 ---- K02 ---- K03 ----
 694                    |        |        |        |
 695          P01 ---- K04 ---- K05 ---- K06 ---- K07 ----
 696                    |        |        |        |
 697          P02 ---- K08 ---- K09 ---- K10 ---- K11 ----
 698                    |        |        |        |
 699          P03 ---- K12 ---- K13 ---- K14 ---- K15 ----
 700                    |        |        |        |
 701          ******************************************************/
 702          void IO_KeyDelay(void)
 703          {
 704   1          BYTE i;
 705   1          i = 5;
 706   1          while(--i)  ;
 707   1      }
 708          
 709          void KeyScan(void)
 710          {
 711   1        BYTE temp;
 712   1        
 713   1        KeyIO = 0x0F;
 714   1        IO_KeyDelay();
 715   1        if((KeyIO & 0x0F) == 0x0F)  //如果现在没有按键按下
 716   1        {
 717   2          NewKeyCode = 0;   //没有键按下
 718   2        }
 719   1        else  //开始键盘扫描
 720   1        {
 721   2          //扫描第一行
 722   2          KeyIO = ~0x10;
 723   2          IO_KeyDelay();
 724   2          //保存四个开关状态
 725   2          temp = KeyIO & 0x0F;
 726   2      
 727   2          //扫描第二行
 728   2          KeyIO = ~0x20;
 729   2          IO_KeyDelay();
 730   2          //保存四个开关状态
 731   2          temp |= KeyIO<<4;
 732   2      
 733   2          //保存当前按键状态
 734   2          NewKeyCode = (~temp) & 0xFF;
 735   2      
 736   2          //扫描第三行
 737   2          KeyIO = ~0x40;
C51 COMPILER V9.59.0.0   USB                                                               03/15/2021 15:41:32 PAGE 13  

 738   2          IO_KeyDelay();
 739   2          //保存四个开关状态
 740   2          temp = KeyIO & 0x0F;
 741   2      
 742   2          //扫描第四行
 743   2          KeyIO = ~0x80;
 744   2          IO_KeyDelay();
 745   2          //保存四个开关状态
 746   2          temp |= KeyIO<<4; 
 747   2           
 748   2          //保存全部16个开关的状态
 749   2          //总共有16个bit，当某个开关按下时，对应的bit为1
 750   2          NewKeyCode |= (((WORD)~temp)<<8);
 751   2        }
 752   1      
 753   1        if(NewKeyCode != OldKeyCode) //判断按键是否发生了改变
 754   1        {
 755   2          KeyHoldTime = 0;           //键盘按下时间为0
 756   2          OldKeyCode = NewKeyCode;   //保存当前按键状态
 757   2          KeyChangeTemp = 1;
 758   2        }
 759   1        else
 760   1        {
 761   2          KeyHoldTime++;         //按下时间累计
 762   2          if(KeyHoldTime >= 1)   //如果按下时间足够
 763   2          {
 764   3            KeyHoldTime = 1;
 765   3            KeyCode = OldKeyCode;  //保存按键
 766   3            if(KeyChangeTemp)
 767   3            {
 768   4              KeyChangeTemp = 0;
 769   4              KeyChangeFlag = 1;   //设置发送标志
 770   4            }
 771   3          }
 772   2        }
 773   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1565    ----
   CONSTANT SIZE    =    188    ----
   XDATA SIZE       =    192    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     24      14
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      3    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
