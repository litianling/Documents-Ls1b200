C51 COMPILER V9.59.0.0   PWM                                                               08/23/2021 15:02:14 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE PWM
OBJECT MODULE PLACED IN PWM.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE PWM.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          /*---------------------------------------------------------------------*/
   2          /* --- STC MCU Limited ------------------------------------------------*/
   3          /* --- STC 1T Series MCU Demo Programme -------------------------------*/
   4          /* --- Mobile: (86)13922805190 ----------------------------------------*/
   5          /* --- Fax: 86-0513-55012956,55012947,55012969 ------------------------*/
   6          /* --- Tel: 86-0513-55012928,55012929,55012966 ------------------------*/
   7          /* --- Web: www.STCMCU.com --------------------------------------------*/
   8          /* --- Web: www.STCMCUDATA.com  ---------------------------------------*/
   9          /* --- QQ:  800003751 -------------------------------------------------*/
  10          /* 如果要在程序中使用此代码,请在程序中注明使用了STC的资料及程序        */
  11          /*---------------------------------------------------------------------*/
  12          
  13          
  14          /*************  功能说明    **************
  15          
  16          本例程基于STC8H8K64U为主控芯片的实验箱8进行编写测试，STC8H系列芯片可通用参考.
  17          
  18          高级PWM定时器 PWM5,PWM6,PWM7,PWM8 每个通道都可独立实现PWM输出.
  19          
  20          4个通道PWM根据需要设置对应输出口，可通过示波器观察输出的信号.
  21          
  22          PWM周期和占空比可以自定义设置，最高可达65535.
  23          
  24          下载时, 选择时钟 24MHZ (用户可自行修改频率).
  25          
  26          ******************************************/
  27          
  28          #include    "reg51.h"       //包含此头文件后，里面声明的寄存器不需要再手动输入，避免重复定义
  29          #include    "intrins.h"
  30          
  31          #define     MAIN_Fosc       24000000L   //定义主时钟
  32          
  33          typedef     unsigned char   u8;
  34          typedef     unsigned int    u16;
  35          typedef     unsigned long   u32;
  36          
  37          //手动输入声明"reg51.h"头文件里面没有定义的寄存器
  38          sfr TH2  = 0xD6;
  39          sfr TL2  = 0xD7;
  40          sfr IE2  = 0xAF;
  41          sfr AUXR = 0x8E;
  42          sfr INT_CLKO = 0x8F;
  43          sfr P_SW1 = 0xA2;
  44          sfr P_SW2 = 0xBA;
  45          
  46          sfr P4   = 0xC0;
  47          sfr P5   = 0xC8;
  48          sfr P6   = 0xE8;
  49          sfr P7   = 0xF8;
  50          sfr P1M1 = 0x91;    //PxM1.n,PxM0.n     =00--->Standard,    01--->push-pull
  51          sfr P1M0 = 0x92;    //                  =10--->pure input,  11--->open drain
  52          sfr P0M1 = 0x93;
  53          sfr P0M0 = 0x94;
  54          sfr P2M1 = 0x95;
  55          sfr P2M0 = 0x96;
C51 COMPILER V9.59.0.0   PWM                                                               08/23/2021 15:02:14 PAGE 2   

  56          sfr P3M1 = 0xB1;
  57          sfr P3M0 = 0xB2;
  58          sfr P4M1 = 0xB3;
  59          sfr P4M0 = 0xB4;
  60          sfr P5M1 = 0xC9;
  61          sfr P5M0 = 0xCA;
  62          sfr P6M1 = 0xCB;
  63          sfr P6M0 = 0xCC;
  64          sfr P7M1 = 0xE1;
  65          sfr P7M0 = 0xE2;
  66          
  67          sbit P00 = P0^0;
  68          sbit P01 = P0^1;
  69          sbit P02 = P0^2;
  70          sbit P03 = P0^3;
  71          sbit P04 = P0^4;
  72          sbit P05 = P0^5;
  73          sbit P06 = P0^6;
  74          sbit P07 = P0^7;
  75          sbit P10 = P1^0;
  76          sbit P11 = P1^1;
  77          sbit P12 = P1^2;
  78          sbit P13 = P1^3;
  79          sbit P14 = P1^4;
  80          sbit P15 = P1^5;
  81          sbit P16 = P1^6;
  82          sbit P17 = P1^7;
  83          sbit P20 = P2^0;
  84          sbit P21 = P2^1;
  85          sbit P22 = P2^2;
  86          sbit P23 = P2^3;
  87          sbit P24 = P2^4;
  88          sbit P25 = P2^5;
  89          sbit P26 = P2^6;
  90          sbit P27 = P2^7;
  91          sbit P30 = P3^0;
  92          sbit P31 = P3^1;
  93          sbit P32 = P3^2;
  94          sbit P33 = P3^3;
  95          sbit P34 = P3^4;
  96          sbit P35 = P3^5;
  97          sbit P36 = P3^6;
  98          sbit P37 = P3^7;
  99          sbit P40 = P4^0;
 100          sbit P41 = P4^1;
 101          sbit P42 = P4^2;
 102          sbit P43 = P4^3;
 103          sbit P44 = P4^4;
 104          sbit P45 = P4^5;
 105          sbit P46 = P4^6;
 106          sbit P47 = P4^7;
 107          sbit P50 = P5^0;
 108          sbit P51 = P5^1;
 109          sbit P52 = P5^2;
 110          sbit P53 = P5^3;
 111          sbit P54 = P5^4;
 112          sbit P55 = P5^5;
 113          sbit P56 = P5^6;
 114          sbit P57 = P5^7;
 115          
 116          /****************************** 用户定义宏 ***********************************/
 117          
C51 COMPILER V9.59.0.0   PWM                                                               08/23/2021 15:02:14 PAGE 3   

 118          #define Timer0_Reload   (65536UL -(MAIN_Fosc / 1000))       //Timer 0 中断频率, 1000次/秒
 119          
 120          #define PWMB_ETRPS   (*(unsigned char  volatile xdata *)  0xFEB4)
 121          #define PWMB_ENO     (*(unsigned char  volatile xdata *)  0xFEB5)
 122          #define PWMB_PS      (*(unsigned char  volatile xdata *)  0xFEB6)
 123          #define PWMB_IOAUX   (*(unsigned char  volatile xdata *)  0xFEB7)
 124          
 125          #define PWMB_CR1     (*(unsigned char  volatile xdata *)  0xFEE0)
 126          #define PWMB_CR2     (*(unsigned char  volatile xdata *)  0xFEE1)
 127          #define PWMB_SMCR    (*(unsigned char  volatile xdata *)  0xFEE2)
 128          #define PWMB_ETR     (*(unsigned char  volatile xdata *)  0xFEE3)
 129          #define PWMB_IER     (*(unsigned char  volatile xdata *)  0xFEE4)
 130          #define PWMB_SR1     (*(unsigned char  volatile xdata *)  0xFEE5)
 131          #define PWMB_SR2     (*(unsigned char  volatile xdata *)  0xFEE6)
 132          #define PWMB_EGR     (*(unsigned char  volatile xdata *)  0xFEE7)
 133          #define PWMB_CCMR1   (*(unsigned char  volatile xdata *)  0xFEE8)
 134          #define PWMB_CCMR2   (*(unsigned char  volatile xdata *)  0xFEE9)
 135          #define PWMB_CCMR3   (*(unsigned char  volatile xdata *)  0xFEEA)
 136          #define PWMB_CCMR4   (*(unsigned char  volatile xdata *)  0xFEEB)
 137          #define PWMB_CCER1   (*(unsigned char  volatile xdata *)  0xFEEC)
 138          #define PWMB_CCER2   (*(unsigned char  volatile xdata *)  0xFEED)
 139          #define PWMB_CNTRH   (*(unsigned char  volatile xdata *)  0xFEEE)
 140          #define PWMB_CNTRL   (*(unsigned char  volatile xdata *)  0xFEEF)
 141          #define PWMB_PSCRH   (*(unsigned char  volatile xdata *)  0xFEF0)
 142          #define PWMB_PSCRL   (*(unsigned char  volatile xdata *)  0xFEF1)
 143          #define PWMB_ARRH    (*(unsigned char  volatile xdata *)  0xFEF2)
 144          #define PWMB_ARRL    (*(unsigned char  volatile xdata *)  0xFEF3)
 145          #define PWMB_RCR     (*(unsigned char  volatile xdata *)  0xFEF4)
 146          #define PWMB_CCR1H   (*(unsigned char  volatile xdata *)  0xFEF5)
 147          #define PWMB_CCR1L   (*(unsigned char  volatile xdata *)  0xFEF6)
 148          #define PWMB_CCR2H   (*(unsigned char  volatile xdata *)  0xFEF7)
 149          #define PWMB_CCR2L   (*(unsigned char  volatile xdata *)  0xFEF8)
 150          #define PWMB_CCR3H   (*(unsigned char  volatile xdata *)  0xFEF9)
 151          #define PWMB_CCR3L   (*(unsigned char  volatile xdata *)  0xFEFA)
 152          #define PWMB_CCR4H   (*(unsigned char  volatile xdata *)  0xFEFB)
 153          #define PWMB_CCR4L   (*(unsigned char  volatile xdata *)  0xFEFC)
 154          #define PWMB_BKR     (*(unsigned char  volatile xdata *)  0xFEFD)
 155          #define PWMB_DTR     (*(unsigned char  volatile xdata *)  0xFEFE)
 156          #define PWMB_OISR    (*(unsigned char  volatile xdata *)  0xFEFF)
 157          
 158          /*****************************************************************************/
 159          
 160          #define PWM5_1      0x00  //P2.0
 161          #define PWM5_2      0x01  //P1.7
 162          #define PWM5_3      0x02  //P0.0
 163          #define PWM5_4      0x03  //P7.4
 164          
 165          #define PWM6_1      0x00  //P2.1
 166          #define PWM6_2      0x04  //P5.4
 167          #define PWM6_3      0x08  //P0.1
 168          #define PWM6_4      0x0C  //P7.5
 169          
 170          #define PWM7_1      0x00  //P2.2
 171          #define PWM7_2      0x10  //P3.3
 172          #define PWM7_3      0x20  //P0.2
 173          #define PWM7_4      0x30  //P7.6
 174          
 175          #define PWM8_1      0x00  //P2.3
 176          #define PWM8_2      0x40  //P3.4
 177          #define PWM8_3      0x80  //P0.3
 178          #define PWM8_4      0xC0  //P7.7
 179          
C51 COMPILER V9.59.0.0   PWM                                                               08/23/2021 15:02:14 PAGE 4   

 180          #define ENO5P       0x01
 181          #define ENO6P       0x04
 182          #define ENO7P       0x10
 183          #define ENO8P       0x40
 184          
 185          /***************************** 本地变量声明 **********************************/
 186          bit B_1ms;          //1ms标志
 187          
 188          u16 PWM5_Duty;
 189          u16 PWM6_Duty;
 190          u16 PWM7_Duty;
 191          u16 PWM8_Duty;
 192          
 193          bit PWM5_Flag;
 194          bit PWM6_Flag;
 195          bit PWM7_Flag;
 196          bit PWM8_Flag;
 197          
 198          void UpdatePwm(void);
 199          
 200          /******************************** 主函数 ************************************/
 201          void main(void)
 202          {
 203   1          P0M1 = 0x00;   P0M0 = 0x00;   //设置为准双向口
 204   1          P1M1 = 0x00;   P1M0 = 0x00;   //设置为准双向口
 205   1          P2M1 = 0x00;   P2M0 = 0x00;   //设置为准双向口
 206   1          P3M1 = 0x00;   P3M0 = 0x00;   //设置为准双向口
 207   1          P4M1 = 0x00;   P4M0 = 0x00;   //设置为准双向口
 208   1          P5M1 = 0x00;   P5M0 = 0x00;   //设置为准双向口
 209   1          P6M1 = 0x00;   P6M0 = 0x00;   //设置为准双向口
 210   1          P7M1 = 0x00;   P7M0 = 0x00;   //设置为准双向口
 211   1      
 212   1          PWM5_Flag = 0;
 213   1          PWM6_Flag = 0;
 214   1          PWM7_Flag = 0;
 215   1          PWM8_Flag = 0;
 216   1        
 217   1          PWM5_Duty = 0;
 218   1          PWM6_Duty = 256;
 219   1          PWM7_Duty = 512;
 220   1          PWM8_Duty = 1024;
 221   1      
 222   1          //  Timer0初始化
 223   1          AUXR = 0x80;    //Timer0 set as 1T, 16 bits timer auto-reload, 
 224   1          TH0 = (u8)(Timer0_Reload / 256);
 225   1          TL0 = (u8)(Timer0_Reload % 256);
 226   1          ET0 = 1;    //Timer0 interrupt enable
 227   1          TR0 = 1;    //Tiner0 run
 228   1      
 229   1          P_SW2 |= 0x80;
 230   1          PWMB_CCER1 = 0x00; //写 CCMRx 前必须先清零 CCxE 关闭通道
 231   1          PWMB_CCER2 = 0x00;
 232   1          PWMB_CCMR1 = 0x60; //通道模式配置
 233   1          PWMB_CCMR2 = 0x60;
 234   1          PWMB_CCMR3 = 0x60;
 235   1          PWMB_CCMR4 = 0x60;
 236   1          PWMB_CCER1 = 0x33; //配置通道输出使能和极性
 237   1          PWMB_CCER2 = 0x33;
 238   1      
 239   1          PWMB_ARRH = 0x03; //设置周期时间
 240   1          PWMB_ARRL = 0xff;
 241   1      
C51 COMPILER V9.59.0.0   PWM                                                               08/23/2021 15:02:14 PAGE 5   

 242   1          PWMB_ENO = 0x00;
 243   1          PWMB_ENO |= ENO5P; //使能输出
 244   1          PWMB_ENO |= ENO6P; //使能输出
 245   1          PWMB_ENO |= ENO7P; //使能输出
 246   1          PWMB_ENO |= ENO8P; //使能输出
 247   1      
 248   1          PWMB_PS = 0x00;    //高级 PWM 通道输出脚选择位
 249   1          PWMB_PS |= PWM5_1; //选择 PWM5_1 通道
 250   1          PWMB_PS |= PWM6_1; //选择 PWM6_1 通道
 251   1          PWMB_PS |= PWM7_1; //选择 PWM7_1 通道
 252   1          PWMB_PS |= PWM8_1; //选择 PWM8_1 通道
 253   1      
 254   1          PWMB_BKR = 0x80;   //使能主输出
 255   1          PWMB_CR1 |= 0x01;  //开始计时
 256   1          P_SW2 &= 0x7f;
 257   1      
 258   1          EA = 1;     //打开总中断
 259   1      
 260   1          while (1)
 261   1          {
 262   2          }
 263   1      }
 264          
 265          
 266          /********************** Timer0 1ms中断函数 ************************/
 267          void timer0(void) interrupt 1
 268          {
 269   1          if(!PWM5_Flag)
 270   1          {
 271   2              PWM5_Duty++;
 272   2              if(PWM5_Duty >= 2047) PWM5_Flag = 1;
 273   2          }
 274   1          else
 275   1          {
 276   2              PWM5_Duty--;
 277   2              if(PWM5_Duty <= 0) PWM5_Flag = 0;
 278   2          }
 279   1      
 280   1          if(!PWM6_Flag)
 281   1          {
 282   2              PWM6_Duty++;
 283   2              if(PWM6_Duty >= 2047) PWM6_Flag = 1;
 284   2          }
 285   1          else
 286   1          {
 287   2              PWM6_Duty--;
 288   2              if(PWM6_Duty <= 0) PWM6_Flag = 0;
 289   2          }
 290   1      
 291   1          if(!PWM7_Flag)
 292   1          {
 293   2              PWM7_Duty++;
 294   2              if(PWM7_Duty >= 2047) PWM7_Flag = 1;
 295   2          }
 296   1          else
 297   1          {
 298   2              PWM7_Duty--;
 299   2              if(PWM7_Duty <= 0) PWM7_Flag = 0;
 300   2          }
 301   1      
 302   1          if(!PWM8_Flag)
 303   1          {
C51 COMPILER V9.59.0.0   PWM                                                               08/23/2021 15:02:14 PAGE 6   

 304   2              PWM8_Duty++;
 305   2              if(PWM8_Duty >= 2047) PWM8_Flag = 1;
 306   2          }
 307   1          else
 308   1          {
 309   2              PWM8_Duty--;
 310   2              if(PWM8_Duty <= 0) PWM8_Flag = 0;
 311   2          }
 312   1          
 313   1          UpdatePwm();
 314   1      }
 315          
 316          
 317          //========================================================================
 318          // 函数: UpdatePwm(void)
 319          // 描述: 更新PWM占空比. 
 320          // 参数: none.
 321          // 返回: none.
 322          // 版本: V1.0, 2012-11-22
 323          //========================================================================
 324          void UpdatePwm(void)
 325          {
 326   1          P_SW2 |= 0x80;
 327   1          PWMB_CCR1H = (u8)(PWM5_Duty >> 8); //设置占空比时间
 328   1          PWMB_CCR1L = (u8)(PWM5_Duty);
 329   1          PWMB_CCR2H = (u8)(PWM6_Duty >> 8); //设置占空比时间
 330   1          PWMB_CCR2L = (u8)(PWM6_Duty);
 331   1          PWMB_CCR3H = (u8)(PWM7_Duty >> 8); //设置占空比时间
 332   1          PWMB_CCR3L = (u8)(PWM7_Duty);
 333   1          PWMB_CCR4H = (u8)(PWM8_Duty >> 8); //设置占空比时间
 334   1          PWMB_CCR4L = (u8)(PWM8_Duty);
 335   1          P_SW2 &= 0x7f;
 336   1      }
 337          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    442    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      8    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      5    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
