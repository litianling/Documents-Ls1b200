C51 COMPILER V9.59.0.0   BUZZER                                                            02/08/2021 11:43:20 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE BUZZER
OBJECT MODULE PLACED IN buzzer.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE buzzer.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          /*---------------------------------------------------------------------*/
   2          /* --- STC MCU Limited ------------------------------------------------*/
   3          /* --- STC 1T Series MCU Demo Programme -------------------------------*/
   4          /* --- Mobile: (86)13922805190 ----------------------------------------*/
   5          /* --- Fax: 86-0513-55012956,55012947,55012969 ------------------------*/
   6          /* --- Tel: 86-0513-55012928,55012929,55012966 ------------------------*/
   7          /* --- Web: www.STCMCU.com --------------------------------------------*/
   8          /* --- Web: www.STCMCUDATA.com  ---------------------------------------*/
   9          /* --- QQ:  800003751 -------------------------------------------------*/
  10          /* 如果要在程序中使用此代码,请在程序中注明使用了STC的资料及程序        */
  11          /*---------------------------------------------------------------------*/
  12          
  13          
  14          /*************  功能说明    **************
  15          
  16          本例程基于STC8H8K64U为主控芯片的实验箱8进行编写测试，STC8G、STC8H系列芯片可通用参考.
  17          
  18          通过P2.7口输出高电平驱动有源蜂鸣器.
  19          
  20          行列扫描按键每个按键按下后蜂鸣器响一声.
  21          
  22          下载时, 选择时钟 24MHZ (用户可自行修改频率).
  23          
  24          ******************************************/
  25          
  26          #include    "reg51.h"       //包含此头文件后，里面声明的寄存器不需要再手动输入，避免重复定义
  27          #include    "intrins.h"
  28          
  29          #define     MAIN_Fosc       24000000L   //定义主时钟
  30          
  31          typedef     unsigned char   u8;
  32          typedef     unsigned int    u16;
  33          typedef     unsigned long   u32;
  34          
  35          //手动输入声明"reg51.h"头文件里面没有定义的寄存器
  36          sfr TH2  = 0xD6;
  37          sfr TL2  = 0xD7;
  38          sfr IE2   = 0xAF;
  39          sfr INT_CLKO = 0x8F;
  40          sfr AUXR = 0x8E;
  41          sfr P_SW1 = 0xA2;
  42          sfr P_SW2 = 0xBA;
  43          
  44          sfr P4   = 0xC0;
  45          sfr P5   = 0xC8;
  46          sfr P6   = 0xE8;
  47          sfr P7   = 0xF8;
  48          sfr P1M1 = 0x91;    //PxM1.n,PxM0.n     =00--->Standard,    01--->push-pull
  49          sfr P1M0 = 0x92;    //                  =10--->pure input,  11--->open drain
  50          sfr P0M1 = 0x93;
  51          sfr P0M0 = 0x94;
  52          sfr P2M1 = 0x95;
  53          sfr P2M0 = 0x96;
  54          sfr P3M1 = 0xB1;
  55          sfr P3M0 = 0xB2;
C51 COMPILER V9.59.0.0   BUZZER                                                            02/08/2021 11:43:20 PAGE 2   

  56          sfr P4M1 = 0xB3;
  57          sfr P4M0 = 0xB4;
  58          sfr P5M1 = 0xC9;
  59          sfr P5M0 = 0xCA;
  60          sfr P6M1 = 0xCB;
  61          sfr P6M0 = 0xCC;
  62          sfr P7M1 = 0xE1;
  63          sfr P7M0 = 0xE2;
  64          
  65          sbit P00 = P0^0;
  66          sbit P01 = P0^1;
  67          sbit P02 = P0^2;
  68          sbit P03 = P0^3;
  69          sbit P04 = P0^4;
  70          sbit P05 = P0^5;
  71          sbit P06 = P0^6;
  72          sbit P07 = P0^7;
  73          sbit P10 = P1^0;
  74          sbit P11 = P1^1;
  75          sbit P12 = P1^2;
  76          sbit P13 = P1^3;
  77          sbit P14 = P1^4;
  78          sbit P15 = P1^5;
  79          sbit P16 = P1^6;
  80          sbit P17 = P1^7;
  81          sbit P20 = P2^0;
  82          sbit P21 = P2^1;
  83          sbit P22 = P2^2;
  84          sbit P23 = P2^3;
  85          sbit P24 = P2^4;
  86          sbit P25 = P2^5;
  87          sbit P26 = P2^6;
  88          sbit P27 = P2^7;
  89          sbit P30 = P3^0;
  90          sbit P31 = P3^1;
  91          sbit P32 = P3^2;
  92          sbit P33 = P3^3;
  93          sbit P34 = P3^4;
  94          sbit P35 = P3^5;
  95          sbit P36 = P3^6;
  96          sbit P37 = P3^7;
  97          sbit P40 = P4^0;
  98          sbit P41 = P4^1;
  99          sbit P42 = P4^2;
 100          sbit P43 = P4^3;
 101          sbit P44 = P4^4;
 102          sbit P45 = P4^5;
 103          sbit P46 = P4^6;
 104          sbit P47 = P4^7;
 105          sbit P50 = P5^0;
 106          sbit P51 = P5^1;
 107          sbit P52 = P5^2;
 108          sbit P53 = P5^3;
 109          sbit P54 = P5^4;
 110          sbit P55 = P5^5;
 111          sbit P56 = P5^6;
 112          sbit P57 = P5^7;
 113          
 114          /****************************** 用户定义宏 ***********************************/
 115          
 116          #define Timer0_Reload   (65536UL -(MAIN_Fosc / 1000))       //Timer 0 中断频率, 1000次/秒
 117          
C51 COMPILER V9.59.0.0   BUZZER                                                            02/08/2021 11:43:20 PAGE 3   

 118          /*************  本地变量声明    **************/
 119          bit B_1ms;          //1ms标志
 120          
 121          u8 cnt50ms;
 122          u8  KeyCode;    //给用户使用的键码, 1~16有效
 123          u8 IO_KeyState, IO_KeyState1, IO_KeyHoldCnt;    //行列键盘变量
 124          
 125          void IO_KeyScan(void);   //50ms call
 126          void  delay_ms(u8 ms);
 127          /******************** 主函数 **************************/
 128          void main(void)
 129          {
 130   1          P0M1 = 0;   P0M0 = 0;   //设置为准双向口
 131   1          P1M1 = 0;   P1M0 = 0;   //设置为准双向口
 132   1          P3M1 = 0;   P3M0 = 0;   //设置为准双向口
 133   1          P4M1 = 0;   P4M0 = 0;   //设置为准双向口
 134   1          P5M1 = 0;   P5M0 = 0;   //设置为准双向口
 135   1          P6M1 = 0;   P6M0 = 0;   //设置为准双向口
 136   1          P7M1 = 0;   P7M0 = 0;   //设置为准双向口
 137   1          P2M1 = 0x00;   P2M0 = 0x80;   //设置P2.7为推挽输出
 138   1      
 139   1          //  Timer0初始化
 140   1          AUXR = 0x80;    //Timer0 set as 1T, 16 bits timer auto-reload, 
 141   1          TH0 = (u8)(Timer0_Reload / 256);
 142   1          TL0 = (u8)(Timer0_Reload % 256);
 143   1          ET0 = 1;    //Timer0 interrupt enable
 144   1          TR0 = 1;    //Tiner0 run
 145   1      
 146   1          P27 = 1;
 147   1          delay_ms(250);
 148   1          delay_ms(250);
 149   1          P27 = 0;
 150   1          EA = 1;     //打开总中断
 151   1      
 152   1          while (1)
 153   1          {
 154   2              if(B_1ms)   //1ms到
 155   2              {
 156   3                  B_1ms = 0;
 157   3                  if(++cnt50ms >= 50)     //50ms扫描一次行列键盘
 158   3                  {
 159   4                      cnt50ms = 0;
 160   4                      IO_KeyScan();
 161   4                  }
 162   3                  
 163   3                  if(KeyCode > 0)     //有键按下
 164   3                  {
 165   4                      P27=1;
 166   4                      delay_ms(250);
 167   4                      P27=0;
 168   4                      KeyCode = 0;
 169   4                  }
 170   3              }
 171   2          }
 172   1      }
 173          
 174          //========================================================================
 175          // 函数: void  delay_ms(u8 ms)
 176          // 描述: 延时函数。
 177          // 参数: ms,要延时的ms数, 这里只支持1~255ms. 自动适应主时钟.
 178          // 返回: none.
 179          // 版本: VER1.0
C51 COMPILER V9.59.0.0   BUZZER                                                            02/08/2021 11:43:20 PAGE 4   

 180          // 日期: 2013-4-1
 181          // 备注: 
 182          //========================================================================
 183          void  delay_ms(u8 ms)
 184          {
 185   1           u16 i;
 186   1           do{
 187   2                i = MAIN_Fosc / 13000;
 188   2                while(--i)    ;   //14T per loop
 189   2           }while(--ms);
 190   1      }
 191          
 192          
 193          /********************** Timer0 1ms中断函数 ************************/
 194          void timer0(void) interrupt 1
 195          {
 196   1          B_1ms = 1;      //1ms标志
 197   1      }
 198          
 199          
 200          /*****************************************************
 201              行列键扫描程序
 202              使用XY查找4x4键的方法，只能单键，速度快
 203          
 204             Y     P04      P05      P06      P07
 205                    |        |        |        |
 206          X         |        |        |        |
 207          P00 ---- K00 ---- K01 ---- K02 ---- K03 ----
 208                    |        |        |        |
 209          P01 ---- K04 ---- K05 ---- K06 ---- K07 ----
 210                    |        |        |        |
 211          P02 ---- K08 ---- K09 ---- K10 ---- K11 ----
 212                    |        |        |        |
 213          P03 ---- K12 ---- K13 ---- K14 ---- K15 ----
 214                    |        |        |        |
 215          ******************************************************/
 216          
 217          
 218          u8 code T_KeyTable[16] = {0,1,2,0,3,0,0,0,4,0,0,0,0,0,0,0};
 219          
 220          void IO_KeyDelay(void)
 221          {
 222   1          u8 i;
 223   1          i = 60;
 224   1          while(--i)  ;
 225   1      }
 226          
 227          void IO_KeyScan(void)    //50ms call
 228          {
 229   1          u8  j;
 230   1      
 231   1          j = IO_KeyState1;   //保存上一次状态
 232   1      
 233   1          P0 = 0xf0;  //X低，读Y
 234   1          IO_KeyDelay();
 235   1          IO_KeyState1 = P0 & 0xf0;
 236   1      
 237   1          P0 = 0x0f;  //Y低，读X
 238   1          IO_KeyDelay();
 239   1          IO_KeyState1 |= (P0 & 0x0f);
 240   1          IO_KeyState1 ^= 0xff;   //取反
 241   1          
C51 COMPILER V9.59.0.0   BUZZER                                                            02/08/2021 11:43:20 PAGE 5   

 242   1          if(j == IO_KeyState1)   //连续两次读相等
 243   1          {
 244   2              j = IO_KeyState;
 245   2              IO_KeyState = IO_KeyState1;
 246   2              if(IO_KeyState != 0)    //有键按下
 247   2              {
 248   3                  F0 = 0;
 249   3                  if(j == 0)  F0 = 1; //第一次按下
 250   3                  else if(j == IO_KeyState)
 251   3                  {
 252   4                      if(++IO_KeyHoldCnt >= 20)   //1秒后重键
 253   4                      {
 254   5                          IO_KeyHoldCnt = 18;
 255   5                          F0 = 1;
 256   5                      }
 257   4                  }
 258   3                  if(F0)
 259   3                  {
 260   4                      j = T_KeyTable[IO_KeyState >> 4];
 261   4                      if((j != 0) && (T_KeyTable[IO_KeyState& 0x0f] != 0)) 
 262   4                          KeyCode = (j - 1) * 4 + T_KeyTable[IO_KeyState & 0x0f] + 16;    //计算键码，17~32
 263   4                  }
 264   3              }
 265   2              else    IO_KeyHoldCnt = 0;
 266   2          }
 267   1          P0 = 0xff;
 268   1      }
 269          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    254    ----
   CONSTANT SIZE    =     16    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      5    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
