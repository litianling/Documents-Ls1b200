C51 COMPILER V9.59.0.0   PWM                                                               08/24/2021 11:29:35 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE PWM
OBJECT MODULE PLACED IN PWM.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE PWM.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          /*---------------------------------------------------------------------*/
   2          /* --- STC MCU Limited ------------------------------------------------*/
   3          /* --- STC 1T Series MCU Demo Programme -------------------------------*/
   4          /* --- Mobile: (86)13922805190 ----------------------------------------*/
   5          /* --- Fax: 86-0513-55012956,55012947,55012969 ------------------------*/
   6          /* --- Tel: 86-0513-55012928,55012929,55012966 ------------------------*/
   7          /* --- Web: www.STCMCU.com --------------------------------------------*/
   8          /* --- Web: www.STCMCUDATA.com  ---------------------------------------*/
   9          /* --- QQ:  800003751 -------------------------------------------------*/
  10          /* 如果要在程序中使用此代码,请在程序中注明使用了STC的资料及程序        */
  11          /*---------------------------------------------------------------------*/
  12          
  13          
  14          /*************  功能说明    **************
  15          
  16          本例程基于STC8H8K64U为主控芯片的实验箱8进行编写测试，STC8H系列芯片可通用参考.
  17          
  18          高级PWM定时器实现高速PWM脉冲输出.
  19          
  20          周期/占空比可调, 通过比较/捕获中断进行脉冲个数计数.
  21          
  22          通过P6口演示输出,每隔10ms输出一次PWM,计数10个脉冲后停止输出.
  23          
  24          定时器每1ms调整PWM周期.
  25          
  26          下载时, 选择时钟 24MHZ (用户可自行修改频率).
  27          
  28          ******************************************/
  29          
  30          #include    "reg51.h"       //包含此头文件后，里面声明的寄存器不需要再手动输入，避免重复定义
  31          #include    "intrins.h"
  32          
  33          #define     MAIN_Fosc       24000000L   //定义主时钟
  34          
  35          typedef     unsigned char   u8;
  36          typedef     unsigned int    u16;
  37          typedef     unsigned long   u32;
  38          
  39          //手动输入声明"reg51.h"头文件里面没有定义的寄存器
  40          sfr TH2  = 0xD6;
  41          sfr TL2  = 0xD7;
  42          sfr IE2   = 0xAF;
  43          sfr INT_CLKO = 0x8F;
  44          sfr AUXR = 0x8E;
  45          sfr P_SW1 = 0xA2;
  46          sfr P_SW2 = 0xBA;
  47          
  48          sfr P4   = 0xC0;
  49          sfr P5   = 0xC8;
  50          sfr P6   = 0xE8;
  51          sfr P7   = 0xF8;
  52          sfr P1M1 = 0x91;    //PxM1.n,PxM0.n     =00--->Standard,    01--->push-pull
  53          sfr P1M0 = 0x92;    //                  =10--->pure input,  11--->open drain
  54          sfr P0M1 = 0x93;
  55          sfr P0M0 = 0x94;
C51 COMPILER V9.59.0.0   PWM                                                               08/24/2021 11:29:35 PAGE 2   

  56          sfr P2M1 = 0x95;
  57          sfr P2M0 = 0x96;
  58          sfr P3M1 = 0xB1;
  59          sfr P3M0 = 0xB2;
  60          sfr P4M1 = 0xB3;
  61          sfr P4M0 = 0xB4;
  62          sfr P5M1 = 0xC9;
  63          sfr P5M0 = 0xCA;
  64          sfr P6M1 = 0xCB;
  65          sfr P6M0 = 0xCC;
  66          sfr P7M1 = 0xE1;
  67          sfr P7M0 = 0xE2;
  68          
  69          sbit P00 = P0^0;
  70          sbit P01 = P0^1;
  71          sbit P02 = P0^2;
  72          sbit P03 = P0^3;
  73          sbit P04 = P0^4;
  74          sbit P05 = P0^5;
  75          sbit P06 = P0^6;
  76          sbit P07 = P0^7;
  77          sbit P10 = P1^0;
  78          sbit P11 = P1^1;
  79          sbit P12 = P1^2;
  80          sbit P13 = P1^3;
  81          sbit P14 = P1^4;
  82          sbit P15 = P1^5;
  83          sbit P16 = P1^6;
  84          sbit P17 = P1^7;
  85          sbit P20 = P2^0;
  86          sbit P21 = P2^1;
  87          sbit P22 = P2^2;
  88          sbit P23 = P2^3;
  89          sbit P24 = P2^4;
  90          sbit P25 = P2^5;
  91          sbit P26 = P2^6;
  92          sbit P27 = P2^7;
  93          sbit P30 = P3^0;
  94          sbit P31 = P3^1;
  95          sbit P32 = P3^2;
  96          sbit P33 = P3^3;
  97          sbit P34 = P3^4;
  98          sbit P35 = P3^5;
  99          sbit P36 = P3^6;
 100          sbit P37 = P3^7;
 101          sbit P40 = P4^0;
 102          sbit P41 = P4^1;
 103          sbit P42 = P4^2;
 104          sbit P43 = P4^3;
 105          sbit P44 = P4^4;
 106          sbit P45 = P4^5;
 107          sbit P46 = P4^6;
 108          sbit P47 = P4^7;
 109          sbit P50 = P5^0;
 110          sbit P51 = P5^1;
 111          sbit P52 = P5^2;
 112          sbit P53 = P5^3;
 113          sbit P54 = P5^4;
 114          sbit P55 = P5^5;
 115          sbit P56 = P5^6;
 116          sbit P57 = P5^7;
 117          
C51 COMPILER V9.59.0.0   PWM                                                               08/24/2021 11:29:35 PAGE 3   

 118          /****************************** 用户定义宏 ***********************************/
 119          
 120          #define Timer0_Reload   (65536UL -(MAIN_Fosc / 1000))       //Timer 0 中断频率, 1000次/秒
 121          
 122          #define PWMA_ENO     (*(unsigned char  volatile xdata *)  0xFEB1)
 123          #define PWMA_PS      (*(unsigned char  volatile xdata *)  0xFEB2)
 124          #define PWMB_ENO     (*(unsigned char  volatile xdata *)  0xFEB5)
 125          #define PWMB_PS      (*(unsigned char  volatile xdata *)  0xFEB6)                               
 126          
 127          #define PWMA_CR1     (*(unsigned char  volatile xdata *)  0xFEC0)
 128          #define PWMA_CR2     (*(unsigned char  volatile xdata *)  0xFEC1)
 129          #define PWMA_SMCR    (*(unsigned char  volatile xdata *)  0xFEC2) 
 130          #define PWMA_ETR     (*(unsigned char  volatile xdata *)  0xFEC3) 
 131          #define PWMA_IER     (*(unsigned char  volatile xdata *)  0xFEC4) 
 132          #define PWMA_SR1     (*(unsigned char  volatile xdata *)  0xFEC5) 
 133          #define PWMA_SR2     (*(unsigned char  volatile xdata *)  0xFEC6) 
 134          #define PWMA_EGR     (*(unsigned char  volatile xdata *)  0xFEC7) 
 135          #define PWMA_CCMR1   (*(unsigned char  volatile xdata *)  0xFEC8) 
 136          #define PWMA_CCMR2   (*(unsigned char  volatile xdata *)  0xFEC9)
 137          #define PWMA_CCMR3   (*(unsigned char  volatile xdata *)  0xFECA)
 138          #define PWMA_CCMR4   (*(unsigned char  volatile xdata *)  0xFECB)
 139          #define PWMA_CCER1   (*(unsigned char  volatile xdata *)  0xFECC)
 140          #define PWMA_CCER2   (*(unsigned char  volatile xdata *)  0xFECD)
 141          #define PWMA_CNTR    (*(unsigned int   volatile xdata *)  0xFECE)
 142          #define PWMA_CNTRH   (*(unsigned char  volatile xdata *)  0xFECE)
 143          #define PWMA_CNTRL   (*(unsigned char  volatile xdata *)  0xFECF)
 144          #define PWMA_PSCRH   (*(unsigned char  volatile xdata *)  0xFED0)
 145          #define PWMA_PSCRL   (*(unsigned char  volatile xdata *)  0xFED1)
 146          #define PWMA_ARR     (*(unsigned int   volatile xdata *)  0xFED2)
 147          #define PWMA_ARRH    (*(unsigned char  volatile xdata *)  0xFED2)
 148          #define PWMA_ARRL    (*(unsigned char  volatile xdata *)  0xFED3)
 149          #define PWMA_RCR     (*(unsigned char  volatile xdata *)  0xFED4)
 150          #define PWMA_CCR1    (*(unsigned int   volatile xdata *)  0xFED5)
 151          #define PWMA_CCR1H   (*(unsigned char  volatile xdata *)  0xFED5)
 152          #define PWMA_CCR1L   (*(unsigned char  volatile xdata *)  0xFED6)
 153          #define PWMA_CCR2    (*(unsigned int   volatile xdata *)  0xFED7)
 154          #define PWMA_CCR2H   (*(unsigned char  volatile xdata *)  0xFED7)
 155          #define PWMA_CCR2L   (*(unsigned char  volatile xdata *)  0xFED8)
 156          #define PWMA_CCR3    (*(unsigned int   volatile xdata *)  0xFED9)
 157          #define PWMA_CCR3H   (*(unsigned char  volatile xdata *)  0xFED9)
 158          #define PWMA_CCR3L   (*(unsigned char  volatile xdata *)  0xFEDA)
 159          #define PWMA_CCR4    (*(unsigned int   volatile xdata *)  0xFEDB)
 160          #define PWMA_CCR4H   (*(unsigned char  volatile xdata *)  0xFEDB)
 161          #define PWMA_CCR4L   (*(unsigned char  volatile xdata *)  0xFEDC)
 162          #define PWMA_BKR     (*(unsigned char  volatile xdata *)  0xFEDD)
 163          #define PWMA_DTR     (*(unsigned char  volatile xdata *)  0xFEDE)
 164          #define PWMA_OISR    (*(unsigned char  volatile xdata *)  0xFEDF)
 165          
 166          /*****************************************************************************/
 167          
 168          #define PWM1_1      0x00  //P:P1.0  N:P1.1
 169          #define PWM1_2      0x01  //P:P2.0  N:P2.1
 170          #define PWM1_3      0x02  //P:P6.0  N:P6.1
 171          
 172          #define PWM2_1      0x00  //P:P1.2/P5.4  N:P1.3
 173          #define PWM2_2      0x04  //P:P2.2  N:P2.3
 174          #define PWM2_3      0x08  //P:P6.2  N:P6.3
 175          
 176          #define PWM3_1      0x00  //P:P1.4  N:P1.5
 177          #define PWM3_2      0x10  //P:P2.4  N:P2.5
 178          #define PWM3_3      0x20  //P:P6.4  N:P6.5
 179          
C51 COMPILER V9.59.0.0   PWM                                                               08/24/2021 11:29:35 PAGE 4   

 180          #define PWM4_1      0x00  //P:P1.6  N:P1.7
 181          #define PWM4_2      0x40  //P:P2.6  N:P2.7
 182          #define PWM4_3      0x80  //P:P6.6  N:P6.7
 183          #define PWM4_4      0xC0  //P:P3.4  N:P3.3
 184          
 185          #define ENO1P       0x01
 186          #define ENO1N       0x02
 187          #define ENO2P       0x04
 188          #define ENO2N       0x08
 189          #define ENO3P       0x10
 190          #define ENO3N       0x20
 191          #define ENO4P       0x40
 192          #define ENO4N       0x80
 193          
 194          /*************  本地变量声明    **************/
 195          bit B_1ms;          //1ms标志
 196          bit PWM1_Flag;
 197          
 198          u16 Period;
 199          u8 Counter;
 200          u8 msSecond;
 201          
 202          void UpdatePwm(void);
 203          void TxPulse(void);
 204          
 205          /******************** 主函数 **************************/
 206          void main(void)
 207          {
 208   1          P0M1 = 0x00;   P0M0 = 0x00;   //设置为准双向口
 209   1          P1M1 = 0x00;   P1M0 = 0x00;   //设置为准双向口
 210   1          P2M1 = 0x00;   P2M0 = 0x00;   //设置为准双向口
 211   1          P3M1 = 0x00;   P3M0 = 0x00;   //设置为准双向口
 212   1          P4M1 = 0x00;   P4M0 = 0x00;   //设置为准双向口
 213   1          P5M1 = 0x00;   P5M0 = 0x00;   //设置为准双向口
 214   1          P6M1 = 0x00;   P6M0 = 0x00;   //设置为准双向口
 215   1          P7M1 = 0x00;   P7M0 = 0x00;   //设置为准双向口
 216   1      
 217   1          PWM1_Flag = 0;
 218   1          Counter = 0;
 219   1          Period = 0x1000;
 220   1      
 221   1          //  Timer0初始化
 222   1          AUXR = 0x80;    //Timer0 set as 1T, 16 bits timer auto-reload, 
 223   1          TH0 = (u8)(Timer0_Reload / 256);
 224   1          TL0 = (u8)(Timer0_Reload % 256);
 225   1          ET0 = 1;    //Timer0 interrupt enable
 226   1          TR0 = 1;    //Tiner0 run
 227   1      
 228   1          P_SW2 |= 0x80;     //使能XFR访问
 229   1          
 230   1          PWMA_ENO = 0x00;
 231   1          PWMA_ENO |= ENO1P; //使能输出
 232   1      
 233   1          PWMA_PS = 0x00;    //高级 PWM 通道输出脚选择位
 234   1          PWMA_PS |= PWM1_3; //选择 PWM1_3 通道
 235   1      
 236   1          UpdatePwm();
 237   1          PWMA_BKR = 0x80;   //使能主输出
 238   1          PWMA_CR1 |= 0x01;  //开始计时
 239   1      
 240   1          P40 = 0;    //给LED供电
 241   1          EA = 1;     //打开总中断
C51 COMPILER V9.59.0.0   PWM                                                               08/24/2021 11:29:35 PAGE 5   

 242   1      
 243   1          while (1)
 244   1          {
 245   2              if(B_1ms)
 246   2              {
 247   3                  B_1ms = 0;
 248   3                  msSecond++;
 249   3                  if(msSecond >= 10)
 250   3                  {
 251   4                      msSecond = 0;
 252   4                      TxPulse();    //10ms启动一次PWM输出
 253   4                  }
 254   3              }
 255   2          }
 256   1      }
 257          
 258          /************* 发送脉冲函数 **************/
 259          void TxPulse(void)
 260          {
 261   1          PWMA_CCER1 = 0x00; //写 CCMRx 前必须先清零 CCxE 关闭通道
 262   1          PWMA_CCMR1 = 0x60; //设置 PWM1 模式1 输出
 263   1          PWMA_CCER1 = 0x01; //使能 CC1E 通道, 高电平有效
 264   1          PWMA_SR1 = 0;      //清标志位
 265   1          PWMA_CNTR = 0;     //清计数器
 266   1          PWMA_IER = 0x02;   //使能捕获/比较 1 中断
 267   1      }
 268          
 269          /********************** Timer0 1ms中断函数 ************************/
 270          void timer0(void) interrupt 1
 271          {
 272   1          B_1ms = 1;
 273   1          if(PWM1_Flag)
 274   1          {
 275   2              Period++;  //周期递增
 276   2              if(Period >= 0x1000) PWM1_Flag = 0;
 277   2          }
 278   1          else
 279   1          {
 280   2              Period--;  //周期递减
 281   2              if(Period <= 0x0100) PWM1_Flag = 1;
 282   2          }
 283   1          UpdatePwm();  //设置周期、占空比
 284   1      }
 285          
 286          /******************* PWM中断函数 ********************/
 287          void PWMA_ISR() interrupt 26
 288          {
 289   1          if(PWMA_SR1 & 0X02)
 290   1          {
 291   2              PWMA_SR1 &=~0X02;    //清标志位
 292   2            
 293   2              Counter++;
 294   2              if(Counter >= 10)      //计数10个脉冲后关闭PWM计数器
 295   2              {
 296   3                  Counter = 0;
 297   3                  PWMA_CCER1 = 0x00; //写 CCMRx 前必须先清零 CCxE 关闭通道
 298   3                  PWMA_CCMR1 = 0x40; //设置 PWM1 强制为无效电平
 299   3                  PWMA_CCER1 = 0x01; //使能 CC1E 通道, 高电平有效
 300   3                  PWMA_IER = 0x00;   // 关闭中断
 301   3              }
 302   2          }
 303   1      }
C51 COMPILER V9.59.0.0   PWM                                                               08/24/2021 11:29:35 PAGE 6   

 304          
 305          //========================================================================
 306          // 函数: UpdatePwm(void)
 307          // 描述: 更新PWM周期占空比.
 308          // 参数: none.
 309          // 返回: none.
 310          // 版本: V1.0, 2012-11-22
 311          //========================================================================
 312          void UpdatePwm(void)
 313          {
 314   1          PWMA_ARR = Period;
 315   1          PWMA_CCR1 = (Period >> 1); //设置占空比时间: Period/2
 316   1      }
 317          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    351    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      4    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
