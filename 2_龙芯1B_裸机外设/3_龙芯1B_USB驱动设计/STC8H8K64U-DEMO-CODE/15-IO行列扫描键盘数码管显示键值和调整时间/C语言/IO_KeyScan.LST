C51 COMPILER V9.59.0.0   IO_KEYSCAN                                                        02/08/2021 11:29:33 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE IO_KEYSCAN
OBJECT MODULE PLACED IN IO_KeyScan.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE IO_KeyScan.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          /*---------------------------------------------------------------------*/
   2          /* --- STC MCU Limited ------------------------------------------------*/
   3          /* --- STC 1T Series MCU Demo Programme -------------------------------*/
   4          /* --- Mobile: (86)13922805190 ----------------------------------------*/
   5          /* --- Fax: 86-0513-55012956,55012947,55012969 ------------------------*/
   6          /* --- Tel: 86-0513-55012928,55012929,55012966 ------------------------*/
   7          /* --- Web: www.STCMCU.com --------------------------------------------*/
   8          /* --- Web: www.STCMCUDATA.com  ---------------------------------------*/
   9          /* --- QQ:  800003751 -------------------------------------------------*/
  10          /* 如果要在程序中使用此代码,请在程序中注明使用了STC的资料及程序        */
  11          /*---------------------------------------------------------------------*/
  12          
  13          
  14          /*************  本程序功能说明  **************
  15          
  16          本例程基于STC8H8K64U为主控芯片的实验箱8进行编写测试，STC8G、STC8H系列芯片可通用参考.
  17          
  18          用STC的MCU的IO方式驱动8位数码管。
  19          
  20          显示效果为: 数码时钟.
  21          
  22          使用Timer0的16位自动重装来产生1ms节拍,程序运行于这个节拍下,用户修改MCU主时钟频率时,自动定时于1ms.
  23          
  24          左边4位LED显示时间(小时,分钟), 右边最后两位显示按键值.
  25          
  26          行列扫描按键键码为17~32.
  27          
  28          按键只支持单键按下, 不支持多键同时按下, 那样将会有不可预知的结果.
  29          
  30          键按下超过1秒后,将以10键/秒的速度提供重键输出. 用户只需要检测KeyCode是否非0来判断键是否按下.
  31          
  32          调整时间键:
  33          键码17: 小时+.
  34          键码18: 小时-.
  35          键码19: 分钟+.
  36          键码20: 分钟-.
  37          
  38          下载时, 选择时钟 24MHZ (用户可自行修改频率).
  39          
  40          ******************************************/
  41          
  42          #include    "reg51.h"       //包含此头文件后，里面声明的寄存器不需要再手动输入，避免重复定义
  43          #include    "intrins.h"
  44          
  45          #define     MAIN_Fosc       24000000L   //定义主时钟
  46          
  47          typedef     unsigned char   u8;
  48          typedef     unsigned int    u16;
  49          typedef     unsigned long   u32;
  50          
  51          //手动输入声明"reg51.h"头文件里面没有定义的寄存器
  52          sfr TH2  = 0xD6;
  53          sfr TL2  = 0xD7;
  54          sfr IE2   = 0xAF;
  55          sfr INT_CLKO = 0x8F;
C51 COMPILER V9.59.0.0   IO_KEYSCAN                                                        02/08/2021 11:29:33 PAGE 2   

  56          sfr AUXR = 0x8E;
  57          sfr AUXR1 = 0xA2;
  58          sfr P_SW1 = 0xA2;
  59          sfr P_SW2 = 0xBA;
  60          sfr S2CON = 0x9A;
  61          sfr S2BUF = 0x9B;
  62          
  63          sfr P4   = 0xC0;
  64          sfr P5   = 0xC8;
  65          sfr P6   = 0xE8;
  66          sfr P7   = 0xF8;
  67          sfr P1M1 = 0x91;    //PxM1.n,PxM0.n     =00--->Standard,    01--->push-pull
  68          sfr P1M0 = 0x92;    //                  =10--->pure input,  11--->open drain
  69          sfr P0M1 = 0x93;
  70          sfr P0M0 = 0x94;
  71          sfr P2M1 = 0x95;
  72          sfr P2M0 = 0x96;
  73          sfr P3M1 = 0xB1;
  74          sfr P3M0 = 0xB2;
  75          sfr P4M1 = 0xB3;
  76          sfr P4M0 = 0xB4;
  77          sfr P5M1 = 0xC9;
  78          sfr P5M0 = 0xCA;
  79          sfr P6M1 = 0xCB;
  80          sfr P6M0 = 0xCC;
  81          sfr P7M1 = 0xE1;
  82          sfr P7M0 = 0xE2;
  83          
  84          sbit P00 = P0^0;
  85          sbit P01 = P0^1;
  86          sbit P02 = P0^2;
  87          sbit P03 = P0^3;
  88          sbit P04 = P0^4;
  89          sbit P05 = P0^5;
  90          sbit P06 = P0^6;
  91          sbit P07 = P0^7;
  92          sbit P10 = P1^0;
  93          sbit P11 = P1^1;
  94          sbit P12 = P1^2;
  95          sbit P13 = P1^3;
  96          sbit P14 = P1^4;
  97          sbit P15 = P1^5;
  98          sbit P16 = P1^6;
  99          sbit P17 = P1^7;
 100          sbit P20 = P2^0;
 101          sbit P21 = P2^1;
 102          sbit P22 = P2^2;
 103          sbit P23 = P2^3;
 104          sbit P24 = P2^4;
 105          sbit P25 = P2^5;
 106          sbit P26 = P2^6;
 107          sbit P27 = P2^7;
 108          sbit P30 = P3^0;
 109          sbit P31 = P3^1;
 110          sbit P32 = P3^2;
 111          sbit P33 = P3^3;
 112          sbit P34 = P3^4;
 113          sbit P35 = P3^5;
 114          sbit P36 = P3^6;
 115          sbit P37 = P3^7;
 116          sbit P40 = P4^0;
 117          sbit P41 = P4^1;
C51 COMPILER V9.59.0.0   IO_KEYSCAN                                                        02/08/2021 11:29:33 PAGE 3   

 118          sbit P42 = P4^2;
 119          sbit P43 = P4^3;
 120          sbit P44 = P4^4;
 121          sbit P45 = P4^5;
 122          sbit P46 = P4^6;
 123          sbit P47 = P4^7;
 124          sbit P50 = P5^0;
 125          sbit P51 = P5^1;
 126          sbit P52 = P5^2;
 127          sbit P53 = P5^3;
 128          sbit P54 = P5^4;
 129          sbit P55 = P5^5;
 130          sbit P56 = P5^6;
 131          sbit P57 = P5^7;
 132          
 133          
 134          #define Timer0_Reload   (65536UL -(MAIN_Fosc / 1000))       //Timer 0 中断频率, 1000次/秒
 135          
 136          #define DIS_DOT     0x20
 137          #define DIS_BLACK   0x10
 138          #define DIS_        0x11
 139          
 140          
 141          u8 code t_display[]={                       //标准字库
 142          //   0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F
 143              0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F,0x77,0x7C,0x39,0x5E,0x79,0x71,
 144          //black  -     H    J    K    L    N    o   P    U     t    G    Q    r   M    y
 145              0x00,0x40,0x76,0x1E,0x70,0x38,0x37,0x5C,0x73,0x3E,0x78,0x3d,0x67,0x50,0x37,0x6e,
 146              0xBF,0x86,0xDB,0xCF,0xE6,0xED,0xFD,0x87,0xFF,0xEF,0x46};    //0. 1. 2. 3. 4. 5. 6. 7. 8. 9. -1
 147          
 148          u8 code T_COM[]={0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80};      //位码
 149          
 150          
 151          u8  LED8[8];        //显示缓冲
 152          u8  display_index;  //显示位索引
 153          bit B_1ms;          //1ms标志
 154          
 155          u8  KeyCode;    //给用户使用的键码, 1~16有效
 156          u8  cnt10ms;
 157          
 158          u8 IO_KeyState, IO_KeyState1, IO_KeyHoldCnt;    //行列键盘变量
 159          u8  cnt50ms;
 160          
 161          u8  hour,minute,second; //RTC变量
 162          u16 msecond;
 163          
 164          void IO_KeyScan(void);   //50ms call
 165          
 166          
 167          /********************** 显示时钟函数 ************************/
 168          void DisplayRTC(void)
 169          {
 170   1          if(hour >= 10)  LED8[0] = hour / 10;
 171   1          else            LED8[0] = DIS_BLACK;
 172   1          LED8[1] = hour % 10;
 173   1          LED8[2] = minute / 10;
 174   1          LED8[3] = minute % 10;
 175   1          if(msecond >= 500)      LED8[1] |= DIS_DOT; //小时后的小数点做秒闪
 176   1      }
 177          
 178          /********************** RTC演示函数 ************************/
 179          void RTC(void)
C51 COMPILER V9.59.0.0   IO_KEYSCAN                                                        02/08/2021 11:29:33 PAGE 4   

 180          {
 181   1          if(++second >= 60)
 182   1          {
 183   2              second = 0;
 184   2              if(++minute >= 60)
 185   2              {
 186   3                  minute = 0;
 187   3                  if(++hour >= 24)    hour = 0;
 188   3              }
 189   2          }
 190   1      }
 191          
 192          /**********************************************/
 193          void main(void)
 194          {
 195   1          u8  i;
 196   1          
 197   1          P0M1 = 0;   P0M0 = 0;   //设置为准双向口
 198   1          P1M1 = 0;   P1M0 = 0;   //设置为准双向口
 199   1          P2M1 = 0;   P2M0 = 0;   //设置为准双向口
 200   1          P3M1 = 0;   P3M0 = 0;   //设置为准双向口
 201   1          P4M1 = 0;   P4M0 = 0;   //设置为准双向口
 202   1          P5M1 = 0;   P5M0 = 0;   //设置为准双向口
 203   1          P6M1 = 0;   P6M0 = 0;   //设置为准双向口
 204   1          P7M1 = 0;   P7M0 = 0;   //设置为准双向口
 205   1      
 206   1          display_index = 0;
 207   1          
 208   1          AUXR = 0x80;    //Timer0 set as 1T, 16 bits timer auto-reload, 
 209   1          TH0 = (u8)(Timer0_Reload / 256);
 210   1          TL0 = (u8)(Timer0_Reload % 256);
 211   1          ET0 = 1;    //Timer0 interrupt enable
 212   1          TR0 = 1;    //Tiner0 run
 213   1          EA = 1;     //打开总中断
 214   1          
 215   1          for(i=0; i<8; i++)  LED8[i] = 0x10; //上电消隐
 216   1      
 217   1          hour   = 12;    //初始化时间值
 218   1          minute = 0;
 219   1          second = 0;
 220   1          DisplayRTC();
 221   1      
 222   1          KeyCode = 0;    //给用户使用的键码, 1~16有效
 223   1          cnt10ms = 0;
 224   1      
 225   1          IO_KeyState = 0;
 226   1          IO_KeyState1 = 0;
 227   1          IO_KeyHoldCnt = 0;
 228   1          cnt50ms = 0;
 229   1          
 230   1          while(1)
 231   1          {
 232   2              if(B_1ms)   //1ms到
 233   2              {
 234   3                  B_1ms = 0;
 235   3                  if(++msecond >= 1000)   //1秒到
 236   3                  {
 237   4                      msecond = 0;
 238   4                      RTC();
 239   4                      DisplayRTC();
 240   4                  }
 241   3                  if(msecond == 500)  DisplayRTC();   //小时后的小数点做秒闪
C51 COMPILER V9.59.0.0   IO_KEYSCAN                                                        02/08/2021 11:29:33 PAGE 5   

 242   3      
 243   3      
 244   3                  if(++cnt50ms >= 50)     //50ms扫描一次行列键盘
 245   3                  {
 246   4                      cnt50ms = 0;
 247   4                      IO_KeyScan();
 248   4                  }
 249   3                  
 250   3                  if(KeyCode > 0)     //有键按下
 251   3                  {
 252   4                      LED8[6] = KeyCode / 10; //显示键码
 253   4                      LED8[7] = KeyCode % 10; //显示键码
 254   4      
 255   4                      if(KeyCode == 17)   //hour +1
 256   4                      {
 257   5                          if(++hour >= 24)    hour = 0;
 258   5                          DisplayRTC();
 259   5                      }
 260   4                      if(KeyCode == 18)   //hour -1
 261   4                      {
 262   5                          if(--hour >= 24)    hour = 23;
 263   5                          DisplayRTC();
 264   5                      }
 265   4                      if(KeyCode == 19)   //minute +1
 266   4                      {
 267   5                          second = 0;
 268   5                          if(++minute >= 60)  minute = 0;
 269   5                          DisplayRTC();
 270   5                      }
 271   4                      if(KeyCode == 20)   //minute -1
 272   4                      {
 273   5                          second = 0;
 274   5                          if(--minute >= 60)  minute = 59;
 275   5                          DisplayRTC();
 276   5                      }
 277   4                      KeyCode = 0;
 278   4                  }
 279   3              }
 280   2          }
 281   1      } 
 282          /**********************************************/
 283          
 284          
 285          /*****************************************************
 286              行列键扫描程序
 287              使用XY查找4x4键的方法，只能单键，速度快
 288          
 289             Y     P04      P05      P06      P07
 290                    |        |        |        |
 291          X         |        |        |        |
 292          P00 ---- K00 ---- K01 ---- K02 ---- K03 ----
 293                    |        |        |        |
 294          P01 ---- K04 ---- K05 ---- K06 ---- K07 ----
 295                    |        |        |        |
 296          P02 ---- K08 ---- K09 ---- K10 ---- K11 ----
 297                    |        |        |        |
 298          P03 ---- K12 ---- K13 ---- K14 ---- K15 ----
 299                    |        |        |        |
 300          ******************************************************/
 301          
 302          
 303          u8 code T_KeyTable[16] = {0,1,2,0,3,0,0,0,4,0,0,0,0,0,0,0};
C51 COMPILER V9.59.0.0   IO_KEYSCAN                                                        02/08/2021 11:29:33 PAGE 6   

 304          
 305          void IO_KeyDelay(void)
 306          {
 307   1          u8 i;
 308   1          i = 60;
 309   1          while(--i)  ;
 310   1      }
 311          
 312          void IO_KeyScan(void)    //50ms call
 313          {
 314   1          u8  j;
 315   1      
 316   1          j = IO_KeyState1;   //保存上一次状态
 317   1      
 318   1          P0 = 0xf0;  //X低，读Y
 319   1          IO_KeyDelay();
 320   1          IO_KeyState1 = P0 & 0xf0;
 321   1      
 322   1          P0 = 0x0f;  //Y低，读X
 323   1          IO_KeyDelay();
 324   1          IO_KeyState1 |= (P0 & 0x0f);
 325   1          IO_KeyState1 ^= 0xff;   //取反
 326   1          
 327   1          if(j == IO_KeyState1)   //连续两次读相等
 328   1          {
 329   2              j = IO_KeyState;
 330   2              IO_KeyState = IO_KeyState1;
 331   2              if(IO_KeyState != 0)    //有键按下
 332   2              {
 333   3                  F0 = 0;
 334   3                  if(j == 0)  F0 = 1; //第一次按下
 335   3                  else if(j == IO_KeyState)
 336   3                  {
 337   4                      if(++IO_KeyHoldCnt >= 20)   //1秒后重键
 338   4                      {
 339   5                          IO_KeyHoldCnt = 18;
 340   5                          F0 = 1;
 341   5                      }
 342   4                  }
 343   3                  if(F0)
 344   3                  {
 345   4                      j = T_KeyTable[IO_KeyState >> 4];
 346   4                      if((j != 0) && (T_KeyTable[IO_KeyState& 0x0f] != 0)) 
 347   4                          KeyCode = (j - 1) * 4 + T_KeyTable[IO_KeyState & 0x0f] + 16;    //计算键码，17~32
 348   4                  }
 349   3              }
 350   2              else    IO_KeyHoldCnt = 0;
 351   2          }
 352   1          P0 = 0xff;
 353   1      }
 354          
 355          
 356          /********************** 显示扫描函数 ************************/
 357          void DisplayScan(void)
 358          {   
 359   1          P7 = ~T_COM[7-display_index];
 360   1          P6 = ~t_display[LED8[display_index]];
 361   1          if(++display_index >= 8)    display_index = 0;  //8位结束回0
 362   1      }
 363          
 364          
 365          /********************** Timer0 1ms中断函数 ************************/
C51 COMPILER V9.59.0.0   IO_KEYSCAN                                                        02/08/2021 11:29:33 PAGE 7   

 366          void timer0 (void) interrupt 1
 367          {
 368   1          DisplayScan();  //1ms扫描显示一位
 369   1          B_1ms = 1;      //1ms标志
 370   1      }
 371          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    626    ----
   CONSTANT SIZE    =     67    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     20    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
