C51 COMPILER V9.59.0.0   MCLK                                                              02/08/2021 11:42:25 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MCLK
OBJECT MODULE PLACED IN MCLK.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE MCLK.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          /*---------------------------------------------------------------------*/
   2          /* --- STC MCU Limited ------------------------------------------------*/
   3          /* --- STC 1T Series MCU Demo Programme -------------------------------*/
   4          /* --- Mobile: (86)13922805190 ----------------------------------------*/
   5          /* --- Fax: 86-0513-55012956,55012947,55012969 ------------------------*/
   6          /* --- Tel: 86-0513-55012928,55012929,55012966 ------------------------*/
   7          /* --- Web: www.STCMCU.com --------------------------------------------*/
   8          /* --- Web: www.STCMCUDATA.com  ---------------------------------------*/
   9          /* --- QQ:  800003751 -------------------------------------------------*/
  10          /* 如果要在程序中使用此代码,请在程序中注明使用了STC的资料及程序        */
  11          /*---------------------------------------------------------------------*/
  12          
  13          /*************  功能说明    **************
  14          
  15          本例程基于STC8H8K64U为主控芯片的实验箱8进行编写测试，STC8G、STC8H系列芯片可通用参考.
  16          
  17          程序使用P6口做跑马灯，演示系统时钟源切换效果。
  18          
  19          跑马灯每跑一轮切换一次时钟源，分别是默认IRC主频，主频48分频，内部32K IRC。
  20          
  21          下载时, 选择时钟 24MHZ (用户可自行修改频率).
  22          
  23          ******************************************/
  24          
  25          #include    "reg51.h"       //包含此头文件后，里面声明的寄存器不需要再手动输入，避免重复定义
  26          
  27          #define     MAIN_Fosc       24000000L   //定义主时钟
  28          
  29          typedef     unsigned char   u8;
  30          typedef     unsigned int    u16;
  31          typedef     unsigned long   u32;
  32          
  33          //手动输入声明"reg51.h"头文件里面没有定义的寄存器
  34          sfr P4   = 0xC0;
  35          sfr P5   = 0xC8;
  36          sfr P6   = 0xE8;
  37          sfr P7   = 0xF8;
  38          sfr P1M1 = 0x91;    //PxM1.n,PxM0.n     =00--->Standard,    01--->push-pull
  39          sfr P1M0 = 0x92;    //                  =10--->pure input,  11--->open drain
  40          sfr P0M1 = 0x93;
  41          sfr P0M0 = 0x94;
  42          sfr P2M1 = 0x95;
  43          sfr P2M0 = 0x96;
  44          sfr P3M1 = 0xB1;
  45          sfr P3M0 = 0xB2;
  46          sfr P4M1 = 0xB3;
  47          sfr P4M0 = 0xB4;
  48          sfr P5M1 = 0xC9;
  49          sfr P5M0 = 0xCA;
  50          sfr P6M1 = 0xCB;
  51          sfr P6M0 = 0xCC;
  52          sfr P7M1 = 0xE1;
  53          sfr P7M0 = 0xE2;
  54          
  55          sbit P00 = P0^0;
C51 COMPILER V9.59.0.0   MCLK                                                              02/08/2021 11:42:25 PAGE 2   

  56          sbit P01 = P0^1;
  57          sbit P02 = P0^2;
  58          sbit P03 = P0^3;
  59          sbit P04 = P0^4;
  60          sbit P05 = P0^5;
  61          sbit P06 = P0^6;
  62          sbit P07 = P0^7;
  63          sbit P10 = P1^0;
  64          sbit P11 = P1^1;
  65          sbit P12 = P1^2;
  66          sbit P13 = P1^3;
  67          sbit P14 = P1^4;
  68          sbit P15 = P1^5;
  69          sbit P16 = P1^6;
  70          sbit P17 = P1^7;
  71          sbit P20 = P2^0;
  72          sbit P21 = P2^1;
  73          sbit P22 = P2^2;
  74          sbit P23 = P2^3;
  75          sbit P24 = P2^4;
  76          sbit P25 = P2^5;
  77          sbit P26 = P2^6;
  78          sbit P27 = P2^7;
  79          sbit P30 = P3^0;
  80          sbit P31 = P3^1;
  81          sbit P32 = P3^2;
  82          sbit P33 = P3^3;
  83          sbit P34 = P3^4;
  84          sbit P35 = P3^5;
  85          sbit P36 = P3^6;
  86          sbit P37 = P3^7;
  87          sbit P40 = P4^0;
  88          sbit P41 = P4^1;
  89          sbit P42 = P4^2;
  90          sbit P43 = P4^3;
  91          sbit P44 = P4^4;
  92          sbit P45 = P4^5;
  93          sbit P46 = P4^6;
  94          sbit P47 = P4^7;
  95          sbit P50 = P5^0;
  96          sbit P51 = P5^1;
  97          sbit P52 = P5^2;
  98          sbit P53 = P5^3;
  99          sbit P54 = P5^4;
 100          sbit P55 = P5^5;
 101          sbit P56 = P5^6;
 102          sbit P57 = P5^7;
 103          
 104          sfr P_SW2 = 0xba;
 105          
 106          #define CKSEL (*(unsigned char volatile xdata *)0xfe00)
 107          #define CLKDIV (*(unsigned char volatile xdata *)0xfe01)
 108          #define HIRCCR (*(unsigned char volatile xdata *)0xfe02)
 109          #define XOSCCR (*(unsigned char volatile xdata *)0xfe03)
 110          #define IRC32KCR (*(unsigned char volatile xdata *)0xfe04)
 111          
 112          u8 ledIndex;
 113          u8 code ledNum[]={0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80};
 114          u8 mode = 1;
 115          
 116          void  delay_ms(u8 ms);
 117          void  MCLK_Sel(void);
C51 COMPILER V9.59.0.0   MCLK                                                              02/08/2021 11:42:25 PAGE 3   

 118          
 119          /******************** 主函数 **************************/
 120          void main(void)
 121          {
 122   1          P0M1 = 0;   P0M0 = 0;   //设置为准双向口
 123   1          P1M1 = 0;   P1M0 = 0;   //设置为准双向口
 124   1          P2M1 = 0;   P2M0 = 0;   //设置为准双向口
 125   1          P3M1 = 0;   P3M0 = 0;   //设置为准双向口
 126   1          P4M1 = 0;   P4M0 = 0;   //设置为准双向口
 127   1          P5M1 = 0;   P5M0 = 0;   //设置为准双向口
 128   1          P6M1 = 0;   P6M0 = 0;   //设置为准双向口
 129   1          P7M1 = 0;   P7M0 = 0;   //设置为准双向口
 130   1      
 131   1          P40 = 0;    //LED Power On
 132   1          ledIndex = 0;
 133   1          while(1)
 134   1          {
 135   2              P6 = ~ledNum[ledIndex]; //输出低驱动
 136   2              ledIndex++;
 137   2              if(ledIndex > 7)
 138   2              {
 139   3                  ledIndex = 0;
 140   3                  MCLK_Sel();
 141   3              }
 142   2              delay_ms(10);
 143   2          }
 144   1      }
 145          
 146          //========================================================================
 147          // 函数: void  MCLK_Sel(void)
 148          // 描述: 系统时钟设置函数。
 149          // 参数: none.
 150          // 返回: none.
 151          // 版本: VER1.0
 152          // 日期: 2020-7-29
 153          // 备注: 
 154          //========================================================================
 155          void  MCLK_Sel(void)
 156          {
 157   1          if(mode == 0)
 158   1          {
 159   2              mode++;
 160   2              P_SW2 = 0x80;
 161   2              HIRCCR = 0x80; //启动内部 IRC
 162   2              while (!(HIRCCR & 1)); //等待时钟稳定
 163   2              CLKDIV = 0;
 164   2              CKSEL = 0x00; //选择内部 IRC ( 默认 )
 165   2              P_SW2 = 0x00;
 166   2          }
 167   1          else if(mode == 1)
 168   1          {
 169   2              mode++;
 170   2              P_SW2 = 0x80;
 171   2              HIRCCR = 0x80; //启动内部 IRC
 172   2              while (!(HIRCCR & 1)); //等待时钟稳定
 173   2              CLKDIV = 48;   //MCLK/48
 174   2              CKSEL = 0x00; //选择内部 IRC ( 默认 )
 175   2              P_SW2 = 0x00;
 176   2          }
 177   1      //    else if(mode == 2)
 178   1      //    {
 179   1      //        mode++;
C51 COMPILER V9.59.0.0   MCLK                                                              02/08/2021 11:42:25 PAGE 4   

 180   1      //        P_SW2 = 0x80;
 181   1      //        XOSCCR = 0xc0; //启动外部晶振
 182   1      //        while (!(XOSCCR & 1)); //等待时钟稳定
 183   1      //        CLKDIV = 0x00; //时钟不分频
 184   1      //        CKSEL = 0x01; //选择外部晶振
 185   1      //        P_SW2 = 0x00;
 186   1      //    }
 187   1          else
 188   1          {
 189   2              mode = 0;
 190   2              P_SW2 = 0x80;
 191   2              IRC32KCR = 0x80; //启动内部 32K IRC
 192   2              while (!(IRC32KCR & 1)); //等待时钟稳定
 193   2              CLKDIV = 0x00; //时钟不分频
 194   2              CKSEL = 0x03; //选择内部 32K
 195   2              P_SW2 = 0x00;
 196   2          }
 197   1      }
 198          
 199          //========================================================================
 200          // 函数: void  delay_ms(u8 ms)
 201          // 描述: 延时函数。
 202          // 参数: ms,要延时的ms数, 这里只支持1~255ms. 自动适应主时钟.
 203          // 返回: none.
 204          // 版本: VER1.0
 205          // 日期: 2013-4-1
 206          // 备注: 
 207          //========================================================================
 208          void  delay_ms(u8 ms)
 209          {
 210   1          u16 i;
 211   1          do{
 212   2              i = MAIN_Fosc / 13000;
 213   2              while(--i)    ;   //14T per loop
 214   2          }while(--ms);
 215   1      }
 216          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    195    ----
   CONSTANT SIZE    =      8    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      2    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
