C51 COMPILER V9.59.0.0   I2C_SLAVE_INT                                                     03/15/2021 15:34:14 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE I2C_SLAVE_INT
OBJECT MODULE PLACED IN I2C_Slave_INT.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE I2C_Slave_INT.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          /*---------------------------------------------------------------------*/
   2          /* --- STC MCU Limited ------------------------------------------------*/
   3          /* --- STC 1T Series MCU Demo Programme -------------------------------*/
   4          /* --- Mobile: (86)13922805190 ----------------------------------------*/
   5          /* --- Fax: 86-0513-55012956,55012947,55012969 ------------------------*/
   6          /* --- Tel: 86-0513-55012928,55012929,55012966 ------------------------*/
   7          /* --- Web: www.STCMCU.com --------------------------------------------*/
   8          /* --- Web: www.STCMCUDATA.com  ---------------------------------------*/
   9          /* --- QQ:  800003751 -------------------------------------------------*/
  10          /* 如果要在程序中使用此代码,请在程序中注明使用了STC的资料及程序        */
  11          /*---------------------------------------------------------------------*/
  12          
  13          
  14          /*************  本程序功能说明  **************
  15          
  16          本例程基于STC8H8K64U为主控芯片的实验箱8进行编写测试，STC8G、STC8H系列芯片可通用参考.
  17          
  18          内部集成I2C串行总线控制器做从机模式，SCL->P3.2, SDA->P3.3;
  19          IO口模拟I2C做主机模式，SCL->P0.0, SDA->P0.1;
  20          通过外部飞线连接 P0.0->P3.2, P0.1->P3.3，实现I2C自发自收功能。
  21          
  22          用STC的MCU的IO方式驱动8位数码管。
  23          使用Timer0的16位自动重装来产生1ms节拍,程序运行于这个节拍下,用户修改MCU主时钟频率时,自动定时于1ms.
  24          计数器每秒钟加1, 计数范围为0~9999.
  25          
  26          显示效果为: 上电后主机每秒钟发送一次计数数据，并在左边4个数码管上显示发送内容；从机接收到数据后在右边4个数
             -码管显示。
  27          
  28          下载时, 选择时钟 24MHZ (用户可自行修改频率).
  29          
  30          ******************************************/
  31          
  32          
  33          #include "reg51.h"       //包含此头文件后，里面声明的寄存器不需要再手动输入，避免重复定义
  34          #include "intrins.h"
  35          
  36          #define MAIN_Fosc       24000000L   //定义主时钟
  37          
  38          typedef     unsigned char   u8;
  39          typedef     unsigned int    u16;
  40          typedef     unsigned long   u32;
  41          
  42          //手动输入声明"reg51.h"头文件里面没有定义的寄存器
  43          sfr P_SW2 = 0xba;
  44          sfr AUXR = 0x8E;
  45          
  46          sfr P1M1 = 0x91;    //PxM1.n,PxM0.n     =00--->Standard,    01--->push-pull
  47          sfr P1M0 = 0x92;    //                  =10--->pure input,  11--->open drain
  48          sfr P0M1 = 0x93;
  49          sfr P0M0 = 0x94;
  50          sfr P2M1 = 0x95;
  51          sfr P2M0 = 0x96;
  52          sfr P3M1 = 0xB1;
  53          sfr P3M0 = 0xB2;
  54          sfr P4M1 = 0xB3;
C51 COMPILER V9.59.0.0   I2C_SLAVE_INT                                                     03/15/2021 15:34:14 PAGE 2   

  55          sfr P4M0 = 0xB4;
  56          sfr P5M1 = 0xC9;
  57          sfr P5M0 = 0xCA;
  58          sfr P6M1 = 0xCB;
  59          sfr P6M0 = 0xCC;
  60          sfr P7M1 = 0xE1;
  61          sfr P7M0 = 0xE2;
  62          sfr P6   = 0xE8;
  63          sfr P7   = 0xF8;
  64          
  65          #define I2CCFG          (*(unsigned char volatile xdata *)0xfe80)
  66          #define I2CMSCR         (*(unsigned char volatile xdata *)0xfe81)
  67          #define I2CMSST         (*(unsigned char volatile xdata *)0xfe82)
  68          #define I2CSLCR         (*(unsigned char volatile xdata *)0xfe83)
  69          #define I2CSLST         (*(unsigned char volatile xdata *)0xfe84)
  70          #define I2CSLADR        (*(unsigned char volatile xdata *)0xfe85)
  71          #define I2CTXD          (*(unsigned char volatile xdata *)0xfe86)
  72          #define I2CRXD          (*(unsigned char volatile xdata *)0xfe87)
  73          #define I2CMSAUX        (*(unsigned char volatile xdata *)0xfe88)
  74          
  75          #define Timer0_Reload   (65536UL -(MAIN_Fosc / 1000))       //Timer 0 中断频率, 1000次/秒
  76          
  77          #define DIS_DOT     0x20
  78          #define DIS_BLACK   0x10
  79          #define DIS_        0x11
  80          
  81          /*************  本地常量声明    **************/
  82          u8 code t_display[]={                       //标准字库
  83          //   0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F
  84              0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F,0x77,0x7C,0x39,0x5E,0x79,0x71,
  85          //black  -     H    J    K    L    N    o   P    U     t    G    Q    r   M    y
  86              0x00,0x40,0x76,0x1E,0x70,0x38,0x37,0x5C,0x73,0x3E,0x78,0x3d,0x67,0x50,0x37,0x6e,
  87              0xBF,0x86,0xDB,0xCF,0xE6,0xED,0xFD,0x87,0xFF,0xEF,0x46};    //0. 1. 2. 3. 4. 5. 6. 7. 8. 9. -1
  88          
  89          u8 code T_COM[]={0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80};      //位码
  90          
  91          /*************  本地变量声明    **************/
  92          
  93          u8  LED8[8];        //显示缓冲
  94          u8  display_index;  //显示位索引
  95          
  96          bit isda;                                       //设备地址标志
  97          bit isma;                                       //存储地址标志
  98          bit B_1ms;          //1ms标志
  99          bit DisplayFlag;
 100          u8 addr;
 101          u8 pdata buffer[256];
 102          u16 msecond;
 103          u16 Test_cnt;   //测试用的秒计数变量
 104          u8  tmp[4];     //通用数组
 105          
 106          void Timer0_config(void);
 107          void WriteNbyte(u8 addr, u8 *p, u8 number);
 108          void ReadNbyte(u8 addr, u8 *p, u8 number);
 109          
 110          void I2C_Isr() interrupt 24
 111          {
 112   1          char store;
 113   1          
 114   1          store = P_SW2;
 115   1          P_SW2 |= 0x80;
 116   1      
C51 COMPILER V9.59.0.0   I2C_SLAVE_INT                                                     03/15/2021 15:34:14 PAGE 3   

 117   1          if (I2CSLST & 0x40)
 118   1          {
 119   2              I2CSLST &= ~0x40;                       //处理START事件
 120   2          }
 121   1          else if (I2CSLST & 0x20)
 122   1          {
 123   2              I2CSLST &= ~0x20;                       //处理RECV事件，SLACKO设置为0
 124   2              if (isda)
 125   2              {
 126   3                  isda = 0;                           //处理RECV事件（RECV DEVICE ADDR）
 127   3              }
 128   2              else if (isma)
 129   2              {
 130   3                  isma = 0;                           //处理RECV事件（RECV MEMORY ADDR）
 131   3                  addr = I2CRXD;
 132   3                  I2CTXD = buffer[addr];
 133   3              }
 134   2              else
 135   2              {
 136   3                  buffer[addr++] = I2CRXD;            //处理RECV事件（RECV DATA）
 137   3              }
 138   2          }
 139   1          else if (I2CSLST & 0x10)
 140   1          {
 141   2              I2CSLST &= ~0x10;                       //处理SEND事件
 142   2              if (I2CSLST & 0x02)
 143   2              {
 144   3                  I2CTXD = 0xff;
 145   3              }
 146   2              else
 147   2              {
 148   3                  I2CTXD = buffer[++addr];
 149   3              }
 150   2          }
 151   1          else if (I2CSLST & 0x08)
 152   1          {
 153   2              I2CSLST &= ~0x08;                       //处理STOP事件
 154   2              isda = 1;
 155   2              isma = 1;
 156   2              DisplayFlag = 1;
 157   2          }
 158   1      
 159   1          P_SW2 = store;
 160   1      }
 161          
 162          void main()
 163          {
 164   1          u8  i;
 165   1      
 166   1          P0M1 = 0x00;   P0M0 = 0x00;   //设置为准双向口
 167   1          P1M1 = 0x00;   P1M0 = 0x00;   //设置为准双向口
 168   1          P2M1 = 0x00;   P2M0 = 0x00;   //设置为准双向口
 169   1          P4M1 = 0x00;   P4M0 = 0x00;   //设置为准双向口
 170   1          P5M1 = 0x00;   P5M0 = 0x00;   //设置为准双向口
 171   1          P6M1 = 0x00;   P6M0 = 0x00;   //设置为准双向口
 172   1          P7M1 = 0x00;   P7M0 = 0x00;   //设置为准双向口
 173   1          P3M1 = 0x04;   P3M0 = 0x00;   //SCL设置为输入口，SDA设置为准双向口
 174   1      
 175   1          P_SW2 = 0x80;
 176   1          P_SW2 |= 0x30;   //I2C功能脚选择，00:P1.5,P1.4; 01:P2.5,P2.4; 11:P3.2,P3.3
 177   1      
 178   1          I2CCFG = 0x80;                              //使能I2C从机模式
C51 COMPILER V9.59.0.0   I2C_SLAVE_INT                                                     03/15/2021 15:34:14 PAGE 4   

 179   1          I2CSLADR = 0x5a;                            //设置从机设备地址为5A
 180   1          I2CSLST = 0x00;
 181   1          I2CSLCR = 0x78;                             //使能从机模式中断
 182   1      
 183   1          Timer0_config();
 184   1          display_index = 0;
 185   1          DisplayFlag = 0;
 186   1          EA = 1;
 187   1      
 188   1          isda = 1;                                   //用户变量初始化
 189   1          isma = 1;
 190   1          addr = 0;
 191   1          I2CTXD = buffer[addr];
 192   1      
 193   1          for(i=0; i<8; i++)  LED8[i] = DIS_; //上电全部显示-
 194   1          
 195   1          while (1)
 196   1          {
 197   2            if(DisplayFlag)
 198   2            {
 199   3              DisplayFlag = 0;
 200   3              LED8[4] = buffer[0];
 201   3              LED8[5] = buffer[1];
 202   3              LED8[6] = buffer[2];
 203   3              LED8[7] = buffer[3];
 204   3            }
 205   2            
 206   2            if(B_1ms)
 207   2            {
 208   3              B_1ms = 0;
 209   3              
 210   3              if(++msecond >= 1000)   //1秒到
 211   3              {
 212   4                  msecond = 0;        //清1000ms计数
 213   4                  Test_cnt++;         //秒计数+1
 214   4                  if(Test_cnt >= 10000)    Test_cnt = 0;   //秒计数范围为0~9999
 215   4      
 216   4                  tmp[0] = Test_cnt / 1000;
 217   4                  tmp[1] = (Test_cnt % 1000) / 100;
 218   4                  tmp[2] = (Test_cnt % 100) / 10;
 219   4                  tmp[3] = Test_cnt % 10;
 220   4                  LED8[0] = tmp[0];
 221   4                  LED8[1] = tmp[1];
 222   4                  LED8[2] = tmp[2];
 223   4                  LED8[3] = tmp[3];
 224   4      
 225   4                  WriteNbyte(0, tmp, 4);
 226   4               }
 227   3            }
 228   2          }
 229   1      }
 230          
 231          //========================================================================
 232          // 函数: void Timer0_config(void)
 233          // 描述: Timer0初始化函数。
 234          // 参数: 无.
 235          // 返回: 无.
 236          // 版本: V1.0, 2020-6-10
 237          //========================================================================
 238          void Timer0_config(void)
 239          {
 240   1          AUXR = 0x80;    //Timer0 set as 1T, 16 bits timer auto-reload, 
C51 COMPILER V9.59.0.0   I2C_SLAVE_INT                                                     03/15/2021 15:34:14 PAGE 5   

 241   1          TH0 = (u8)(Timer0_Reload / 256);
 242   1          TL0 = (u8)(Timer0_Reload % 256);
 243   1          ET0 = 1;    //Timer0 interrupt enable
 244   1          TR0 = 1;    //Tiner0 run
 245   1      }
 246          
 247          /********************** 显示扫描函数 ************************/
 248          void DisplayScan(void)
 249          {   
 250   1          P7 = ~T_COM[7-display_index];
 251   1          P6 = ~t_display[LED8[display_index]];
 252   1          if(++display_index >= 8)    display_index = 0;  //8位结束回0
 253   1      }
 254          
 255          /********************** Timer0 1ms中断函数 ************************/
 256          void timer0 (void) interrupt 1
 257          {
 258   1          DisplayScan();  //1ms扫描显示一位
 259   1          B_1ms = 1;      //1ms标志
 260   1      }
 261          
 262          
 263          #define SLAW    0x5A
 264          #define SLAR    0x5B
 265          
 266          sbit    SDA = P0^1; //定义SDA
 267          sbit    SCL = P0^0; //定义SCL
 268          
 269          /****************************/
 270          void    I2C_Delay(void) //for normal MCS51, delay (2 * dly + 4) T, for STC12Cxxxx delay (4 * dly + 10) T
 271          {
 272   1          u8  dly;
 273   1          dly = MAIN_Fosc / 2000000UL;        //按2us计算
 274   1          while(--dly)    ;
 275   1      }
 276          
 277          /****************************/
 278          void I2C_Start(void)               //start the I2C, SDA High-to-low when SCL is high
 279          {
 280   1          SDA = 1;
 281   1          I2C_Delay();
 282   1          SCL = 1;
 283   1          I2C_Delay();
 284   1          SDA = 0;
 285   1          I2C_Delay();
 286   1          SCL = 0;
 287   1          I2C_Delay();
 288   1      }       
 289          
 290          
 291          void I2C_Stop(void)                 //STOP the I2C, SDA Low-to-high when SCL is high
 292          {
 293   1          SDA = 0;
 294   1          I2C_Delay();
 295   1          SCL = 1;
 296   1          I2C_Delay();
 297   1          SDA = 1;
 298   1          I2C_Delay();
 299   1      }
 300          
 301          void S_ACK(void)              //Send ACK (LOW)
 302          {
C51 COMPILER V9.59.0.0   I2C_SLAVE_INT                                                     03/15/2021 15:34:14 PAGE 6   

 303   1          SDA = 0;
 304   1          I2C_Delay();
 305   1          SCL = 1;
 306   1          I2C_Delay();
 307   1          SCL = 0;
 308   1          I2C_Delay();
 309   1      }
 310          
 311          void S_NoACK(void)           //Send No ACK (High)
 312          {
 313   1          SDA = 1;
 314   1          I2C_Delay();
 315   1          SCL = 1;
 316   1          I2C_Delay();
 317   1          SCL = 0;
 318   1          I2C_Delay();
 319   1      }
 320                  
 321          void I2C_Check_ACK(void)         //Check ACK, If F0=0, then right, if F0=1, then error
 322          {
 323   1          SDA = 1;
 324   1          I2C_Delay();
 325   1          SCL = 1;
 326   1          I2C_Delay();
 327   1          F0  = SDA;
 328   1          SCL = 0;
 329   1          I2C_Delay();
 330   1      }
 331          
 332          /****************************/
 333          void I2C_WriteAbyte(u8 dat)     //write a byte to I2C
 334          {
 335   1          u8 i;
 336   1          i = 8;
 337   1          do
 338   1          {
 339   2              if(dat & 0x80)  SDA = 1;
 340   2              else            SDA = 0;
 341   2              dat <<= 1;
 342   2              I2C_Delay();
 343   2              SCL = 1;
 344   2              I2C_Delay();
 345   2              SCL = 0;
 346   2              I2C_Delay();
 347   2          }
 348   1          while(--i);
 349   1      }
 350          
 351          /****************************/
 352          u8 I2C_ReadAbyte(void)          //read A byte from I2C
 353          {
 354   1          u8 i,dat;
 355   1          i = 8;
 356   1          SDA = 1;
 357   1          do
 358   1          {
 359   2              SCL = 1;
 360   2              I2C_Delay();
 361   2              dat <<= 1;
 362   2              if(SDA)     dat++;
 363   2              SCL  = 0;
 364   2              I2C_Delay();
C51 COMPILER V9.59.0.0   I2C_SLAVE_INT                                                     03/15/2021 15:34:14 PAGE 7   

 365   2          }
 366   1          while(--i);
 367   1          return(dat);
 368   1      }
 369          
 370          /****************************/
 371          void WriteNbyte(u8 addr, u8 *p, u8 number)          /*  WordAddress,First Data Address,Byte lenth   */
 372                                                                      //F0=0,right, F0=1,error
 373          {
 374   1          I2C_Start();
 375   1          I2C_WriteAbyte(SLAW);
 376   1          I2C_Check_ACK();
 377   1          if(!F0)
 378   1          {
 379   2              I2C_WriteAbyte(addr);
 380   2              I2C_Check_ACK();
 381   2              if(!F0)
 382   2              {
 383   3                  do
 384   3                  {
 385   4                      I2C_WriteAbyte(*p);     p++;
 386   4                      I2C_Check_ACK();
 387   4                      if(F0)  break;
 388   4                  }
 389   3                  while(--number);
 390   3              }
 391   2          }
 392   1          I2C_Stop();
 393   1      }
 394          
 395          
 396          /****************************/
 397          void ReadNbyte(u8 addr, u8 *p, u8 number)       /*  WordAddress,First Data Address,Byte lenth   */
 398          {
 399   1          I2C_Start();
 400   1          I2C_WriteAbyte(SLAW);
 401   1          I2C_Check_ACK();
 402   1          if(!F0)
 403   1          {
 404   2              I2C_WriteAbyte(addr);
 405   2              I2C_Check_ACK();
 406   2              if(!F0)
 407   2              {
 408   3                  I2C_Start();
 409   3                  I2C_WriteAbyte(SLAR);
 410   3                  I2C_Check_ACK();
 411   3                  if(!F0)
 412   3                  {
 413   4                      do
 414   4                      {
 415   5                          *p = I2C_ReadAbyte();   p++;
 416   5                          if(number != 1)     S_ACK();    //send ACK
 417   5                      }
 418   4                      while(--number);
 419   4                      S_NoACK();          //send no ACK
 420   4                  }
 421   3              }
 422   2          }
 423   1          I2C_Stop();
 424   1      }
 425          

C51 COMPILER V9.59.0.0   I2C_SLAVE_INT                                                     03/15/2021 15:34:14 PAGE 8   


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    790    ----
   CONSTANT SIZE    =     51    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =    256    ----
   DATA SIZE        =     18      10
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      4    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
