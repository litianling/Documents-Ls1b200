C51 COMPILER V9.59.0.0   DS18B20                                                           02/08/2021 11:42:51 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE DS18B20
OBJECT MODULE PLACED IN DS18B20.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE DS18B20.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          /*---------------------------------------------------------------------*/
   2          /* --- STC MCU Limited ------------------------------------------------*/
   3          /* --- STC 1T Series MCU Demo Programme -------------------------------*/
   4          /* --- Mobile: (86)13922805190 ----------------------------------------*/
   5          /* --- Fax: 86-0513-55012956,55012947,55012969 ------------------------*/
   6          /* --- Tel: 86-0513-55012928,55012929,55012966 ------------------------*/
   7          /* --- Web: www.STCMCU.com --------------------------------------------*/
   8          /* --- Web: www.STCMCUDATA.com  ---------------------------------------*/
   9          /* --- QQ:  800003751 -------------------------------------------------*/
  10          /* 如果要在程序中使用此代码,请在程序中注明使用了STC的资料及程序        */
  11          /*---------------------------------------------------------------------*/
  12          
  13          
  14          /*************  本程序功能说明  **************
  15          
  16          本例程基于STC8H8K64U为主控芯片的实验箱8进行编写测试，STC8G、STC8H系列芯片可通用参考.
  17          
  18          通过一个IO口获取一线制温度传感器 DS18B20 温度值.
  19          
  20          使用Timer0的16位自动重装来产生1ms节拍,程序运行于这个节拍下, 用户修改MCU主时钟频率时,自动定时于1ms.
  21          
  22          用STC的MCU的IO方式驱动8位数码管，通过数码管显示测量的温度值.
  23          
  24          下载时, 选择时钟 24MHZ (用户可自行修改频率).
  25          
  26          ******************************************/
  27          
  28          #include    "reg51.h"       //包含此头文件后，里面声明的寄存器不需要再手动输入，避免重复定义
  29          #include    "intrins.h"
  30          
  31          #define     MAIN_Fosc       24000000L   //定义主时钟
  32          
  33          typedef     unsigned char   u8;
  34          typedef     unsigned int    u16;
  35          typedef     unsigned long   u32;
  36          
  37          //手动输入声明"reg51.h"头文件里面没有定义的寄存器
  38          sfr AUXR = 0x8E;
  39          sfr P4   = 0xC0;
  40          sfr P5   = 0xC8;
  41          sfr P6   = 0xE8;
  42          sfr P7   = 0xF8;
  43          sfr P1M1 = 0x91;    //PxM1.n,PxM0.n     =00--->Standard,    01--->push-pull
  44          sfr P1M0 = 0x92;    //                  =10--->pure input,  11--->open drain
  45          sfr P0M1 = 0x93;
  46          sfr P0M0 = 0x94;
  47          sfr P2M1 = 0x95;
  48          sfr P2M0 = 0x96;
  49          sfr P3M1 = 0xB1;
  50          sfr P3M0 = 0xB2;
  51          sfr P4M1 = 0xB3;
  52          sfr P4M0 = 0xB4;
  53          sfr P5M1 = 0xC9;
  54          sfr P5M0 = 0xCA;
  55          sfr P6M1 = 0xCB;
C51 COMPILER V9.59.0.0   DS18B20                                                           02/08/2021 11:42:51 PAGE 2   

  56          sfr P6M0 = 0xCC;
  57          sfr P7M1 = 0xE1;
  58          sfr P7M0 = 0xE2;
  59          
  60          sbit P00 = P0^0;
  61          sbit P01 = P0^1;
  62          sbit P02 = P0^2;
  63          sbit P03 = P0^3;
  64          sbit P04 = P0^4;
  65          sbit P05 = P0^5;
  66          sbit P06 = P0^6;
  67          sbit P07 = P0^7;
  68          sbit P10 = P1^0;
  69          sbit P11 = P1^1;
  70          sbit P12 = P1^2;
  71          sbit P13 = P1^3;
  72          sbit P14 = P1^4;
  73          sbit P15 = P1^5;
  74          sbit P16 = P1^6;
  75          sbit P17 = P1^7;
  76          sbit P20 = P2^0;
  77          sbit P21 = P2^1;
  78          sbit P22 = P2^2;
  79          sbit P23 = P2^3;
  80          sbit P24 = P2^4;
  81          sbit P25 = P2^5;
  82          sbit P26 = P2^6;
  83          sbit P27 = P2^7;
  84          sbit P30 = P3^0;
  85          sbit P31 = P3^1;
  86          sbit P32 = P3^2;
  87          sbit P33 = P3^3;
  88          sbit P34 = P3^4;
  89          sbit P35 = P3^5;
  90          sbit P36 = P3^6;
  91          sbit P37 = P3^7;
  92          sbit P40 = P4^0;
  93          sbit P41 = P4^1;
  94          sbit P42 = P4^2;
  95          sbit P43 = P4^3;
  96          sbit P44 = P4^4;
  97          sbit P45 = P4^5;
  98          sbit P46 = P4^6;
  99          sbit P47 = P4^7;
 100          sbit P50 = P5^0;
 101          sbit P51 = P5^1;
 102          sbit P52 = P5^2;
 103          sbit P53 = P5^3;
 104          sbit P54 = P5^4;
 105          sbit P55 = P5^5;
 106          sbit P56 = P5^6;
 107          sbit P57 = P5^7;
 108          
 109          /***********************************************************/
 110          
 111          sbit DQ = P3^3;                   //DS18B20的数据口
 112          
 113          #define DIS_DOT     0x20
 114          #define DIS_BLACK   0x10
 115          #define DIS_        0x11
 116          
 117          #define Timer0_Reload   (65536UL -(MAIN_Fosc / 1000))       //Timer 0 中断频率, 1000次/秒
C51 COMPILER V9.59.0.0   DS18B20                                                           02/08/2021 11:42:51 PAGE 3   

 118          
 119          #if (MAIN_Fosc >= 40000000L)
                  #define   NOP()    _nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop
             -_();_nop_()
              #elif (MAIN_Fosc >= 36000000L)
                  #define   NOP()    _nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_()
              #elif (MAIN_Fosc >= 30000000L)
                  #define   NOP()    _nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_()
              #elif (MAIN_Fosc >= 24000000L)
 126              #define   NOP()    _nop_();_nop_();_nop_();_nop_();_nop_();_nop_()
 127          #elif (MAIN_Fosc >= 20000000L)
                  #define   NOP()    _nop_();_nop_();_nop_();_nop_();_nop_()
              #elif (MAIN_Fosc >= 18000000L)
                  #define   NOP()    _nop_();_nop_();_nop_();_nop_()
              #elif (MAIN_Fosc >= 12000000L)
                  #define   NOP()    _nop_();_nop_();_nop_()
              #elif (MAIN_Fosc >= 6000000L)
                  #define   NOP()    _nop_();_nop_()
              #else
                  #define   NOP()    _nop_()
              #endif
 138          
 139          /*************  本地常量声明    **************/
 140          u8 code t_display[]={                       //标准字库
 141          //   0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F
 142              0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F,0x77,0x7C,0x39,0x5E,0x79,0x71,
 143          //black  -     H    J    K    L    N    o   P    U     t    G    Q    r   M    y
 144              0x00,0x40,0x76,0x1E,0x70,0x38,0x37,0x5C,0x73,0x3E,0x78,0x3d,0x67,0x50,0x37,0x6e,
 145              0xBF,0x86,0xDB,0xCF,0xE6,0xED,0xFD,0x87,0xFF,0xEF,0x46};    //0. 1. 2. 3. 4. 5. 6. 7. 8. 9. -1
 146          
 147          u8 code T_COM[]={0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80};      //位码
 148          
 149          /***************  本地变量声明  ****************/
 150          
 151          u8  LED8[8];        //显示缓冲
 152          u8  display_index;  //显示位索引
 153          bit B_1ms;          //1ms标志
 154          u16 msecond;
 155          u8 MinusFlag;       //负数标志，0：正数，1：负数
 156          
 157          /**********************************************/
 158          void DS18B20_Reset();
 159          void DS18B20_WriteByte(u8 dat);
 160          u8 DS18B20_ReadByte();
 161          
 162          void delay_us(u8 us);
 163          u16 ReadTemperature();
 164          void DisplayTemperature(u16 temp);
 165          /**********************************************/
 166          void main()
 167          {
 168   1          u8  i;
 169   1          u16 Temp;
 170   1      
 171   1          P0M1 = 0;   P0M0 = 0;   //设置为准双向口
 172   1          P1M1 = 0;   P1M0 = 0;   //设置为准双向口
 173   1          P2M1 = 0;   P2M0 = 0;   //设置为准双向口
 174   1          P3M1 = 0;   P3M0 = 0;   //设置为准双向口
 175   1          P4M1 = 0;   P4M0 = 0;   //设置为准双向口
 176   1          P5M1 = 0;   P5M0 = 0;   //设置为准双向口
 177   1          P6M1 = 0;   P6M0 = 0;   //设置为准双向口
 178   1          P7M1 = 0;   P7M0 = 0;   //设置为准双向口
C51 COMPILER V9.59.0.0   DS18B20                                                           02/08/2021 11:42:51 PAGE 4   

 179   1        
 180   1          display_index = 0;
 181   1          AUXR = 0x80;    //Timer0 set as 1T, 16 bits timer auto-reload, 
 182   1          TH0 = (u8)(Timer0_Reload / 256);
 183   1          TL0 = (u8)(Timer0_Reload % 256);
 184   1          ET0 = 1;    //Timer0 interrupt enable
 185   1          TR0 = 1;    //Tiner0 run
 186   1          EA = 1;     //打开总中断
 187   1          
 188   1          for(i=0; i<8; i++)  LED8[i] = 0x10; //上电消隐
 189   1      
 190   1          while (1)
 191   1          {
 192   2              if(B_1ms)   //1ms到
 193   2              {
 194   3                  B_1ms = 0;
 195   3                  if(++msecond >= 300)    //300ms到
 196   3                  {
 197   4                      msecond = 0;
 198   4                      Temp = ReadTemperature();
 199   4                      DisplayTemperature(Temp);
 200   4                  }
 201   3              }
 202   2          }
 203   1      }
 204          
 205          //========================================================================
 206          // 函数: u16 ReadTemperature()
 207          // 描述: 读取温度函数。
 208          // 参数: none.
 209          // 返回: 温度值.
 210          // 版本: VER1.0
 211          // 日期: 2020-7-30
 212          // 备注: 
 213          //========================================================================
 214          u16 ReadTemperature()
 215          {
 216   1          u16 TempH, TempL, Temperature;
 217   1        
 218   1          DS18B20_Reset();                //设备复位
 219   1          DS18B20_WriteByte(0xCC);        //跳过ROM命令
 220   1          DS18B20_WriteByte(0x44);        //开始转换命令
 221   1          while (!DQ);                    //等待转换完成
 222   1      
 223   1          DS18B20_Reset();                //设备复位
 224   1          DS18B20_WriteByte(0xCC);        //跳过ROM命令
 225   1          DS18B20_WriteByte(0xBE);        //读暂存存储器命令
 226   1          TempL = DS18B20_ReadByte();     //读温度低字节
 227   1          TempH = DS18B20_ReadByte();     //读温度高字节
 228   1        
 229   1          if(TempH & 0xf8)    //判断是否位负数
 230   1          {
 231   2              MinusFlag = 1;  //设置负数标志
 232   2              Temperature = (TempH<<8) | TempL;
 233   2              Temperature = ~Temperature + 1;
 234   2              Temperature *= 0.625;       //0.0625 * 10，保留1位小数点
 235   2          }
 236   1          else
 237   1          {
 238   2              MinusFlag = 0;  //清除负数标志
 239   2              Temperature = (((TempH<<8) | TempL) * 0.625); //0.0625 * 10，保留1位小数点
 240   2          }
C51 COMPILER V9.59.0.0   DS18B20                                                           02/08/2021 11:42:51 PAGE 5   

 241   1      
 242   1          return Temperature;
 243   1      }
 244          
 245          //========================================================================
 246          // 函数: void DisplayTemperature(u16 temp)
 247          // 描述: 显示温度函数。
 248          // 参数: none.
 249          // 返回: 温度值.
 250          // 版本: VER1.0
 251          // 日期: 2020-7-30
 252          // 备注: 
 253          //========================================================================
 254          void DisplayTemperature(u16 temp)
 255          {
 256   1          if(MinusFlag)
 257   1          {
 258   2              if(temp > 999)
 259   2              {
 260   3                  LED8[3] = DIS_;
 261   3                  LED8[4] = temp / 1000;
 262   3              }
 263   2              else
 264   2              {
 265   3                  LED8[3] = DIS_BLACK;
 266   3                  LED8[4] = DIS_;
 267   3              }
 268   2          }
 269   1          else
 270   1          {
 271   2              LED8[3] = DIS_BLACK;
 272   2              if(temp > 999)
 273   2              {
 274   3                  LED8[4] = temp / 1000;
 275   3              }
 276   2              else
 277   2              {
 278   3                  LED8[4] = DIS_BLACK;
 279   3              }
 280   2          }
 281   1          LED8[5] = (temp % 1000) / 100;
 282   1          LED8[6] = ((temp % 100) / 10) + DIS_DOT;
 283   1          LED8[7] = temp % 10;
 284   1      }
 285          
 286          //========================================================================
 287          // 函数: void  delay_us(u8 us)
 288          // 描述: 延时函数。
 289          // 参数: us,要延时的us数, 这里只支持1~255us. 
 290          // 返回: none.
 291          // 版本: VER1.0
 292          // 日期: 2013-4-1
 293          // 备注: 
 294          //========================================================================
 295          void delay_us(u8 us)
 296          {
 297   1          do{
 298   2              NOP();
 299   2              NOP();
 300   2          }while(--us);
 301   1      }
 302          
C51 COMPILER V9.59.0.0   DS18B20                                                           02/08/2021 11:42:51 PAGE 6   

 303          /**************************************
 304          复位DS18B20,并检测设备是否存在
 305          **************************************/
 306          void DS18B20_Reset()
 307          {
 308   1          CY = 1;
 309   1          while (CY)
 310   1          {
 311   2              DQ = 0;                     //送出低电平复位信号
 312   2              delay_us(240);              //延时至少480us
 313   2              delay_us(240);
 314   2              DQ = 1;                     //释放数据线
 315   2              delay_us(60);               //等待60us
 316   2              CY = DQ;                    //检测存在脉冲
 317   2              delay_us(240);              //等待设备释放数据线
 318   2              delay_us(180);
 319   2          }
 320   1      }
 321          
 322          /**************************************
 323          从DS18B20读1字节数据
 324          **************************************/
 325          u8 DS18B20_ReadByte()
 326          {
 327   1          u8 i;
 328   1          u8 dat = 0;
 329   1      
 330   1          for (i=0; i<8; i++)             //8位计数器
 331   1          {
 332   2              dat >>= 1;
 333   2              DQ = 0;                     //开始时间片
 334   2              delay_us(1);                //延时等待
 335   2              DQ = 1;                     //准备接收
 336   2              delay_us(1);                //接收延时
 337   2              if (DQ) dat |= 0x80;        //读取数据
 338   2              delay_us(60);               //等待时间片结束
 339   2          }
 340   1      
 341   1          return dat;
 342   1      }
 343          
 344          /**************************************
 345          向DS18B20写1字节数据
 346          **************************************/
 347          void DS18B20_WriteByte(u8 dat)
 348          {
 349   1          char i;
 350   1      
 351   1          for (i=0; i<8; i++)             //8位计数器
 352   1          {
 353   2              DQ = 0;                     //开始时间片
 354   2              delay_us(1);                //延时等待
 355   2              dat >>= 1;                  //送出数据
 356   2              DQ = CY;
 357   2              delay_us(60);               //等待时间片结束
 358   2              DQ = 1;                     //恢复数据线
 359   2              delay_us(1);                //恢复延时
 360   2          }
 361   1      }
 362          
 363          /********************** 显示扫描函数 ************************/
 364          void DisplayScan(void)
C51 COMPILER V9.59.0.0   DS18B20                                                           02/08/2021 11:42:51 PAGE 7   

 365          {   
 366   1          P7 = ~T_COM[7-display_index];
 367   1          P6 = ~t_display[LED8[display_index]];
 368   1          if(++display_index >= 8)    display_index = 0;  //8位结束回0
 369   1      }
 370          
 371          /********************** Timer0 1ms中断函数 ************************/
 372          void timer0 (void) interrupt 1
 373          {
 374   1          DisplayScan();  //1ms扫描显示一位
 375   1          B_1ms = 1;      //1ms标志
 376   1      }
 377          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    602    ----
   CONSTANT SIZE    =     51    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     12       8
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
