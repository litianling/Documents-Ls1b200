A51 MACRO ASSEMBLER  UART_EEPROM                                                          03/09/2021 16:01:03 PAGE     1


MACRO ASSEMBLER A51 V8.2.7.0
OBJECT MODULE PLACED IN UART-EEPROM.OBJ
ASSEMBLER INVOKED BY: C:\Keil_v5\C51\BIN\A51.EXE UART-EEPROM.asm SET(SMALL) DEBUG EP

LOC  OBJ            LINE     SOURCE

                       1     ;/*---------------------------------------------------------------------*/
                       2     ;/* --- STC MCU Limited ------------------------------------------------*/
                       3     ;/* --- STC 1T Series MCU Demo Programme -------------------------------*/
                       4     ;/* --- Mobile: (86)13922805190 ----------------------------------------*/
                       5     ;/* --- Fax: 86-0513-55012956,55012947,55012969 ------------------------*/
                       6     ;/* --- Tel: 86-0513-55012928,55012929,55012966 ------------------------*/
                       7     ;/* --- Web: www.STCMCU.com --------------------------------------------*/
                       8     ;/* --- Web: www.STCMCUDATA.com ----------------------------------------*/
                       9     ;/* --- QQ:  800003751 -------------------------------------------------*/
                      10     ;/* 如果要在程序中使用此代码,请在程序中注明使用了STC的资料及程序        */
                      11     ;/*---------------------------------------------------------------------*/
                      12     
                      13     
                      14     ;*************  本程序功能说明  **************
                      15     
                      16     ;本例程基于STC8H8K64U为主控芯片的实验箱8进行编写测试，STC8G、STC8H系列芯片可通用参考.
                      17     
                      18     ;通过串口对STC内部自带的EEPROM(FLASH)进行读写测试。
                      19     
                      20     ;对FLASH做扇区擦除、写入、读出的操作，命令指定地址。
                      21     
                      22     ;默认波特率:  115200,8,N,1. 
                      23     ;默认主时钟:  22.1184MHz.
                      24     
                      25     ;串口命令设置: (命令字母不区分大小写)
                      26     ;   W 0x0040 1234567890  --> 对0x0040地址写入字符1234567890.
                      27     ;   R 0x0040 10          --> 对0x0040地址读出10个字节数据. 
                      28     
                      29     ;注意：下载时，下载界面"硬件选项"中设置用户EEPROM大小，
                      30     
                      31     ;并确保串口命令中的地址在EEPROM设置的大小范围之内。
                      32     
                      33     ;******************************************/
                      34     
                      35     ;/****************************** 用户定义宏 ***********************************/
  5666                36     Fosc_KHZ    EQU 22118   ;22118KHZ
                      37     
                      38     ;UART1_Baudrate EQU     (-4608) ;   600bps @ 11.0592MHz
                      39     ;UART1_Baudrate EQU     (-2304) ;  1200bps @ 11.0592MHz UART1_Baudrate = (MAIN_Fosc / Baudr
                             ate)
                      40     ;UART1_Baudrate EQU     (-1152) ;  2400bps @ 11.0592MHz
                      41     ;UART1_Baudrate EQU     (-576)  ;  4800bps @ 11.0592MHz
                      42     ;UART1_Baudrate EQU     (-288)  ;  9600bps @ 11.0592MHz
                      43     ;UART1_Baudrate EQU     (-144)  ; 19200bps @ 11.0592MHz
                      44     ;UART1_Baudrate EQU     (-72)   ; 38400bps @ 11.0592MHz
                      45     ;UART1_Baudrate EQU     (-48)   ; 57600bps @ 11.0592MHz
                      46     ;UART1_Baudrate EQU     (-24)   ;115200bps @ 11.0592MHz
                      47     
                      48     ;UART1_Baudrate EQU     (-7680) ;   600bps @ 18.432MHz
                      49     ;UART1_Baudrate EQU     (-3840) ;  1200bps @ 18.432MHz
                      50     ;UART1_Baudrate EQU     (-1920) ;  2400bps @ 18.432MHz
                      51     ;UART1_Baudrate EQU     (-960)  ;  4800bps @ 18.432MHz
                      52     ;UART1_Baudrate EQU     (-480)  ;  9600bps @ 18.432MHz
                      53     ;UART1_Baudrate EQU     (-240)  ; 19200bps @ 18.432MHz
                      54     ;UART1_Baudrate EQU     (-120)  ; 38400bps @ 18.432MHz
                      55     ;UART1_Baudrate EQU     (-80)   ; 57600bps @ 18.432MHz
                      56     ;UART1_Baudrate EQU     (-40)   ;115200bps @ 18.432MHz
                      57     
A51 MACRO ASSEMBLER  UART_EEPROM                                                          03/09/2021 16:01:03 PAGE     2

                      58     ;UART1_Baudrate EQU     (-9216) ;   600bps @ 22.1184MHz
                      59     ;UART1_Baudrate EQU     (-4608) ;  1200bps @ 22.1184MHz
                      60     ;UART1_Baudrate EQU     (-2304) ;  2400bps @ 22.1184MHz
                      61     ;UART1_Baudrate EQU     (-1152) ;  4800bps @ 22.1184MHz
                      62     ;UART1_Baudrate EQU     (-576)  ;  9600bps @ 22.1184MHz
                      63     ;UART1_Baudrate EQU     (-288)  ; 19200bps @ 22.1184MHz
                      64     ;UART1_Baudrate EQU     (-144)  ; 38400bps @ 22.1184MHz
                      65     ;UART1_Baudrate EQU     (-96)   ; 57600bps @ 22.1184MHz
  FFD0                66     UART1_Baudrate  EQU     (-48)   ;115200bps @ 22.1184MHz
                      67     
                      68     ;UART1_Baudrate EQU     (-6912) ; 1200bps @ 33.1776MHz
                      69     ;UART1_Baudrate EQU     (-3456) ; 2400bps @ 33.1776MHz
                      70     ;UART1_Baudrate EQU     (-1728) ; 4800bps @ 33.1776MHz
                      71     ;UART1_Baudrate EQU     (-864)  ; 9600bps @ 33.1776MHz
                      72     ;UART1_Baudrate EQU     (-432)  ;19200bps @ 33.1776MHz
                      73     ;UART1_Baudrate EQU     (-216)  ;38400bps @ 33.1776MHz
                      74     ;UART1_Baudrate EQU     (-144)  ;57600bps @ 33.1776MHz
                      75     ;UART1_Baudrate EQU     (-72)   ;115200bps @ 33.1776MHz
                      76     
                      77     
  0080                78     IAP_EN          EQU     (1 SHL 7)
  0040                79     IAP_SWBS        EQU     (1 SHL 6)
  0020                80     IAP_SWRST       EQU     (1 SHL 5)
  0010                81     IAP_CMD_FAIL    EQU     (1 SHL 4)
                      82     
  0016                83     TPS_WAIT        EQU     22   ;22.1184MHZ / 1000000
                      84     
                      85     
  0093                86     P0M1    DATA    0x93    ; P0M1.n,P0M0.n     =00--->Standard,    01--->push-pull
  0094                87     P0M0    DATA    0x94    ;                   =10--->pure input,  11--->open drain
  0091                88     P1M1    DATA    0x91    ; P1M1.n,P1M0.n     =00--->Standard,    01--->push-pull
  0092                89     P1M0    DATA    0x92    ;                   =10--->pure input,  11--->open drain
  0095                90     P2M1    DATA    0x95    ; P2M1.n,P2M0.n     =00--->Standard,    01--->push-pull
  0096                91     P2M0    DATA    0x96    ;                   =10--->pure input,  11--->open drain
  00B1                92     P3M1    DATA    0xB1    ; P3M1.n,P3M0.n     =00--->Standard,    01--->push-pull
  00B2                93     P3M0    DATA    0xB2    ;                   =10--->pure input,  11--->open drain
  00B3                94     P4M1    DATA    0xB3    ; P4M1.n,P4M0.n     =00--->Standard,    01--->push-pull
  00B4                95     P4M0    DATA    0xB4    ;                   =10--->pure input,  11--->open drain
  00C9                96     P5M1    DATA    0xC9    ; P5M1.n,P5M0.n     =00--->Standard,    01--->push-pull
  00CA                97     P5M0    DATA    0xCA    ;                   =10--->pure input,  11--->open drain
  00CB                98     P6M1    DATA    0xCB    ; P6M1.n,P6M0.n     =00--->Standard,    01--->push-pull
  00CC                99     P6M0    DATA    0xCC    ;                   =10--->pure input,  11--->open drain
  00E1               100     P7M1    DATA    0xE1    ;
  00E2               101     P7M0    DATA    0xE2    ;
                     102     
  008F               103     INT_CLKO    DATA    0x8F
  00A2               104     P_SW1       DATA    0A2H
  00AF               105     IE2         DATA    0AFH
  008E               106     AUXR        DATA    08EH
  00D6               107     T2H         DATA    0D6H
  00D7               108     T2L         DATA    0D7H
                     109     
  00C2               110     IAP_DATA  DATA 0C2H
  00C3               111     IAP_ADDRH DATA 0C3H
  00C4               112     IAP_ADDRL DATA 0C4H
  00C5               113     IAP_CMD   DATA 0C5H
  00C6               114     IAP_TRIG  DATA 0C6H
  00C7               115     IAP_CONTR DATA 0C7H
  00F5               116     IAP_TPS   DATA 0F5H
                     117     
                     118     
  0020               119     RX1_Lenth   EQU     32      ; 串口接收缓冲长度
                     120     
  0000               121     B_TX1_Busy  BIT     20H.0   ; 发送忙标志
                     122     
  0030               123     TX1_Cnt     DATA    30H     ; 发送计数
A51 MACRO ASSEMBLER  UART_EEPROM                                                          03/09/2021 16:01:03 PAGE     3

  0031               124     RX1_Cnt     DATA    31H     ; 接收计数
  0032               125     address_H   DATA    32H
  0033               126     address_L   DATA    33H
  0034               127     length      DATA    34H
  0035               128     RX1_TimeOut DATA    35H
                     129     
  0040               130     RX1_Buffer  DATA    40H     ; 40 ~ 5FH 接收缓冲
  0060               131     tmp         DATA    60H     ; 60~7F
                     132     
  00D0               133     STACK_POIRTER   EQU     0D0H    ;堆栈开始地址
                     134     
                     135     
                     136     
                     137     ;*******************************************************************
                     138     ;*******************************************************************
0000                 139             ORG     0000H               ;reset
0000 020100          140             LJMP    F_Main
                     141     
0023                 142             ORG     0023H               ;4  UART1 interrupt
0023 02041C          143             LJMP    F_UART1_Interrupt
                     144     
                     145     
                     146     ;******************** 主程序 **************************/
0100                 147             ORG     0100H       ;reset
0100                 148     F_Main:
0100 E4              149         CLR     A
0101 F593            150         MOV     P0M1, A     ;设置为准双向口
0103 F594            151         MOV     P0M0, A
0105 F591            152         MOV     P1M1, A     ;设置为准双向口
0107 F592            153         MOV     P1M0, A
0109 F595            154         MOV     P2M1, A     ;设置为准双向口
010B F596            155         MOV     P2M0, A
010D F5B1            156         MOV     P3M1, A     ;设置为准双向口
010F F5B2            157         MOV     P3M0, A
0111 F5B3            158         MOV     P4M1, A     ;设置为准双向口
0113 F5B4            159         MOV     P4M0, A
0115 F5C9            160         MOV     P5M1, A     ;设置为准双向口
0117 F5CA            161         MOV     P5M0, A
0119 F5CB            162         MOV     P6M1, A     ;设置为准双向口
011B F5CC            163         MOV     P6M0, A
011D F5E1            164         MOV     P7M1, A     ;设置为准双向口
011F F5E2            165         MOV     P7M0, A
                     166     
                     167         
0121 7581D0          168         MOV     SP, #STACK_POIRTER
0124 75D000          169         MOV     PSW, #0
                     170         USING   0       ;选择第0组R0~R7
                     171     
                     172     ;================= 用户初始化程序 ====================================
0127 7401            173         MOV     A, #1
0129 1203D9          174         LCALL   F_UART1_config  ; 选择波特率, 2: 使用Timer2做波特率, 其它值: 使用Timer1做波特率.
012C D2AF            175         SETB    EA      ; 允许全局中断
                     176         
012E 9002D4          177         MOV     DPTR, #TestString1  ;Load string address to DPTR
0131 1203B8          178         LCALL   F_SendString1       ;Send string
0134 9002FA          179         MOV     DPTR, #TestString1A ;Load string address to DPTR
0137 1203B8          180         LCALL   F_SendString1       ;Send string
013A 900335          181         MOV     DPTR, #TestString1B ;Load string address to DPTR
013D 1203B8          182         LCALL   F_SendString1       ;Send string
                     183     
                     184     
                     185     ;=================== 主循环 ==================================
0140                 186     L_MainLoop:
0140 7401            187         MOV     A, #1
0142 120449          188         LCALL   F_delay_ms
0145 E535            189         MOV     A, RX1_TimeOut      ;超时计数
A51 MACRO ASSEMBLER  UART_EEPROM                                                          03/09/2021 16:01:03 PAGE     4

0147 60F7            190         JZ      L_MainLoop          ;为0, 循环
0149 D535F4          191         DJNZ    RX1_TimeOut, L_MainLoop ;-1,不为0循环
                     192     
014C E531            193         MOV     A, RX1_Cnt
014E C3              194         CLR     C
014F 940A            195         SUBB    A, #10
0151 4018            196         JC      L_Jump_ProcessErr   ; RX1_Cnt < 10 bytes, jump
                     197     
0153 7840            198         MOV     R0, #RX1_Buffer
0155                 199     L_CheckCharLoop:                ; 小写转大写
0155 E6              200         MOV     A, @R0
0156 C3              201         CLR     C
0157 9461            202         SUBB    A, #'a'
0159 400A            203         JC      L_CheckLessThan_a   ;if(RX1_Buffer[i] < 'a'), jump
015B E6              204         MOV     A, @R0
015C C3              205         CLR     C
015D 947B            206         SUBB    A, #('z'+1)
015F 5004            207         JNC     L_CheckLargeThan_z  ;if(RX1_Buffer[i] > 'z'), jump
0161 E6              208         MOV     A, @R0
0162 24E0            209         ADD     A, #('A' - 'a')     ; 小写转大写
0164 F6              210         MOV     @R0, A
0165                 211     L_CheckLessThan_a:
0165                 212     L_CheckLargeThan_z:
0165 08              213         INC     R0
0166 B848EC          214         CJNE    R0, #(RX1_Buffer+8), L_CheckCharLoop
0169 8003            215         SJMP    L_CalculateAddr
                     216         
016B                 217     L_Jump_ProcessErr:
016B 020223          218         LJMP    L_Rx1ProcessErr
                     219     
016E                 220     L_CalculateAddr:    
016E 120256          221         LCALL   F_GetAddress            ; 计算地址
0171 20D5F7          222         JB      F0, L_Jump_ProcessErr   ; 地址错误
                     223     
0174 7848            224         MOV     R0, #RX1_Buffer+8
0176 B620F2          225         CJNE    @R0, #' ', L_Jump_ProcessErr    ;检查命令是否正确   RX1_Buffer[8] = ' '
                     226     
0179 7840            227         MOV     R0, #RX1_Buffer
017B B65254          228         CJNE    @R0, #'R', L_CMD_Not_R  ;检查命令是读命令   RX1_Buffer[0] = 'R'
017E 1202B0          229         LCALL   F_GetReadDataLength
0181 20D5E7          230         JB      F0, L_Jump_ProcessErr   ;长度错误
0184 E534            231         MOV     A, length
0186 60E3            232         JZ      L_Jump_ProcessErr   ; 长度错误
0188 C3              233         CLR     C
0189 9421            234         SUBB    A, #RX1_Lenth+1
018B 50DE            235         JNC     L_Jump_ProcessErr   ; 长度错误
                     236         
018D 7840            237         MOV     R0, #RX1_Buffer
018F 120489          238         LCALL   F_EEPROM_read_n     ;address_H,address_L,R0,length
0192 90036E          239         MOV     DPTR, #TestString2  ;"读出"
0195 1203B8          240         LCALL   F_SendString1
0198 E534            241         MOV     A, length
019A 75F064          242         MOV     B, #100
019D 84              243         DIV     AB
019E 2430            244         ADD     A, #'0'
01A0 1203B0          245         LCALL   F_SendByte      ;发送长度 百位
01A3 740A            246         MOV     A, #10
01A5 C5F0            247         XCH     A, B
01A7 84              248         DIV     AB
01A8 2430            249         ADD     A, #'0'
01AA 1203B0          250         LCALL   F_SendByte      ;发送长度 十位
01AD C5F0            251         XCH     A,B
01AF 2430            252         ADD     A, #'0'
01B1 1203B0          253         LCALL   F_SendByte      ;发送长度 个位
01B4 900373          254         MOV     DPTR, #TestString3  ;"个字节数据如下：\r\n"
01B7 1203B8          255         LCALL   F_SendString1
A51 MACRO ASSEMBLER  UART_EEPROM                                                          03/09/2021 16:01:03 PAGE     5

01BA AA34            256         MOV     R2, length
01BC 7840            257         MOV     R0, #RX1_Buffer
01BE                 258     L_TxDataLoop:
01BE E6              259         MOV     A, @R0
01BF 1203B0          260         LCALL   F_SendByte      ;发送数据
01C2 08              261         INC     R0
01C3 DAF9            262         DJNZ    R2, L_TxDataLoop
01C5 740D            263         MOV     A, #0DH
01C7 1203B0          264         LCALL   F_SendByte  ;回车
01CA 740A            265         MOV     A, #0AH
01CC 1203B0          266         LCALL   F_SendByte  ;换行
01CF 020229          267         LJMP    L_QuitRx1Process
                     268     
01D2                 269     L_CMD_Not_R:
01D2 7840            270         MOV     R0, #RX1_Buffer
01D4 B6574C          271         CJNE    @R0, #'W', L_CMD_Not_W  ;检查命令是写命令   RX1_Buffer[0] = 'W'
01D7 E531            272         MOV     A, RX1_Cnt
01D9 C3              273         CLR     C
01DA 9409            274         SUBB    A, #9
01DC F534            275         MOV     length, A
01DE 7849            276         MOV     R0, #RX1_Buffer+9
01E0 1204B6          277         LCALL   F_EEPROM_SectorErase    ; 擦除一个扇区
01E3 1204CC          278         LCALL   F_EEPROM_write_n        ; 写N个字节并校验   ;address_H,address_L,R0,length
01E6 20D52A          279         JB      F0, L_WriteError        ; 写入错误, 转
01E9 900385          280         MOV     DPTR, #TestString4      ; "已写入"
01EC 1203B8          281         LCALL   F_SendString1
01EF E534            282         MOV     A, length
01F1 75F064          283         MOV     B, #100
01F4 84              284         DIV     AB
01F5 2430            285         ADD     A, #'0'
01F7 1203B0          286         LCALL   F_SendByte      ;写入长度 百位
01FA 740A            287         MOV     A, #10
01FC C5F0            288         XCH     A, B
01FE 84              289         DIV     AB
01FF 2430            290         ADD     A, #'0'
0201 1203B0          291         LCALL   F_SendByte      ;写入长度 十位
0204 C5F0            292         XCH     A,B
0206 2430            293         ADD     A, #'0'
0208 1203B0          294         LCALL   F_SendByte      ;写入长度 个位
020B 90038C          295         MOV     DPTR, #TestString5      ;"字节数据!\r\n"
020E 1203B8          296         LCALL   F_SendString1
0211 8016            297         SJMP    L_QuitRx1Process
                     298     
0213                 299     L_WriteError:
0213 900398          300         MOV     DPTR, #TestString6      ;"写入错误!\r\n"
0216 1203B8          301         LCALL   F_SendString1
0219 800E            302         SJMP    L_QuitRx1Process
                     303     
021B                 304     L_AddrNotEmpty:
021B 9003A4          305         MOV     DPTR, #TestString7      ;"要写入的地址为非空,不能写入,请先擦除!\r\n"
021E 1203B8          306         LCALL   F_SendString1
0221 8006            307         SJMP    L_QuitRx1Process
                     308     
0223                 309     L_CMD_Not_W:
0223                 310     L_Rx1ProcessErr:
0223 9003A4          311         MOV     DPTR, #TestString7      ;"命令错误!\r\n"
0226 1203B8          312         LCALL   F_SendString1
                     313     
0229                 314     L_QuitRx1Process:
0229 753100          315         MOV     RX1_Cnt, #0     ;   //清除字节数
                     316     
022C 020140          317         LJMP    L_MainLoop
                     318     ;===================================================================
                     319     
                     320     
                     321     ;**********************************************
A51 MACRO ASSEMBLER  UART_EEPROM                                                          03/09/2021 16:01:03 PAGE     6

                     322     
                     323     ;========================================================================
                     324     ; 函数: F_CheckData
                     325     ; 描述: ASCII的数字'0'~'9','A'~'F'转成十六进制的数字 0~9, A~F.
                     326     ; 参数: ACC: 要转换的数据。
                     327     ; 返回: F0 = 0 正确,  F0 = 1 错误.
                     328     ; 版本: V1.0, 2014-1-22
                     329     ;========================================================================
022F                 330     F_CheckData:
022F C2D5            331         CLR     F0  ;0--正确, 1--错误
0231 FF              332         MOV     R7, A
0232 C3              333         CLR     C
0233 9430            334         SUBB    A, #'0'
0235 401C            335         JC      L_CheckDataErr  ; < '0'
0237 EF              336         MOV     A, R7
0238 C3              337         CLR     C
0239 943A            338         SUBB    A, #'9'+1
023B 5005            339         JNC     L_CheckDataChar ; > '9'
023D EF              340         MOV     A, R7
023E C3              341         CLR     C
023F 9430            342         SUBB    A, #'0'
0241 22              343         RET
0242                 344     L_CheckDataChar:
0242 EF              345         MOV     A,R7
0243 C3              346         CLR     C
0244 9441            347         SUBB    A, #'A'
0246 400B            348         JC      L_CheckDataErr  ; < 'A'
0248 EF              349         MOV     A, R7
0249 C3              350         CLR     C
024A 9447            351         SUBB    A, #'F'+1
024C 50F4            352         JNC     L_CheckDataChar ; > 'F'
024E EF              353         MOV     A, R7
024F C3              354         CLR     C
0250 9437            355         SUBB    A, #'A'-10
0252 22              356         RET
                     357     
0253                 358     L_CheckDataErr:
0253 D2D5            359         SETB    F0  ;0--正确, 1--错误
0255 22              360         RET
                     361     
                     362     ;========================================================================
                     363     ; 函数: F_GetAddress
                     364     ; 描述: 获取要操作的EEPROM的首地址.
                     365     ; 参数: non.
                     366     ; 返回: F0 = 0 正确,  F0 = 1 错误.
                     367     ; 版本: V1.0, 2014-1-22
                     368     ;========================================================================
0256                 369     F_GetAddress:
0256 753200          370         MOV     address_H, #0
0259 753300          371         MOV     address_L, #0
                     372     
025C 7842            373         MOV     R0, #RX1_Buffer+2
025E B63036          374         CJNE    @R0, #'0', L_AddrError  ;检查地址是否0X开头
0261 08              375         INC     R0
0262 B65832          376         CJNE    @R0, #'X', L_AddrError
                     377     
0265 7844            378         MOV     R0, #RX1_Buffer+4
0267 E6              379         MOV     A, @R0
0268 12022F          380         LCALL   F_CheckData
026B 20D529          381         JB      F0, L_AddrError
026E C4              382         SWAP    A
026F F532            383         MOV     address_H, A
0271 08              384         INC     R0
0272 E6              385         MOV     A, @R0
0273 12022F          386         LCALL   F_CheckData
0276 20D51E          387         JB      F0, L_AddrError
A51 MACRO ASSEMBLER  UART_EEPROM                                                          03/09/2021 16:01:03 PAGE     7

0279 4532            388         ORL     A, address_H
027B F532            389         MOV     address_H, A
                     390     
027D 08              391         INC     R0
027E E6              392         MOV     A, @R0
027F 12022F          393         LCALL   F_CheckData
0282 20D512          394         JB      F0, L_AddrError
0285 C4              395         SWAP    A
0286 F533            396         MOV     address_L, A
                     397     
0288 08              398         INC     R0
0289 E6              399         MOV     A, @R0
028A 12022F          400         LCALL   F_CheckData
028D 20D507          401         JB      F0, L_AddrError
0290 4533            402         ORL     A, address_L
0292 F533            403         MOV     address_L, A
0294 C2D5            404         CLR     F0
0296 22              405         RET
0297                 406     L_AddrError:
0297 D2D5            407         SETB    F0
0299 22              408         RET
                     409     
                     410     ;========================================================================
                     411     ; 函数: F_CheckNumber
                     412     ; 描述: 获取要读出数据的字节数.
                     413     ; 参数: non.
                     414     ; 返回: F0 = 0 正确,  F0 = 1 错误.
                     415     ; 版本: V1.0, 2014-1-22
                     416     ;========================================================================
029A                 417     F_CheckNumber:
029A C2D5            418         CLR     F0  ;0--正确, 1--错误
029C FF              419         MOV     R7, A
029D C3              420         CLR     C
029E 9430            421         SUBB    A, #'0'
02A0 400B            422         JC      L_CheckNumberErr    ; < '0'
02A2 EF              423         MOV     A, R7
02A3 C3              424         CLR     C
02A4 943A            425         SUBB    A, #'9'+1
02A6 5005            426         JNC     L_CheckNumberErr    ; > '9'
02A8 EF              427         MOV     A, R7
02A9 C3              428         CLR     C
02AA 9430            429         SUBB    A, #'0'
02AC 22              430         RET
02AD                 431     L_CheckNumberErr:
02AD D2D5            432         SETB    F0  ;0--正确, 1--错误
02AF 22              433         RET
                     434     
02B0                 435     F_GetReadDataLength:
02B0 C2D5            436         CLR     F0  ;0--正确, 1--错误
                     437         
02B2 753400          438         MOV     length, #0
02B5 7A09            439         MOV     R2, #9
02B7 7849            440         MOV     R0, #RX1_Buffer+9
02B9                 441     L_GetReadDataLengthLoop:    
02B9 E534            442         MOV     A, length
02BB 75F00A          443         MOV     B, #10
02BE A4              444         MUL     AB
02BF F534            445         MOV     length, A
02C1 E6              446         MOV     A, @R0
02C2 12029A          447         LCALL   F_CheckNumber
02C5 20D50B          448         JB      F0, L_GetReadDataLengthErr
02C8 2534            449         ADD     A, length
02CA F534            450         MOV     length, A
02CC 08              451         INC     R0
02CD 0A              452         INC     R2
02CE EA              453         MOV     A, R2
A51 MACRO ASSEMBLER  UART_EEPROM                                                          03/09/2021 16:01:03 PAGE     8

02CF B531E7          454         CJNE    A, RX1_Cnt, L_GetReadDataLengthLoop
02D2 22              455         RET
02D3                 456     L_GetReadDataLengthErr:
02D3 22              457         RET
                     458     
                     459     
02D4                 460     TestString1:
02D4 53544338        461         DB  "STC8H8K64U系列单片机EEPROM测试程序!",0DH,0AH,0
02D8 48384B36                
02DC 3455CFB5                
02E0 C1D0B5A5                
02E4 C6ACBBFA                
02E8 45455052                
02EC 4F4DB2E2                
02F0 CAD4B3CC                
02F4 D0F2210D                
02F8 0A00                    
02FA                 462     TestString1A:
02FA 57203078        463         DB  "W 0x0040 1234567890  --> 对0x0040地址写入字符1234567890.",0DH,0AH,0
02FE 30303430                
0302 20313233                
0306 34353637                
030A 38393020                
030E 202D2D3E                
0312 20B6D430                
0316 78303034                
031A 30B5D8D6                
031E B7D0B4C8                
0322 EBD7D6B7                
0326 FB313233                
032A 34353637                
032E 3839302E                
0332 0D0A00                  
0335                 464     TestString1B:
0335 52203078        465         DB  "R 0x0040 10          --> 对0x0040地址读出10个字节数据.",0DH,0AH,0
0339 30303430                
033D 20313020                
0341 20202020                
0345 20202020                
0349 202D2D3E                
034D 20B6D430                
0351 78303034                
0355 30B5D8D6                
0359 B7B6C1B3                
035D F63130B8                
0361 F6D7D6BD                
0365 DACAFDBE                
0369 DD2E0D0A                
036D 00                      
036E                 466     TestString2:
036E B6C1B3F6        467         DB  "读出",0
0372 00                      
0373                 468     TestString3:
0373 B8F6D7D6        469         DB  "个字节数据如下:",0DH,0AH,0
0377 BDDACAFD                
037B BEDDC8E7                
037F CFC23A0D                
0383 0A00                    
0385                 470     TestString4:
0385 D2D1D0B4        471         DB  "已写入",0
0389 C8EB00                  
038C                 472     TestString5:
038C D7D6BDDA        473         DB  "字节数据!",0DH,0AH,0
0390 CAFDBEDD                
0394 210D0A00                
0398                 474     TestString6:
A51 MACRO ASSEMBLER  UART_EEPROM                                                          03/09/2021 16:01:03 PAGE     9

0398 D0B4C8EB        475         DB  "写入错误!",0DH,0AH,0
039C B4EDCEF3                
03A0 210D0A00                
03A4                 476     TestString7:
03A4 C3FCC1EE        477         DB  "命令错误!",0DH,0AH,0
03A8 B4EDCEF3                
03AC 210D0A00                
                     478     
03B0                 479     F_SendByte:
03B0 D200            480         SETB    B_TX1_Busy      ;标志发送忙
03B2 F599            481         MOV     SBUF, A         ;发送一个字节
03B4 2000FD          482         JB      B_TX1_Busy, $   ;等待发送完成
03B7 22              483         RET
                     484     
                     485     ;========================================================================
                     486     ; 函数: F_SendString1
                     487     ; 描述: 串口1发送字符串函数。
                     488     ; 参数: DPTR: 字符串首地址.
                     489     ; 返回: none.
                     490     ; 版本: VER1.0
                     491     ; 日期: 2014-11-28
                     492     ; 备注: 
                     493     ;========================================================================
03B8                 494     F_SendString1:
03B8 E4              495         CLR     A
03B9 93              496         MOVC    A, @A+DPTR      ;Get current char
03BA 6006            497         JZ      L_SendEnd1      ;Check the end of the string
03BC 1203B0          498         LCALL   F_SendByte      ;发送一个字节
03BF A3              499         INC     DPTR            ;increment string ptr
03C0 80F6            500         SJMP    F_SendString1       ;Check next
03C2                 501     L_SendEnd1:
03C2 22              502         RET
                     503     
                     504     ;========================================================================
                     505     ; 函数: F_SetTimer2Baudraye
                     506     ; 描述: 设置Timer2做波特率发生器。
                     507     ; 参数: DPTR: Timer2的重装值.
                     508     ; 返回: none.
                     509     ; 版本: VER1.0
                     510     ; 日期: 2014-11-28
                     511     ; 备注: 
                     512     ;========================================================================
03C3                 513     F_SetTimer2Baudraye:    ; 选择波特率, 2: 使用Timer2做波特率, 其它值: 使用Timer1做波特率.
03C3 538EEF          514         ANL     AUXR, #NOT (1 SHL 4)    ; Timer stop    波特率使用Timer2产生
03C6 538EF7          515         ANL     AUXR, #NOT (1 SHL 3)    ; Timer2 set As Timer
03C9 438E04          516         ORL     AUXR, #(1 SHL 2)        ; Timer2 set as 1T mode
03CC 8583D6          517         MOV     T2H, DPH
03CF 8582D7          518         MOV     T2L, DPL
03D2 53AFFB          519         ANL     IE2, #NOT (1 SHL 2)     ; 禁止中断
03D5 438E10          520         ORL     AUXR, #(1 SHL 4)        ; Timer run enable
03D8 22              521         RET
                     522     
                     523     ;========================================================================
                     524     ; 函数: F_UART1_config
                     525     ; 描述: UART1初始化函数。
                     526     ; 参数: ACC: 选择波特率, 2: 使用Timer2做波特率, 其它值: 使用Timer1做波特率.
                     527     ; 返回: none.
                     528     ; 版本: VER1.0
                     529     ; 日期: 2014-11-28
                     530     ; 备注: 
                     531     ;========================================================================
03D9                 532     F_UART1_config:
03D9 B4020B          533         CJNE    A, #2, L_Uart1NotUseTimer2
03DC 438E01          534         ORL     AUXR, #0x01     ; S1 BRT Use Timer2;
03DF 90FFD0          535         MOV     DPTR, #UART1_Baudrate
03E2 1203C3          536         LCALL   F_SetTimer2Baudraye
A51 MACRO ASSEMBLER  UART_EEPROM                                                          03/09/2021 16:01:03 PAGE    10

03E5 801B            537         SJMP    L_SetupUart1
                     538     
03E7                 539     L_Uart1NotUseTimer2:
03E7 C28E            540         CLR     TR1                 ; Timer Stop    波特率使用Timer1产生
03E9 538EFE          541         ANL     AUXR, #NOT 0x01     ; S1 BRT Use Timer1;
03EC 438E40          542         ORL     AUXR, #(1 SHL 6)    ; Timer1 set as 1T mode
03EF 5389BF          543         ANL     TMOD, #NOT (1 SHL 6); Timer1 set As Timer
03F2 5389CF          544         ANL     TMOD, #NOT 0x30     ; Timer1_16bitAutoReload;
03F5 758DFF          545         MOV     TH1, #HIGH UART1_Baudrate
03F8 758BD0          546         MOV     TL1, #LOW  UART1_Baudrate
03FB C2AB            547         CLR     ET1                 ; 禁止中断
03FD 538FFD          548         ANL     INT_CLKO, #NOT 0x02 ; 不输出时钟
0400 D28E            549         SETB    TR1
                     550     
0402                 551     L_SetupUart1:
0402 D29C            552         SETB    REN     ; 允许接收
0404 D2AC            553         SETB    ES      ; 允许中断
                     554     
0406 53983F          555         ANL     SCON, #0x3f
0409 439840          556         ORL     SCON, #0x40     ; UART1模式, 0x00: 同步移位输出, 0x40: 8位数据,可变波特率, 0x80
                             : 9位数据,固定波特率, 0xc0: 9位数据,可变波特率
                     557     ;   SETB    PS      ; 高优先级中断
040C D29C            558         SETB    REN     ; 允许接收
040E D2AC            559         SETB    ES      ; 允许中断
                     560     
0410 53A23F          561         ANL     P_SW1, #0x3f
                     562     ;   ORL     P_SW1, #0x80        ; UART1 switch to, 0x00: P3.0 P3.1, 0x40: P3.6 P3.7, 0x80: 
                             P1.6 P1.7, 0xC0: P4.3 P4.4
                     563     ;   ORL     PCON2, #(1 SHL 4)   ; 内部短路RXD与TXD, 做中继, ENABLE,DISABLE
                     564     
0413 C200            565         CLR     B_TX1_Busy
0415 753100          566         MOV     RX1_Cnt, #0;
0418 753000          567         MOV     TX1_Cnt, #0;
041B 22              568         RET
                     569     
                     570     ;========================================================================
                     571     ; 函数: F_UART1_Interrupt
                     572     ; 描述: UART2中断函数。
                     573     ; 参数: nine.
                     574     ; 返回: none.
                     575     ; 版本: VER1.0
                     576     ; 日期: 2014-11-28
                     577     ; 备注: 
                     578     ;========================================================================
041C                 579     F_UART1_Interrupt:
041C C0D0            580         PUSH    PSW
041E C0E0            581         PUSH    ACC
0420 C000            582         PUSH    AR0
                     583         
0422 309816          584         JNB     RI, L_QuitUartRx
0425 C298            585         CLR     RI
0427 753505          586         MOV     RX1_TimeOut, #5
042A 7440            587         MOV     A, #RX1_Buffer
042C 2531            588         ADD     A, RX1_Cnt
042E F8              589         MOV     R0, A
042F A699            590         MOV     @R0, SBUF   ;保存一个字节
0431 0531            591         INC     RX1_Cnt
0433 E531            592         MOV     A, RX1_Cnt
0435 B42003          593         CJNE    A, #RX1_Lenth, L_QuitUartRx
0438 753100          594         MOV     RX1_Cnt, #0     ; 避免溢出处理
043B                 595     L_QuitUartRx:
                     596     
043B 309904          597         JNB     TI, L_QuitUartTx
043E C299            598         CLR     TI
0440 C200            599         CLR     B_TX1_Busy      ; 清除发送忙标志
0442                 600     L_QuitUartTx:
A51 MACRO ASSEMBLER  UART_EEPROM                                                          03/09/2021 16:01:03 PAGE    11

                     601     
0442 D000            602         POP     AR0
0444 D0E0            603         POP     ACC
0446 D0D0            604         POP     PSW
0448 32              605         RETI
                     606     
                     607     
                     608     ;========================================================================
                     609     ; 函数: F_delay_ms
                     610     ; 描述: 延时子程序。
                     611     ; 参数: ACC: 延时ms数.
                     612     ; 返回: none.
                     613     ; 版本: VER1.0
                     614     ; 日期: 2013-4-1
                     615     ; 备注: 除了ACCC和PSW外, 所用到的通用寄存器都入栈
                     616     ;========================================================================
0449                 617     F_delay_ms:
0449 C002            618         PUSH    AR2     ;入栈R2
044B C003            619         PUSH    AR3     ;入栈R3
044D C004            620         PUSH    AR4     ;入栈R4
                     621     
044F FA              622         MOV     R2,A
                     623     
0450                 624     L_delay_ms_1:
0450 7B08            625         MOV     R3, #HIGH (Fosc_KHZ / 10)
0452 7CA3            626         MOV     R4, #LOW (Fosc_KHZ / 10)
                     627         
0454                 628     L_delay_ms_2:
0454 EC              629         MOV     A, R4           ;1T     Total 10T/loop
0455 1C              630         DEC     R4              ;1T
0456 7001            631         JNZ     L_delay_ms_3    ;3T
0458 1B              632         DEC     R3
0459                 633     L_delay_ms_3:
0459 14              634         DEC     A               ;1T
045A 4B              635         ORL     A, R3           ;1T
045B 70F7            636         JNZ     L_delay_ms_2    ;3T
                     637         
045D DAF1            638         DJNZ    R2, L_delay_ms_1
                     639     
045F D004            640         POP     AR4     ;出栈R2
0461 D003            641         POP     AR3     ;出栈R3
0463 D002            642         POP     AR2     ;出栈R4
0465 22              643         RET
                     644     
                     645     
                     646     ;========================================================================
                     647     ; 函数: F_DisableEEPROM
                     648     ; 描述: 禁止访问ISP/IAP.
                     649     ; 参数: non.
                     650     ; 返回: non.
                     651     ; 版本: V1.0, 2012-10-22
                     652     ;========================================================================
0466                 653     F_DisableEEPROM:
0466 75C700          654         MOV     IAP_CONTR, #0       ; 禁止ISP/IAP操作
0469 75C500          655         MOV     IAP_CMD,  #0        ; 去除ISP/IAP命令
046C 75C600          656         MOV     IAP_TRIG, #0        ; 防止ISP/IAP命令误触发
046F 75C3FF          657         MOV     IAP_ADDRH, #0FFH    ; 清0地址高字节
0472 75C4FF          658         MOV     IAP_ADDRL, #0FFH    ; 清0地址低字节，指向非EEPROM区，防止误操作
0475 22              659         RET
                     660     
                     661     ;========================================================================
                     662     ; 函数: F_EEPROM_Trig
                     663     ; 描述: 触发EEPROM操作.
                     664     ; 参数: none.
                     665     ; 返回: none.
                     666     ; 版本: V1.0, 2014-6-30
A51 MACRO ASSEMBLER  UART_EEPROM                                                          03/09/2021 16:01:03 PAGE    12

                     667     ;========================================================================
0476                 668     F_EEPROM_Trig:
0476 A2AF            669         MOV     C, EA
0478 92D5            670         MOV     F0, C           ;保存全局中断
047A C2AF            671         CLR     EA              ;禁止中断, 避免触发命令无效
047C 75C65A          672         MOV     IAP_TRIG, #0x5A ;先送5AH，再送A5H到ISP/IAP触发寄存器，每次都需要如此
                     673                                 ;送完A5H后，ISP/IAP命令立即被触发启动.
                     674                                 ;CPU等待IAP完成后，才会继续执行程序.
047F 75C6A5          675         MOV     IAP_TRIG, #0xA5
0482 00              676         NOP
0483 00              677         NOP
0484 A2D5            678         MOV     C, F0
0486 92AF            679         MOV     EA, C       ;恢复全局中断
0488 22              680         RET
                     681     
                     682     ;========================================================================
                     683     ; 函数: F_EEPROM_read_n
                     684     ; 描述: 从指定EEPROM首地址读出n个字节放指定的缓冲.
                     685     ; 参数: address_H,address_L:  读出EEPROM的首地址.
                     686     ;       R0:                   读出数据放缓冲的首地址.
                     687     ;       length:               读出的字节长度.
                     688     ; 返回: non.
                     689     ; 版本: V1.0, 2012-10-22
                     690     ;========================================================================
                     691     
0489                 692     F_EEPROM_read_n:
0489 C002            693         PUSH    AR2
                     694     
048B AA34            695         MOV     R2, length
048D 8532C3          696         MOV     IAP_ADDRH, address_H    ; 送地址高字节（地址需要改变时才需重新送地址）
0490 8533C4          697         MOV     IAP_ADDRL, address_L    ; 送地址低字节
0493 75C780          698         MOV     IAP_CONTR, #IAP_EN      ; 允许ISP/IAP操作，送一次就够
0496 75F516          699             MOV     IAP_TPS, #TPS_WAIT      ; 设置等待时间，
0499 75C501          700         MOV     IAP_CMD, #1             ; ISP读出命令送字节读命令，命令不需改变时，不需重新送命
                             令
049C                 701     L_EE_Read_Loop:
049C 120476          702         LCALL   F_EEPROM_Trig           ; 触发EEPROM操作
049F A6C2            703         MOV     @R0, IAP_DATA
                     704     
04A1 E5C4            705         MOV     A, IAP_ADDRL            ; 地址 +1
04A3 2401            706         ADD     A, #1
04A5 F5C4            707         MOV     IAP_ADDRL, A
04A7 E5C3            708         MOV     A, IAP_ADDRH
04A9 3400            709         ADDC    A, #0
04AB F5C3            710         MOV     IAP_ADDRH, A
04AD 08              711         INC     R0
04AE DAEC            712         DJNZ    R2, L_EE_Read_Loop
                     713     
04B0 120466          714         LCALL   F_DisableEEPROM
04B3 D002            715         POP     AR2
04B5 22              716         RET
                     717     
                     718     
                     719     ;========================================================================
                     720     ; 函数: F_EEPROM_SectorErase
                     721     ; 描述: 把指定地址的EEPROM扇区擦除.
                     722     ; 参数: address_H,address_L:  要擦除的扇区EEPROM的地址.
                     723     ; 返回: non.
                     724     ; 版本: V1.0, 2013-5-10
                     725     ;========================================================================
04B6                 726     F_EEPROM_SectorErase:
                     727                                                 ;只有扇区擦除，没有字节擦除，512字节/扇区。
                     728                                                 ;扇区中任意一个字节地址都是扇区地址。
04B6 8532C3          729         MOV     IAP_ADDRH, address_H    ; 送地址高字节（地址需要改变时才需重新送地址）
04B9 8533C4          730         MOV     IAP_ADDRL, address_L    ; 送地址低字节
04BC 75C780          731         MOV     IAP_CONTR, #IAP_EN      ; 允许ISP/IAP操作，送一次就够
A51 MACRO ASSEMBLER  UART_EEPROM                                                          03/09/2021 16:01:03 PAGE    13

04BF 75F516          732             MOV     IAP_TPS, #TPS_WAIT      ; 设置等待时间，
04C2 75C503          733         MOV     IAP_CMD, #3             ;送扇区擦除命令
04C5 120476          734         LCALL   F_EEPROM_Trig           ; 触发EEPROM操作
04C8 120466          735         LCALL   F_DisableEEPROM         ; 禁止EEPROM操作
04CB 22              736         RET
                     737     
                     738     ;========================================================================
                     739     ; 函数: F_EEPROM_write_n
                     740     ; 描述: 把缓冲的n个字节写入指定首地址的EEPROM, 并且校验.
                     741     ; 参数: address_H,address_L:    写入EEPROM的首地址.
                     742     ;       R0:                     写入源数据的缓冲的首地址.
                     743     ;       length:                 写入的字节长度.
                     744     ; 返回: F0 == 0, 写入正确,  F0 == 1, 写入错误.
                     745     ; 版本: V1.0, 2014-1-22
                     746     ;========================================================================
04CC                 747     F_EEPROM_write_n:
04CC C002            748         PUSH    AR2
04CE C000            749         PUSH    AR0
04D0 AA34            750         MOV     R2, length
04D2 8532C3          751         MOV     IAP_ADDRH, address_H    ; 送地址高字节（地址需要改变时才需重新送地址）
04D5 8533C4          752         MOV     IAP_ADDRL, address_L    ; 送地址低字节
04D8 75C780          753         MOV     IAP_CONTR, #IAP_EN      ; 允许ISP/IAP操作，送一次就够
04DB 75F516          754             MOV     IAP_TPS, #TPS_WAIT      ; 设置等待时间，
04DE 75C502          755         MOV     IAP_CMD, #2             ;送字节写命令，命令不需改变时，不需重新送命令
04E1                 756     L_EE_W_Loop:
04E1 86C2            757         MOV     IAP_DATA, @R0           ; 送数据到IAP_DATA，只有数据改变时才需重新送
04E3 120476          758         LCALL   F_EEPROM_Trig           ; 触发EEPROM操作
04E6 E5C4            759         MOV     A, IAP_ADDRL            ;地址 +1
04E8 2401            760         ADD     A, #1
04EA F5C4            761         MOV     IAP_ADDRL, A
04EC E5C3            762         MOV     A, IAP_ADDRH
04EE 3400            763         ADDC    A, #0
04F0 F5C3            764         MOV     IAP_ADDRH, A
04F2 08              765         INC     R0
04F3 DAEC            766         DJNZ    R2, L_EE_W_Loop
                     767     
04F5 D000            768         POP     AR0
04F7 AA34            769         MOV     R2, length              ; 写入后比较
04F9 8532C3          770         MOV     IAP_ADDRH, address_H    ; 送地址高字节（地址需要改变时才需重新送地址）
04FC 8533C4          771         MOV     IAP_ADDRL, address_L    ; 送地址低字节
04FF 75C780          772         MOV     IAP_CONTR, #IAP_EN      ; 允许ISP/IAP操作，送一次就够
0502 75F516          773             MOV     IAP_TPS, #TPS_WAIT      ; 设置等待时间，
0505 75C501          774         MOV     IAP_CMD, #1     ; ISP读出命令送字节读命令，命令不需改变时，不需重新送命令
0508                 775     L_EE_Compare_Loop:
0508 120476          776         LCALL   F_EEPROM_Trig           ; 触发EEPROM操作
050B E5C2            777         MOV     A, IAP_DATA
050D 66              778         XRL     A, @R0
050E 7017            779         JNZ     L_EE_CompareErr
                     780     
0510 E5C4            781         MOV     A, IAP_ADDRL    ;
0512 2401            782         ADD     A, #1
0514 F5C4            783         MOV     IAP_ADDRL, A
0516 E5C3            784         MOV     A, IAP_ADDRH
0518 3400            785         ADDC    A, #0
051A F5C3            786         MOV     IAP_ADDRH, A
051C 08              787         INC     R0
051D DAE9            788         DJNZ    R2, L_EE_Compare_Loop
                     789     
051F 120466          790         LCALL   F_DisableEEPROM
0522 C2D5            791         CLR     F0
0524 D002            792         POP     AR2
0526 22              793         RET
                     794     
0527                 795     L_EE_CompareErr:
0527 120466          796         LCALL   F_DisableEEPROM
052A D2D5            797         SETB    F0
A51 MACRO ASSEMBLER  UART_EEPROM                                                          03/09/2021 16:01:03 PAGE    14

052C D002            798         POP     AR2
052E 22              799         RET
                     800     
                     801     
                     802         END
                             
A51 MACRO ASSEMBLER  UART_EEPROM                                                          03/09/2021 16:01:03 PAGE    15

SYMBOL TABLE LISTING
------ ----- -------


N A M E                  T Y P E  V A L U E   ATTRIBUTES

ACC . . . . . . . . . .  D ADDR   00E0H   A   
ADDRESS_H . . . . . . .  D ADDR   0032H   A   
ADDRESS_L . . . . . . .  D ADDR   0033H   A   
AR0 . . . . . . . . . .  D ADDR   0000H   A   
AR2 . . . . . . . . . .  D ADDR   0002H   A   
AR3 . . . . . . . . . .  D ADDR   0003H   A   
AR4 . . . . . . . . . .  D ADDR   0004H   A   
AUXR. . . . . . . . . .  D ADDR   008EH   A   
B . . . . . . . . . . .  D ADDR   00F0H   A   
B_TX1_BUSY. . . . . . .  B ADDR   0020H.0 A   
DPH . . . . . . . . . .  D ADDR   0083H   A   
DPL . . . . . . . . . .  D ADDR   0082H   A   
EA. . . . . . . . . . .  B ADDR   00A8H.7 A   
ES. . . . . . . . . . .  B ADDR   00A8H.4 A   
ET1 . . . . . . . . . .  B ADDR   00A8H.3 A   
F0. . . . . . . . . . .  B ADDR   00D0H.5 A   
FOSC_KHZ. . . . . . . .  N NUMB   5666H   A   
F_CHECKDATA . . . . . .  C ADDR   022FH   A   
F_CHECKNUMBER . . . . .  C ADDR   029AH   A   
F_DELAY_MS. . . . . . .  C ADDR   0449H   A   
F_DISABLEEEPROM . . . .  C ADDR   0466H   A   
F_EEPROM_READ_N . . . .  C ADDR   0489H   A   
F_EEPROM_SECTORERASE. .  C ADDR   04B6H   A   
F_EEPROM_TRIG . . . . .  C ADDR   0476H   A   
F_EEPROM_WRITE_N. . . .  C ADDR   04CCH   A   
F_GETADDRESS. . . . . .  C ADDR   0256H   A   
F_GETREADDATALENGTH . .  C ADDR   02B0H   A   
F_MAIN. . . . . . . . .  C ADDR   0100H   A   
F_SENDBYTE. . . . . . .  C ADDR   03B0H   A   
F_SENDSTRING1 . . . . .  C ADDR   03B8H   A   
F_SETTIMER2BAUDRAYE . .  C ADDR   03C3H   A   
F_UART1_CONFIG. . . . .  C ADDR   03D9H   A   
F_UART1_INTERRUPT . . .  C ADDR   041CH   A   
IAP_ADDRH . . . . . . .  D ADDR   00C3H   A   
IAP_ADDRL . . . . . . .  D ADDR   00C4H   A   
IAP_CMD . . . . . . . .  D ADDR   00C5H   A   
IAP_CMD_FAIL. . . . . .  N NUMB   0010H   A   
IAP_CONTR . . . . . . .  D ADDR   00C7H   A   
IAP_DATA. . . . . . . .  D ADDR   00C2H   A   
IAP_EN. . . . . . . . .  N NUMB   0080H   A   
IAP_SWBS. . . . . . . .  N NUMB   0040H   A   
IAP_SWRST . . . . . . .  N NUMB   0020H   A   
IAP_TPS . . . . . . . .  D ADDR   00F5H   A   
IAP_TRIG. . . . . . . .  D ADDR   00C6H   A   
IE2 . . . . . . . . . .  D ADDR   00AFH   A   
INT_CLKO. . . . . . . .  D ADDR   008FH   A   
LENGTH. . . . . . . . .  D ADDR   0034H   A   
L_ADDRERROR . . . . . .  C ADDR   0297H   A   
L_ADDRNOTEMPTY. . . . .  C ADDR   021BH   A   
L_CALCULATEADDR . . . .  C ADDR   016EH   A   
L_CHECKCHARLOOP . . . .  C ADDR   0155H   A   
L_CHECKDATACHAR . . . .  C ADDR   0242H   A   
L_CHECKDATAERR. . . . .  C ADDR   0253H   A   
L_CHECKLARGETHAN_Z. . .  C ADDR   0165H   A   
L_CHECKLESSTHAN_A . . .  C ADDR   0165H   A   
L_CHECKNUMBERERR. . . .  C ADDR   02ADH   A   
L_CMD_NOT_R . . . . . .  C ADDR   01D2H   A   
L_CMD_NOT_W . . . . . .  C ADDR   0223H   A   
L_DELAY_MS_1. . . . . .  C ADDR   0450H   A   
L_DELAY_MS_2. . . . . .  C ADDR   0454H   A   
A51 MACRO ASSEMBLER  UART_EEPROM                                                          03/09/2021 16:01:03 PAGE    16

L_DELAY_MS_3. . . . . .  C ADDR   0459H   A   
L_EE_COMPAREERR . . . .  C ADDR   0527H   A   
L_EE_COMPARE_LOOP . . .  C ADDR   0508H   A   
L_EE_READ_LOOP. . . . .  C ADDR   049CH   A   
L_EE_W_LOOP . . . . . .  C ADDR   04E1H   A   
L_GETREADDATALENGTHERR.  C ADDR   02D3H   A   
L_GETREADDATALENGTHLOOP  C ADDR   02B9H   A   
L_JUMP_PROCESSERR . . .  C ADDR   016BH   A   
L_MAINLOOP. . . . . . .  C ADDR   0140H   A   
L_QUITRX1PROCESS. . . .  C ADDR   0229H   A   
L_QUITUARTRX. . . . . .  C ADDR   043BH   A   
L_QUITUARTTX. . . . . .  C ADDR   0442H   A   
L_RX1PROCESSERR . . . .  C ADDR   0223H   A   
L_SENDEND1. . . . . . .  C ADDR   03C2H   A   
L_SETUPUART1. . . . . .  C ADDR   0402H   A   
L_TXDATALOOP. . . . . .  C ADDR   01BEH   A   
L_UART1NOTUSETIMER2 . .  C ADDR   03E7H   A   
L_WRITEERROR. . . . . .  C ADDR   0213H   A   
P0M0. . . . . . . . . .  D ADDR   0094H   A   
P0M1. . . . . . . . . .  D ADDR   0093H   A   
P1M0. . . . . . . . . .  D ADDR   0092H   A   
P1M1. . . . . . . . . .  D ADDR   0091H   A   
P2M0. . . . . . . . . .  D ADDR   0096H   A   
P2M1. . . . . . . . . .  D ADDR   0095H   A   
P3M0. . . . . . . . . .  D ADDR   00B2H   A   
P3M1. . . . . . . . . .  D ADDR   00B1H   A   
P4M0. . . . . . . . . .  D ADDR   00B4H   A   
P4M1. . . . . . . . . .  D ADDR   00B3H   A   
P5M0. . . . . . . . . .  D ADDR   00CAH   A   
P5M1. . . . . . . . . .  D ADDR   00C9H   A   
P6M0. . . . . . . . . .  D ADDR   00CCH   A   
P6M1. . . . . . . . . .  D ADDR   00CBH   A   
P7M0. . . . . . . . . .  D ADDR   00E2H   A   
P7M1. . . . . . . . . .  D ADDR   00E1H   A   
PSW . . . . . . . . . .  D ADDR   00D0H   A   
P_SW1 . . . . . . . . .  D ADDR   00A2H   A   
REN . . . . . . . . . .  B ADDR   0098H.4 A   
RI. . . . . . . . . . .  B ADDR   0098H.0 A   
RX1_BUFFER. . . . . . .  D ADDR   0040H   A   
RX1_CNT . . . . . . . .  D ADDR   0031H   A   
RX1_LENTH . . . . . . .  N NUMB   0020H   A   
RX1_TIMEOUT . . . . . .  D ADDR   0035H   A   
SBUF. . . . . . . . . .  D ADDR   0099H   A   
SCON. . . . . . . . . .  D ADDR   0098H   A   
SP. . . . . . . . . . .  D ADDR   0081H   A   
STACK_POIRTER . . . . .  N NUMB   00D0H   A   
T2H . . . . . . . . . .  D ADDR   00D6H   A   
T2L . . . . . . . . . .  D ADDR   00D7H   A   
TESTSTRING1 . . . . . .  C ADDR   02D4H   A   
TESTSTRING1A. . . . . .  C ADDR   02FAH   A   
TESTSTRING1B. . . . . .  C ADDR   0335H   A   
TESTSTRING2 . . . . . .  C ADDR   036EH   A   
TESTSTRING3 . . . . . .  C ADDR   0373H   A   
TESTSTRING4 . . . . . .  C ADDR   0385H   A   
TESTSTRING5 . . . . . .  C ADDR   038CH   A   
TESTSTRING6 . . . . . .  C ADDR   0398H   A   
TESTSTRING7 . . . . . .  C ADDR   03A4H   A   
TH1 . . . . . . . . . .  D ADDR   008DH   A   
TI. . . . . . . . . . .  B ADDR   0098H.1 A   
TL1 . . . . . . . . . .  D ADDR   008BH   A   
TMOD. . . . . . . . . .  D ADDR   0089H   A   
TMP . . . . . . . . . .  D ADDR   0060H   A   
TPS_WAIT. . . . . . . .  N NUMB   0016H   A   
TR1 . . . . . . . . . .  B ADDR   0088H.6 A   
TX1_CNT . . . . . . . .  D ADDR   0030H   A   
UART1_BAUDRATE. . . . .  N NUMB   FFD0H   A   
A51 MACRO ASSEMBLER  UART_EEPROM                                                          03/09/2021 16:01:03 PAGE    17



REGISTER BANK(S) USED: 0 


ASSEMBLY COMPLETE.  0 WARNING(S), 0 ERROR(S)
