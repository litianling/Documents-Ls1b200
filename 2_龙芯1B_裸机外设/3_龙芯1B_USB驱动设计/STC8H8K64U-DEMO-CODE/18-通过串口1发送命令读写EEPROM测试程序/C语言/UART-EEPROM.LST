C51 COMPILER V9.59.0.0   UART_EEPROM                                                       03/09/2021 16:00:34 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE UART_EEPROM
OBJECT MODULE PLACED IN UART-EEPROM.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE UART-EEPROM.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          /*---------------------------------------------------------------------*/
   2          /* --- STC MCU Limited ------------------------------------------------*/
   3          /* --- STC 1T Series MCU Demo Programme -------------------------------*/
   4          /* --- Mobile: (86)13922805190 ----------------------------------------*/
   5          /* --- Fax: 86-0513-55012956,55012947,55012969 ------------------------*/
   6          /* --- Tel: 86-0513-55012928,55012929,55012966 ------------------------*/
   7          /* --- Web: www.STCMCU.com --------------------------------------------*/
   8          /* --- Web: www.STCMCUDATA.com  ---------------------------------------*/
   9          /* --- QQ:  800003751 -------------------------------------------------*/
  10          /* 如果要在程序中使用此代码,请在程序中注明使用了STC的资料及程序        */
  11          /*---------------------------------------------------------------------*/
  12          
  13          
  14          /*************  本程序功能说明  **************
  15          
  16          本例程基于STC8H8K64U为主控芯片的实验箱8进行编写测试，STC8G、STC8H系列芯片可通用参考.
  17          
  18          通过串口对STC内部自带的EEPROM(FLASH)进行读写测试。
  19          
  20          对FLASH做扇区擦除、写入、读出的操作，命令指定地址。
  21          
  22          默认波特率:  115200,8,N,1. 
  23          默认主时钟:  22.1184MHz.
  24          
  25          串口命令设置: (命令字母不区分大小写)
  26              W 0x0040 1234567890  --> 对0x0040地址写入字符1234567890.
  27              R 0x0040 10          --> 对0x0040地址读出10个字节数据. 
  28          
  29          注意：下载时，下载界面"硬件选项"中设置用户EEPROM大小，
  30          
  31          并确保串口命令中的地址在EEPROM设置的大小范围之内。
  32          
  33          ******************************************/
  34          
  35          #include    "reg51.h"       //包含此头文件后，里面声明的寄存器不需要再手动输入，避免重复定义
  36          #include    "intrins.h"
  37          
  38          #define     MAIN_Fosc       22118400L   //定义主时钟（精确计算115200波特率）
  39          
  40          typedef     unsigned char   u8;
  41          typedef     unsigned int    u16;
  42          typedef     unsigned long   u32;
  43          
  44          //手动输入声明"reg51.h"头文件里面没有定义的寄存器
  45          sfr TH2  = 0xD6;
  46          sfr TL2  = 0xD7;
  47          sfr IE2   = 0xAF;
  48          sfr INT_CLKO = 0x8F;
  49          sfr AUXR = 0x8E;
  50          sfr AUXR1 = 0xA2;
  51          sfr P_SW1 = 0xA2;
  52          sfr P_SW2 = 0xBA;
  53          
  54          sfr IAP_DATA  = 0xC2;
  55          sfr IAP_ADDRH = 0xC3;
C51 COMPILER V9.59.0.0   UART_EEPROM                                                       03/09/2021 16:00:34 PAGE 2   

  56          sfr IAP_ADDRL = 0xC4;
  57          sfr IAP_CMD   = 0xC5;
  58          sfr IAP_TRIG  = 0xC6;
  59          sfr IAP_CONTR = 0xC7;
  60          sfr IAP_TPS   = 0xF5;
  61          
  62          sfr P4   = 0xC0;
  63          sfr P5   = 0xC8;
  64          sfr P6   = 0xE8;
  65          sfr P7   = 0xF8;
  66          sfr P1M1 = 0x91;    //PxM1.n,PxM0.n     =00--->Standard,    01--->push-pull
  67          sfr P1M0 = 0x92;    //                  =10--->pure input,  11--->open drain
  68          sfr P0M1 = 0x93;
  69          sfr P0M0 = 0x94;
  70          sfr P2M1 = 0x95;
  71          sfr P2M0 = 0x96;
  72          sfr P3M1 = 0xB1;
  73          sfr P3M0 = 0xB2;
  74          sfr P4M1 = 0xB3;
  75          sfr P4M0 = 0xB4;
  76          sfr P5M1 = 0xC9;
  77          sfr P5M0 = 0xCA;
  78          sfr P6M1 = 0xCB;
  79          sfr P6M0 = 0xCC;
  80          sfr P7M1 = 0xE1;
  81          sfr P7M0 = 0xE2;
  82          
  83          sbit P00 = P0^0;
  84          sbit P01 = P0^1;
  85          sbit P02 = P0^2;
  86          sbit P03 = P0^3;
  87          sbit P04 = P0^4;
  88          sbit P05 = P0^5;
  89          sbit P06 = P0^6;
  90          sbit P07 = P0^7;
  91          sbit P10 = P1^0;
  92          sbit P11 = P1^1;
  93          sbit P12 = P1^2;
  94          sbit P13 = P1^3;
  95          sbit P14 = P1^4;
  96          sbit P15 = P1^5;
  97          sbit P16 = P1^6;
  98          sbit P17 = P1^7;
  99          sbit P20 = P2^0;
 100          sbit P21 = P2^1;
 101          sbit P22 = P2^2;
 102          sbit P23 = P2^3;
 103          sbit P24 = P2^4;
 104          sbit P25 = P2^5;
 105          sbit P26 = P2^6;
 106          sbit P27 = P2^7;
 107          sbit P30 = P3^0;
 108          sbit P31 = P3^1;
 109          sbit P32 = P3^2;
 110          sbit P33 = P3^3;
 111          sbit P34 = P3^4;
 112          sbit P35 = P3^5;
 113          sbit P36 = P3^6;
 114          sbit P37 = P3^7;
 115          sbit P40 = P4^0;
 116          sbit P41 = P4^1;
 117          sbit P42 = P4^2;
C51 COMPILER V9.59.0.0   UART_EEPROM                                                       03/09/2021 16:00:34 PAGE 3   

 118          sbit P43 = P4^3;
 119          sbit P44 = P4^4;
 120          sbit P45 = P4^5;
 121          sbit P46 = P4^6;
 122          sbit P47 = P4^7;
 123          sbit P50 = P5^0;
 124          sbit P51 = P5^1;
 125          sbit P52 = P5^2;
 126          sbit P53 = P5^3;
 127          sbit P54 = P5^4;
 128          sbit P55 = P5^5;
 129          sbit P56 = P5^6;
 130          sbit P57 = P5^7;
 131          
 132          
 133          #define     Baudrate1           115200L
 134          #define     Tmp_Length          100      //读写EEPROM缓冲长度
 135          
 136          #define     UART1_BUF_LENGTH    (Tmp_Length+9)  //串口缓冲长度
 137          
 138          u8  RX1_TimeOut;
 139          u8  TX1_Cnt;    //发送计数
 140          u8  RX1_Cnt;    //接收计数
 141          bit B_TX1_Busy; //发送忙标志
 142          
 143          u8  xdata   RX1_Buffer[UART1_BUF_LENGTH];   //接收缓冲
 144          u8  xdata   tmp[Tmp_Length];        //EEPROM操作缓冲
 145          
 146          
 147          void    UART1_config(u8 brt);   // 选择波特率, 2: 使用Timer2做波特率, 其它值: 使用Timer1做波特率.
 148          void    PrintString1(u8 *puts);
 149          void    UART1_TxByte(u8 dat);
 150          void    delay_ms(u8 ms);
 151          u8      CheckData(u8 dat);
 152          u16     GetAddress(void);
 153          u8      GetDataLength(void);
 154          void    EEPROM_SectorErase(u16 EE_address);
 155          void    EEPROM_read_n(u16 EE_address,u8 *DataAddress,u8 length);
 156          u8      EEPROM_write_n(u16 EE_address,u8 *DataAddress,u8 length);
 157          
 158          
 159          /********************* 主函数 *************************/
 160          void main(void)
 161          {
 162   1          u8  i,j;
 163   1          u16 addr;
 164   1          u8  status;
 165   1      
 166   1          P0M1 = 0;   P0M0 = 0;   //设置为准双向口
 167   1          P1M1 = 0;   P1M0 = 0;   //设置为准双向口
 168   1          P2M1 = 0;   P2M0 = 0;   //设置为准双向口
 169   1          P3M1 = 0;   P3M0 = 0;   //设置为准双向口
 170   1          P4M1 = 0;   P4M0 = 0;   //设置为准双向口
 171   1          P5M1 = 0;   P5M0 = 0;   //设置为准双向口
 172   1          P6M1 = 0;   P6M0 = 0;   //设置为准双向口
 173   1          P7M1 = 0;   P7M0 = 0;   //设置为准双向口
 174   1      
 175   1          UART1_config(1);    // 选择波特率, 2: 使用Timer2做波特率, 其它值: 使用Timer1做波特率.
 176   1          EA = 1; //允许总中断
 177   1      
 178   1          PrintString1("STC8H8K64U系列单片机EEPROM测试程序，串口命令设置如下:\r\n");    //UART1发送一个字符串
 179   1          PrintString1("W 0x0040 1234567890  --> 对0x0040地址写入字符1234567890.\r\n");   //UART1发送一个字符串
C51 COMPILER V9.59.0.0   UART_EEPROM                                                       03/09/2021 16:00:34 PAGE 4   

 180   1          PrintString1("R 0x0040 10          --> 对0x0040地址读出10个字节内容.\r\n"); //UART1发送一个字符串
 181   1      
 182   1          while(1)
 183   1          {
 184   2              delay_ms(1);
 185   2              if(RX1_TimeOut > 0)     //超时计数
 186   2              {
 187   3                  if(--RX1_TimeOut == 0)
 188   3                  {
 189   4                    for(i=0; i<RX1_Cnt; i++)    UART1_TxByte(RX1_Buffer[i]);    //把收到的数据原样返回,用于测试
 190   4      
 191   4                      status = 0xff;  //状态给一个非0值
 192   4                      if((RX1_Cnt >= 10) && (RX1_Buffer[1] == ' ') && (RX1_Buffer[8] == ' ')) //最短命令为10个字
             -节
 193   4                      {
 194   5                          for(i=0; i<8; i++)
 195   5                          {
 196   6                              if((RX1_Buffer[i] >= 'a') && (RX1_Buffer[i] <= 'z'))    RX1_Buffer[i] = RX1_Buffer
             -[i] - 'a' + 'A';  //小写转大写
 197   6                          }
 198   5                          addr = GetAddress();
 199   5                          if(addr < 63488)    //限制在0~123扇区
 200   5                          {
 201   6                              if(RX1_Buffer[0] == 'W')    //写入N个字节
 202   6                              {
 203   7                                  j = RX1_Cnt - 9;
 204   7                                  if(j > Tmp_Length)  j = Tmp_Length; //越界检测
 205   7                                  EEPROM_SectorErase(addr);           //擦除扇区
 206   7                                  i = EEPROM_write_n(addr,&RX1_Buffer[9],j);      //写N个字节
 207   7                                  if(i == 0)
 208   7                                  {
 209   8                                      PrintString1("已写入");
 210   8                                      if(j >= 100)    {UART1_TxByte(j/100+'0');   j = j % 100;}
 211   8                                      if(j >= 10)     {UART1_TxByte(j/10+'0');    j = j % 10;}
 212   8                                      UART1_TxByte(j%10+'0');
 213   8                                      PrintString1("字节！\r\n");
 214   8                                  }
 215   7                                  else    PrintString1("写入错误！\r\n");
 216   7                                  status = 0; //命令正确
 217   7                              }
 218   6      
 219   6                              else if(RX1_Buffer[0] == 'R')   //PC请求返回N字节EEPROM数据
 220   6                              {
 221   7                                  j = GetDataLength();
 222   7                                  if(j > Tmp_Length)  j = Tmp_Length; //越界检测
 223   7                                  if(j > 0)
 224   7                                  {
 225   8                                      PrintString1("读出");
 226   8                                      UART1_TxByte(j/10+'0');
 227   8                                      UART1_TxByte(j%10+'0');
 228   8                                      PrintString1("个字节内容如下：\r\n");
 229   8                                      EEPROM_read_n(addr,tmp,j);
 230   8                                      for(i=0; i<j; i++)  UART1_TxByte(tmp[i]);
 231   8                                      UART1_TxByte(0x0d);
 232   8                                      UART1_TxByte(0x0a);
 233   8                                      status = 0; //命令正确
 234   8                                  }
 235   7                              }
 236   6                          }
 237   5                      }
 238   4                      if(status != 0) PrintString1("命令错误！\r\n");
 239   4                      RX1_Cnt  = 0;   //清除字节数
C51 COMPILER V9.59.0.0   UART_EEPROM                                                       03/09/2021 16:00:34 PAGE 5   

 240   4                  }
 241   3              }
 242   2          }
 243   1      }
 244          //========================================================================
 245          
 246          
 247          //========================================================================
 248          // 函数: void delay_ms(u8 ms)
 249          // 描述: 延时函数。
 250          // 参数: ms,要延时的ms数, 这里只支持1~255ms. 自动适应主时钟.
 251          // 返回: none.
 252          // 版本: VER1.0
 253          // 日期: 2021-3-9
 254          // 备注: 
 255          //========================================================================
 256          void delay_ms(u8 ms)
 257          {
 258   1           u16 i;
 259   1           do{
 260   2                i = MAIN_Fosc / 10000;
 261   2                while(--i);   //10T per loop
 262   2           }while(--ms);
 263   1      }
 264          
 265          //========================================================================
 266          // 函数: u8 CheckData(u8 dat)
 267          // 描述: 将字符"0~9,A~F或a~f"转成十六进制.
 268          // 参数: dat: 要检测的字符.
 269          // 返回: 0x00~0x0F为正确. 0xFF为错误.
 270          // 版本: V1.0, 2012-10-22
 271          //========================================================================
 272          u8 CheckData(u8 dat)
 273          {
 274   1          if((dat >= '0') && (dat <= '9'))        return (dat-'0');
 275   1          if((dat >= 'A') && (dat <= 'F'))        return (dat-'A'+10);
 276   1          return 0xff;
 277   1      }
 278          
 279          //========================================================================
 280          // 函数: u16    GetAddress(void)
 281          // 描述: 计算各种输入方式的地址.
 282          // 参数: 无.
 283          // 返回: 16位EEPROM地址.
 284          // 版本: V1.0, 2013-6-6
 285          //========================================================================
 286          u16 GetAddress(void)
 287          {
 288   1          u16 address;
 289   1          u8  i,j;
 290   1          
 291   1          address = 0;
 292   1          if((RX1_Buffer[2] == '0') && (RX1_Buffer[3] == 'X'))
 293   1          {
 294   2              for(i=4; i<8; i++)
 295   2              {
 296   3                  j = CheckData(RX1_Buffer[i]);
 297   3                  if(j >= 0x10)   return 65535;   //error
 298   3                  address = (address << 4) + j;
 299   3              }
 300   2              return (address);
 301   2          }
C51 COMPILER V9.59.0.0   UART_EEPROM                                                       03/09/2021 16:00:34 PAGE 6   

 302   1          return  65535;  //error
 303   1      }
 304          
 305          /**************** 获取要读出数据的字节数 ****************************/
 306          u8 GetDataLength(void)
 307          {
 308   1          u8  i;
 309   1          u8  length;
 310   1          
 311   1          length = 0;
 312   1          for(i=9; i<RX1_Cnt; i++)
 313   1          {
 314   2              if(CheckData(RX1_Buffer[i]) >= 10)  break;
 315   2              length = length * 10 + CheckData(RX1_Buffer[i]);
 316   2          }
 317   1          return (length);
 318   1      }
 319          
 320          
 321          //========================================================================
 322          // 函数: void PrintString1(u8 *puts)
 323          // 描述: 串口1发送字符串函数。
 324          // 参数: puts:  字符串指针.
 325          // 返回: none.
 326          // 版本: VER1.0
 327          // 日期: 2014-11-28
 328          // 备注: 
 329          //========================================================================
 330          void PrintString1(u8 *puts) //发送一个字符串
 331          {
 332   1          for (; *puts != 0;  puts++) UART1_TxByte(*puts);    //遇到停止符0结束
 333   1      }
 334          
 335          //========================================================================
 336          // 函数: void SetTimer2Baudraye(u16 dat)
 337          // 描述: 设置Timer2做波特率发生器。
 338          // 参数: dat: Timer2的重装值.
 339          // 返回: none.
 340          // 版本: VER1.0
 341          // 日期: 2014-11-28
 342          // 备注: 
 343          //========================================================================
 344          void SetTimer2Baudraye(u16 dat)  // 选择波特率, 2: 使用Timer2做波特率, 其它值: 使用Timer1做波特率.
 345          {
 346   1          AUXR &= ~(1<<4);    //Timer stop
 347   1          AUXR &= ~(1<<3);    //Timer2 set As Timer
 348   1          AUXR |=  (1<<2);    //Timer2 set as 1T mode
 349   1          TH2 = dat / 256;
 350   1          TL2 = dat % 256;
 351   1          IE2  &= ~(1<<2);    //禁止中断
 352   1          AUXR |=  (1<<4);    //Timer run enable
 353   1      }
 354          
 355          //========================================================================
 356          // 函数: void UART1_config(u8 brt)
 357          // 描述: UART1初始化函数。
 358          // 参数: brt: 选择波特率, 2: 使用Timer2做波特率, 其它值: 使用Timer1做波特率.
 359          // 返回: none.
 360          // 版本: VER1.0
 361          // 日期: 2014-11-28
 362          // 备注: 
 363          //========================================================================
C51 COMPILER V9.59.0.0   UART_EEPROM                                                       03/09/2021 16:00:34 PAGE 7   

 364          void UART1_config(u8 brt)    // 选择波特率, 2: 使用Timer2做波特率, 其它值: 使用Timer1做波特率.
 365          {
 366   1          /*********** 波特率使用定时器2 *****************/
 367   1          if(brt == 2)
 368   1          {
 369   2              AUXR |= 0x01;       //S1 BRT Use Timer2;
 370   2              SetTimer2Baudraye(65536UL - (MAIN_Fosc / 4) / Baudrate1);
 371   2          }
 372   1          /*********** 波特率使用定时器1 *****************/
 373   1          else
 374   1          {
 375   2              TR1 = 0;
 376   2              AUXR &= ~0x01;      //S1 BRT Use Timer1;
 377   2              AUXR |=  (1<<6);    //Timer1 set as 1T mode
 378   2              TMOD &= ~(1<<6);    //Timer1 set As Timer
 379   2              TMOD &= ~0x30;      //Timer1_16bitAutoReload;
 380   2              TH1 = (u8)((65536UL - (MAIN_Fosc / 4) / Baudrate1) / 256);
 381   2              TL1 = (u8)((65536UL - (MAIN_Fosc / 4) / Baudrate1) % 256);
 382   2              ET1 = 0;    //禁止中断
 383   2              INT_CLKO &= ~0x02;  //不输出时钟
 384   2              TR1  = 1;
 385   2          }
 386   1          /*************************************************/
 387   1      
 388   1          SCON = (SCON & 0x3f) | 0x40;    //UART1模式, 0x00: 同步移位输出, 0x40: 8位数据,可变波特率, 0x80: 9位数
             -据,固定波特率, 0xc0: 9位数据,可变波特率
 389   1      //  PS  = 1;    //高优先级中断
 390   1          ES  = 1;    //允许中断
 391   1          REN = 1;    //允许接收
 392   1          P_SW1 &= 0x3f;
 393   1          P_SW1 |= 0x00;      //UART1 switch to, 0x00: P3.0 P3.1, 0x40: P3.6 P3.7, 0x80: P1.6 P1.7, 0xC0: P4.3 P
             -4.4
 394   1      //  PCON2 |=  (1<<4);   //内部短路RXD与TXD, 做中继, ENABLE,DISABLE
 395   1      
 396   1          B_TX1_Busy = 0;
 397   1          TX1_Cnt = 0;
 398   1          RX1_Cnt = 0;
 399   1          RX1_TimeOut = 0;
 400   1      }
 401          
 402          
 403          //========================================================================
 404          // 函数: void UART1_TxByte(u8 dat)
 405          // 描述: 发送一个字节.
 406          // 参数: 无.
 407          // 返回: 无.
 408          // 版本: V1.0, 2014-6-30
 409          //========================================================================
 410          void UART1_TxByte(u8 dat)
 411          {
 412   1          SBUF = dat;
 413   1          B_TX1_Busy = 1;
 414   1          while(B_TX1_Busy);
 415   1      }
 416          
 417          
 418          //========================================================================
 419          // 函数: void UART1_int (void) interrupt UART1_VECTOR
 420          // 描述: UART1中断函数。
 421          // 参数: nine.
 422          // 返回: none.
 423          // 版本: VER1.0
C51 COMPILER V9.59.0.0   UART_EEPROM                                                       03/09/2021 16:00:34 PAGE 8   

 424          // 日期: 2014-11-28
 425          // 备注: 
 426          //========================================================================
 427          void UART1_int (void) interrupt 4
 428          {
 429   1          if(RI)
 430   1          {
 431   2              RI = 0;
 432   2              if(RX1_Cnt >= UART1_BUF_LENGTH) RX1_Cnt = 0;
 433   2              RX1_Buffer[RX1_Cnt] = SBUF;
 434   2              RX1_Cnt++;
 435   2              RX1_TimeOut = 5;
 436   2          }
 437   1      
 438   1          if(TI)
 439   1          {
 440   2              TI = 0;
 441   2              B_TX1_Busy = 0;
 442   2          }
 443   1      }
 444          
 445          
 446          #define     IAP_STANDBY()   IAP_CMD = 0     //IAP空闲命令（禁止）
 447          #define     IAP_READ()      IAP_CMD = 1     //IAP读出命令
 448          #define     IAP_WRITE()     IAP_CMD = 2     //IAP写入命令
 449          #define     IAP_ERASE()     IAP_CMD = 3     //IAP擦除命令
 450          
 451          #define     IAP_ENABLE()    IAP_CONTR = IAP_EN; IAP_TPS = MAIN_Fosc / 1000000
 452          #define     IAP_DISABLE()   IAP_CONTR = 0; IAP_CMD = 0; IAP_TRIG = 0; IAP_ADDRH = 0xff; IAP_ADDRL = 0xff
 453          
 454          #define IAP_EN          (1<<7)
 455          #define IAP_SWBS        (1<<6)
 456          #define IAP_SWRST       (1<<5)
 457          #define IAP_CMD_FAIL    (1<<4)
 458          
 459          
 460          //========================================================================
 461          // 函数: void DisableEEPROM(void)
 462          // 描述: 禁止EEPROM.
 463          // 参数: none.
 464          // 返回: none.
 465          // 版本: V1.0, 2014-6-30
 466          //========================================================================
 467          void DisableEEPROM(void)        //禁止访问EEPROM
 468          {
 469   1          IAP_CONTR = 0;          //关闭 IAP 功能
 470   1          IAP_CMD = 0;            //清除命令寄存器
 471   1          IAP_TRIG = 0;           //清除触发寄存器
 472   1          IAP_ADDRH = 0xff;       //将地址设置到非 IAP 区域
 473   1          IAP_ADDRL = 0xff;
 474   1      }
 475          
 476          //========================================================================
 477          // 函数: void EEPROM_Trig(void)
 478          // 描述: 触发EEPROM操作.
 479          // 参数: none.
 480          // 返回: none.
 481          // 版本: V1.0, 2014-6-30
 482          //========================================================================
 483          void EEPROM_Trig(void)
 484          {
 485   1          F0 = EA;    //保存全局中断
C51 COMPILER V9.59.0.0   UART_EEPROM                                                       03/09/2021 16:00:34 PAGE 9   

 486   1          EA = 0;     //禁止中断, 避免触发命令无效
 487   1          IAP_TRIG = 0x5A;
 488   1          IAP_TRIG = 0xA5;                    //先送5AH，再送A5H到IAP触发寄存器，每次都需要如此
 489   1                                              //送完A5H后，IAP命令立即被触发启动
 490   1                                              //CPU等待IAP完成后，才会继续执行程序。
 491   1          _nop_();
 492   1          _nop_();
 493   1          EA = F0;    //恢复全局中断
 494   1      }
 495          
 496          //========================================================================
 497          // 函数: void EEPROM_SectorErase(u16 EE_address)
 498          // 描述: 擦除一个扇区.
 499          // 参数: EE_address:  要擦除的EEPROM的扇区中的一个字节地址.
 500          // 返回: none.
 501          // 版本: V1.0, 2014-6-30
 502          //========================================================================
 503          void EEPROM_SectorErase(u16 EE_address)
 504          {
 505   1          IAP_ENABLE();                       //设置等待时间，允许IAP操作，送一次就够
 506   1          IAP_ERASE();                        //宏调用, 送扇区擦除命令，命令不需改变时，不需重新送命令
 507   1                                              //只有扇区擦除，没有字节擦除，512字节/扇区。
 508   1                                              //扇区中任意一个字节地址都是扇区地址。
 509   1          IAP_ADDRH = EE_address / 256;       //送扇区地址高字节（地址需要改变时才需重新送地址）
 510   1          IAP_ADDRL = EE_address % 256;       //送扇区地址低字节
 511   1          EEPROM_Trig();                      //触发EEPROM操作
 512   1          DisableEEPROM();                    //禁止EEPROM操作
 513   1      }
 514          
 515          //========================================================================
 516          // 函数: void EEPROM_read_n(u16 EE_address,u8 *DataAddress,u8 lenth)
 517          // 描述: 读N个字节函数.
 518          // 参数: EE_address:  要读出的EEPROM的首地址.
 519          //       DataAddress: 要读出数据的指针.
 520          //       length:      要读出的长度
 521          // 返回: 0: 写入正确.  1: 写入长度为0错误.  2: 写入数据错误.
 522          // 版本: V1.0, 2014-6-30
 523          //========================================================================
 524          void EEPROM_read_n(u16 EE_address,u8 *DataAddress,u8 length)
 525          {
 526   1          IAP_ENABLE();                           //设置等待时间，允许IAP操作，送一次就够
 527   1          IAP_READ();                             //送字节读命令，命令不需改变时，不需重新送命令
 528   1          do
 529   1          {
 530   2              IAP_ADDRH = EE_address / 256;       //送地址高字节（地址需要改变时才需重新送地址）
 531   2              IAP_ADDRL = EE_address % 256;       //送地址低字节
 532   2              EEPROM_Trig();                      //触发EEPROM操作
 533   2              *DataAddress = IAP_DATA;            //读出的数据送往
 534   2              EE_address++;
 535   2              DataAddress++;
 536   2          }while(--length);
 537   1      
 538   1          DisableEEPROM();
 539   1      }
 540          
 541          
 542          //========================================================================
 543          // 函数: u8 EEPROM_write_n(u16 EE_address,u8 *DataAddress,u8 length)
 544          // 描述: 写N个字节函数.
 545          // 参数: EE_address:  要写入的EEPROM的首地址.
 546          //       DataAddress: 要写入数据的指针.
 547          //       length:      要写入的长度
C51 COMPILER V9.59.0.0   UART_EEPROM                                                       03/09/2021 16:00:34 PAGE 10  

 548          // 返回: 0: 写入正确.  1: 写入长度为0错误.  2: 写入数据错误.
 549          // 版本: V1.0, 2014-6-30
 550          //========================================================================
 551          u8 EEPROM_write_n(u16 EE_address,u8 *DataAddress,u8 length)
 552          {
 553   1          u8  i;
 554   1          u16 j;
 555   1          u8  *p;
 556   1          
 557   1          if(length == 0) return 1;   //长度为0错误
 558   1      
 559   1          IAP_ENABLE();                       //设置等待时间，允许IAP操作，送一次就够
 560   1          i = length;
 561   1          j = EE_address;
 562   1          p = DataAddress;
 563   1          IAP_WRITE();                            //宏调用, 送字节写命令
 564   1          do
 565   1          {
 566   2              IAP_ADDRH = EE_address / 256;       //送地址高字节（地址需要改变时才需重新送地址）
 567   2              IAP_ADDRL = EE_address % 256;       //送地址低字节
 568   2              IAP_DATA  = *DataAddress;           //送数据到IAP_DATA，只有数据改变时才需重新送
 569   2              EEPROM_Trig();                      //触发EEPROM操作
 570   2              EE_address++;                       //下一个地址
 571   2              DataAddress++;                      //下一个数据
 572   2          }while(--length);                       //直到结束
 573   1      
 574   1          EE_address = j;
 575   1          length = i;
 576   1          DataAddress = p;
 577   1          i = 0;
 578   1          IAP_READ();                             //读N个字节并比较
 579   1          do
 580   1          {
 581   2              IAP_ADDRH = EE_address / 256;       //送地址高字节（地址需要改变时才需重新送地址）
 582   2              IAP_ADDRL = EE_address % 256;       //送地址低字节
 583   2              EEPROM_Trig();                      //触发EEPROM操作
 584   2              if(*DataAddress != IAP_DATA)        //读出的数据与源数据比较
 585   2              {
 586   3                  i = 2;
 587   3                  break;
 588   3              }
 589   2              EE_address++;
 590   2              DataAddress++;
 591   2          }while(--length);
 592   1      
 593   1          DisableEEPROM();
 594   1          return i;
 595   1      }
 596          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1150    ----
   CONSTANT SIZE    =    238    ----
   XDATA SIZE       =    209    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      3      26
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
