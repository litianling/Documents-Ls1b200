C51 COMPILER V9.59.0.0   LED                                                               03/15/2021 15:16:50 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE LED
OBJECT MODULE PLACED IN LED.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE LED.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          /*---------------------------------------------------------------------*/
   2          /* --- STC MCU Limited ------------------------------------------------*/
   3          /* --- STC 1T Series MCU Demo Programme -------------------------------*/
   4          /* --- Mobile: (86)13922805190 ----------------------------------------*/
   5          /* --- Fax: 86-0513-55012956,55012947,55012969 ------------------------*/
   6          /* --- Tel: 86-0513-55012928,55012929,55012966 ------------------------*/
   7          /* --- Web: www.STCMCU.com --------------------------------------------*/
   8          /* --- Web: www.STCMCUDATA.com  ---------------------------------------*/
   9          /* --- QQ:  800003751 -------------------------------------------------*/
  10          /* 如果要在程序中使用此代码,请在程序中注明使用了STC的资料及程序        */
  11          /*---------------------------------------------------------------------*/
  12          
  13          #include    "reg51.h"       //包含此头文件后，里面声明的寄存器不需要再手动输入，避免重复定义
  14          
  15          #define     MAIN_Fosc       24000000L   //定义主时钟
  16          
  17          /*************  功能说明    **************
  18          
  19          本例程基于STC8H8K64U为主控芯片的实验箱8进行编写测试，STC8G、STC8H系列芯片可通用参考.
  20          
  21          程序使用P6口来演示跑马灯，输出低驱动。
  22          
  23          下载时, 选择时钟 24MHZ (用户可自行修改频率).
  24          
  25          当用户使用硬件 USB 对 STC8H8K64U 系列进行 ISP 下载时不能调节内部 IRC 的频率，
  26          但用户可用选择内部预置的 16 个频率
  27          （分别是 5.5296M、 6M、 11.0592M、 12M、 18.432M、 20M、 22.1184M、 
  28          24M、27M、 30M、 33.1776M、 35M、 36.864M、 40M、 44.2368M 和 48M）。
  29          下载时用户只能从频率下拉列表中进行选择其中之一，而不能手动输入其他频率。
  30          （使用串口下载则可用输入 4M～48M 之间的任意频率）。
  31          
  32          ******************************************/
  33          
  34          typedef     unsigned char   u8;
  35          typedef     unsigned int    u16;
  36          typedef     unsigned long   u32;
  37          
  38          //手动输入声明"reg51.h"头文件里面没有定义的寄存器
  39          sfr P4   = 0xC0;
  40          sfr P5   = 0xC8;
  41          sfr P6   = 0xE8;
  42          sfr P7   = 0xF8;
  43          sfr P1M1 = 0x91;    //PxM1.n,PxM0.n     =00--->Standard,    01--->push-pull
  44          sfr P1M0 = 0x92;    //                  =10--->pure input,  11--->open drain
  45          sfr P0M1 = 0x93;
  46          sfr P0M0 = 0x94;
  47          sfr P2M1 = 0x95;
  48          sfr P2M0 = 0x96;
  49          sfr P3M1 = 0xB1;
  50          sfr P3M0 = 0xB2;
  51          sfr P4M1 = 0xB3;
  52          sfr P4M0 = 0xB4;
  53          sfr P5M1 = 0xC9;
  54          sfr P5M0 = 0xCA;
  55          sfr P6M1 = 0xCB;
C51 COMPILER V9.59.0.0   LED                                                               03/15/2021 15:16:50 PAGE 2   

  56          sfr P6M0 = 0xCC;
  57          sfr P7M1 = 0xE1;
  58          sfr P7M0 = 0xE2;
  59          
  60          sbit P00 = P0^0;
  61          sbit P01 = P0^1;
  62          sbit P02 = P0^2;
  63          sbit P03 = P0^3;
  64          sbit P04 = P0^4;
  65          sbit P05 = P0^5;
  66          sbit P06 = P0^6;
  67          sbit P07 = P0^7;
  68          sbit P10 = P1^0;
  69          sbit P11 = P1^1;
  70          sbit P12 = P1^2;
  71          sbit P13 = P1^3;
  72          sbit P14 = P1^4;
  73          sbit P15 = P1^5;
  74          sbit P16 = P1^6;
  75          sbit P17 = P1^7;
  76          sbit P20 = P2^0;
  77          sbit P21 = P2^1;
  78          sbit P22 = P2^2;
  79          sbit P23 = P2^3;
  80          sbit P24 = P2^4;
  81          sbit P25 = P2^5;
  82          sbit P26 = P2^6;
  83          sbit P27 = P2^7;
  84          sbit P30 = P3^0;
  85          sbit P31 = P3^1;
  86          sbit P32 = P3^2;
  87          sbit P33 = P3^3;
  88          sbit P34 = P3^4;
  89          sbit P35 = P3^5;
  90          sbit P36 = P3^6;
  91          sbit P37 = P3^7;
  92          sbit P40 = P4^0;
  93          sbit P41 = P4^1;
  94          sbit P42 = P4^2;
  95          sbit P43 = P4^3;
  96          sbit P44 = P4^4;
  97          sbit P45 = P4^5;
  98          sbit P46 = P4^6;
  99          sbit P47 = P4^7;
 100          sbit P50 = P5^0;
 101          sbit P51 = P5^1;
 102          sbit P52 = P5^2;
 103          sbit P53 = P5^3;
 104          sbit P54 = P5^4;
 105          sbit P55 = P5^5;
 106          sbit P56 = P5^6;
 107          sbit P57 = P5^7;
 108          
 109          u8 ledIndex;
 110          u8 code ledNum[]={0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80};
 111          
 112          void  delay_ms(u8 ms);
 113          
 114          
 115          /******************** 主函数 **************************/
 116          void main(void)
 117          {
C51 COMPILER V9.59.0.0   LED                                                               03/15/2021 15:16:50 PAGE 3   

 118   1          P0M1 = 0x00;   P0M0 = 0x00;   //设置为准双向口
 119   1          P1M1 = 0x00;   P1M0 = 0x00;   //设置为准双向口
 120   1          P2M1 = 0x00;   P2M0 = 0x00;   //设置为准双向口
 121   1          P3M1 = 0x00;   P3M0 = 0x00;   //设置为准双向口
 122   1          P4M1 = 0x00;   P4M0 = 0x00;   //设置为准双向口
 123   1          P5M1 = 0x00;   P5M0 = 0x00;   //设置为准双向口
 124   1          P6M1 = 0x00;   P6M0 = 0x00;   //设置为准双向口
 125   1          P7M1 = 0x00;   P7M0 = 0x00;   //设置为准双向口
 126   1      
 127   1          P40 = 0;    //LED Power On
 128   1          ledIndex = 0;
 129   1          while(1)
 130   1          {
 131   2              P6 = ~ledNum[ledIndex]; //输出低驱动
 132   2              ledIndex++;
 133   2              if(ledIndex > 7)
 134   2              {
 135   3                  ledIndex = 0;
 136   3              }
 137   2              delay_ms(250);
 138   2              delay_ms(250);
 139   2          }
 140   1      }
 141          
 142          //========================================================================
 143          // 函数: void delay_ms(u8 ms)
 144          // 描述: 延时函数。
 145          // 参数: ms,要延时的ms数, 这里只支持1~255ms. 自动适应主时钟.
 146          // 返回: none.
 147          // 版本: VER1.0
 148          // 日期: 2021-3-9
 149          // 备注: 
 150          //========================================================================
 151          void delay_ms(u8 ms)
 152          {
 153   1           u16 i;
 154   1           do{
 155   2                i = MAIN_Fosc / 10000;
 156   2                while(--i);   //10T per loop
 157   2           }while(--ms);
 158   1      }
 159          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     90    ----
   CONSTANT SIZE    =      8    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      1    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
