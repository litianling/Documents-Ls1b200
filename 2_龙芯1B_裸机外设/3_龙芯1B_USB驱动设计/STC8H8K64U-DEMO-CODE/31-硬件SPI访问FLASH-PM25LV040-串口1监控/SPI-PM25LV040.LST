C51 COMPILER V9.59.0.0   SPI_PM25LV040                                                     02/08/2021 11:37:42 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE SPI_PM25LV040
OBJECT MODULE PLACED IN SPI-PM25LV040.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE SPI-PM25LV040.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          /*---------------------------------------------------------------------*/
   2          /* --- STC MCU Limited ------------------------------------------------*/
   3          /* --- STC 1T Series MCU Demo Programme -------------------------------*/
   4          /* --- Mobile: (86)13922805190 ----------------------------------------*/
   5          /* --- Fax: 86-0513-55012956,55012947,55012969 ------------------------*/
   6          /* --- Tel: 86-0513-55012928,55012929,55012966 ------------------------*/
   7          /* --- Web: www.STCMCU.com --------------------------------------------*/
   8          /* --- Web: www.STCMCUDATA.com  ---------------------------------------*/
   9          /* --- QQ:  800003751 -------------------------------------------------*/
  10          /* 如果要在程序中使用此代码,请在程序中注明使用了STC的资料及程序        */
  11          /*---------------------------------------------------------------------*/
  12          
  13          /*************  功能说明    **************
  14          
  15          通过串口对PM25LV040/W25X40CL/W25Q80BV进行读写测试。
  16          
  17          对FLASH做扇区擦除、写入、读出的操作，命令指定地址。
  18          
  19          默认波特率:  115200,8,N,1. 可以在"串口初始化函数"里修改.
  20          
  21          串口命令设置: (字母不区分大小写)
  22              E 0x001234              --> 扇区擦除，指定十六进制地址.
  23              W 0x001234 1234567890   --> 写入操作，指定十六进制地址，后面为写入内容.
  24              R 0x001234 10           --> 读出操作，指定十六进制地址，后面为读出字节数. 
  25              C                       --> 如果检测不到PM25LV040/W25X40CL/W25Q80BV, 发送C强制允许操作.
  26          
  27          注意：为了通用，程序不识别地址是否有效，用户自己根据具体的型号来决定。
  28          
  29          下载时, 选择时钟 22.1184MHz (用户可自行修改频率).
  30          
  31          ******************************************/
  32          
  33          #include    "reg51.h"
  34          #include    "intrins.h"
  35          
  36          #define     MAIN_Fosc       22118400L   //定义主时钟（精确计算115200波特率）
  37          
  38          typedef     unsigned char   u8;
  39          typedef     unsigned int    u16;
  40          typedef     unsigned long   u32;
  41          
  42          sfr TH2  = 0xD6;
  43          sfr TL2  = 0xD7;
  44          sfr IE2   = 0xAF;
  45          sfr INT_CLKO = 0x8F;
  46          sfr AUXR = 0x8E;
  47          sfr AUXR1 = 0xA2;
  48          sfr P_SW1 = 0xA2;
  49          sfr P_SW2 = 0xBA;
  50          sfr S2CON = 0x9A;
  51          sfr S2BUF = 0x9B;
  52          
  53          sfr SPSTAT = 0xCD;  //
  54          sfr SPCTL  = 0xCE;  //
  55          sfr SPDAT  = 0xCF;  //
C51 COMPILER V9.59.0.0   SPI_PM25LV040                                                     02/08/2021 11:37:42 PAGE 2   

  56          #define SPIF    0x80        //SPI传输完成标志。写入1清0。
  57          #define WCOL    0x40        //SPI写冲突标志。写入1清0。
  58          
  59          sfr P4   = 0xC0;
  60          sfr P5   = 0xC8;
  61          sfr P6   = 0xE8;
  62          sfr P7   = 0xF8;
  63          sfr P1M1 = 0x91;    //PxM1.n,PxM0.n     =00--->Standard,    01--->push-pull
  64          sfr P1M0 = 0x92;    //                  =10--->pure input,  11--->open drain
  65          sfr P0M1 = 0x93;
  66          sfr P0M0 = 0x94;
  67          sfr P2M1 = 0x95;
  68          sfr P2M0 = 0x96;
  69          sfr P3M1 = 0xB1;
  70          sfr P3M0 = 0xB2;
  71          sfr P4M1 = 0xB3;
  72          sfr P4M0 = 0xB4;
  73          sfr P5M1 = 0xC9;
  74          sfr P5M0 = 0xCA;
  75          sfr P6M1 = 0xCB;
  76          sfr P6M0 = 0xCC;
  77          sfr P7M1 = 0xE1;
  78          sfr P7M0 = 0xE2;
  79          
  80          sbit P00 = P0^0;
  81          sbit P01 = P0^1;
  82          sbit P02 = P0^2;
  83          sbit P03 = P0^3;
  84          sbit P04 = P0^4;
  85          sbit P05 = P0^5;
  86          sbit P06 = P0^6;
  87          sbit P07 = P0^7;
  88          sbit P10 = P1^0;
  89          sbit P11 = P1^1;
  90          sbit P12 = P1^2;
  91          sbit P13 = P1^3;
  92          sbit P14 = P1^4;
  93          sbit P15 = P1^5;
  94          sbit P16 = P1^6;
  95          sbit P17 = P1^7;
  96          sbit P20 = P2^0;
  97          sbit P21 = P2^1;
  98          sbit P22 = P2^2;
  99          sbit P23 = P2^3;
 100          sbit P24 = P2^4;
 101          sbit P25 = P2^5;
 102          sbit P26 = P2^6;
 103          sbit P27 = P2^7;
 104          sbit P30 = P3^0;
 105          sbit P31 = P3^1;
 106          sbit P32 = P3^2;
 107          sbit P33 = P3^3;
 108          sbit P34 = P3^4;
 109          sbit P35 = P3^5;
 110          sbit P36 = P3^6;
 111          sbit P37 = P3^7;
 112          sbit P40 = P4^0;
 113          sbit P41 = P4^1;
 114          sbit P42 = P4^2;
 115          sbit P43 = P4^3;
 116          sbit P44 = P4^4;
 117          sbit P45 = P4^5;
C51 COMPILER V9.59.0.0   SPI_PM25LV040                                                     02/08/2021 11:37:42 PAGE 3   

 118          sbit P46 = P4^6;
 119          sbit P47 = P4^7;
 120          sbit P50 = P5^0;
 121          sbit P51 = P5^1;
 122          sbit P52 = P5^2;
 123          sbit P53 = P5^3;
 124          sbit P54 = P5^4;
 125          sbit P55 = P5^5;
 126          sbit P56 = P5^6;
 127          sbit P57 = P5^7;
 128          
 129          
 130          #define     Baudrate1           115200L
 131          #define     EE_BUF_LENGTH       50          //
 132          
 133          
 134          /*************  本地常量声明    **************/
 135          
 136          /*************  本地变量声明    **************/
 137          u8  xdata   tmp[EE_BUF_LENGTH];
 138          u8  sst_byte;
 139          u32 Flash_addr;
 140          
 141          /*************  FLASH相关变量声明   **************/
 142          sbit    P_PM25LV040_CE  = P2^2;     //PIN1
 143          sbit    P_PM25LV040_SO  = P2^4;     //PIN2
 144          sbit    P_PM25LV040_SI  = P2^3;     //PIN5
 145          sbit    P_PM25LV040_SCK = P2^5;     //PIN6
 146          
 147          u8  B_FlashOK;                                //Flash状态
 148          u8  PM25LV040_ID, PM25LV040_ID1, PM25LV040_ID2;
 149          
 150          #define     UART1_BUF_LENGTH    (EE_BUF_LENGTH+9)   //串口缓冲长度
 151          
 152          u8  RX1_TimeOut;
 153          u8  TX1_Cnt;    //发送计数
 154          u8  RX1_Cnt;    //接收计数
 155          bit B_TX1_Busy; //发送忙标志
 156          
 157          u8  xdata   RX1_Buffer[UART1_BUF_LENGTH];   //接收缓冲
 158          
 159          
 160          void    delay_ms(u8 ms);
 161          void    RX1_Check(void);
 162          void    UART1_config(u8 brt);   // 选择波特率, 2: 使用Timer2做波特率, 其它值: 使用Timer1做波特率.
 163          void    PrintString1(u8 *puts);
 164          void    UART1_TxByte(u8 dat);
 165          
 166          void    SPI_init(void);
 167          void    FlashCheckID(void);
 168          u8      CheckFlashBusy(void);
 169          void    FlashWriteEnable(void);
 170          void    FlashChipErase(void);
 171          void    FlashSectorErase(u32 addr);
 172          void    SPI_Read_Nbytes( u32 addr, u8 *buffer, u16 size);
 173          u8      SPI_Read_Compare(u32 addr, u8 *buffer, u16 size);
 174          void    SPI_Write_Nbytes(u32 addr, u8 *buffer,  u8 size);
 175          
 176          
 177          u8  Hex2Ascii(u8 dat)
 178          {
 179   1          dat &= 0x0f;
C51 COMPILER V9.59.0.0   SPI_PM25LV040                                                     02/08/2021 11:37:42 PAGE 4   

 180   1          if(dat < 10)    return (dat+'0');
 181   1          return (dat-10+'A');
 182   1      }
 183          
 184          /******************** 主函数 **************************/
 185          void main(void)
 186          {
 187   1          P0M1 = 0;   P0M0 = 0;   //设置为准双向口
 188   1          P1M1 = 0;   P1M0 = 0;   //设置为准双向口
 189   1          P2M1 = 0;   P2M0 = 0;   //设置为准双向口
 190   1          P3M1 = 0;   P3M0 = 0;   //设置为准双向口
 191   1          P4M1 = 0;   P4M0 = 0;   //设置为准双向口
 192   1          P5M1 = 0;   P5M0 = 0;   //设置为准双向口
 193   1          P6M1 = 0;   P6M0 = 0;   //设置为准双向口
 194   1          P7M1 = 0;   P7M0 = 0;   //设置为准双向口
 195   1      
 196   1          delay_ms(10);
 197   1          UART1_config(1);    // 选择波特率, 2: 使用Timer2做波特率, 其它值: 使用Timer1做波特率.
 198   1          EA = 1;     //允许总中断
 199   1      
 200   1          PrintString1("命令设置:\r\n");
 201   1          PrintString1("E 0x001234            --> 扇区擦除  十六进制地址\r\n");
 202   1          PrintString1("W 0x001234 1234567890 --> 写入操作  十六进制地址  写入内容\r\n");
 203   1          PrintString1("R 0x001234 10         --> 读出操作  十六进制地址  读出字节数\r\n");
 204   1          PrintString1("C                     --> 如果检测不到PM25LV040/W25X40CL/W25Q80BV, 发送C强制允许操作.\r\
             -n\r\n");
 205   1      
 206   1          SPI_init();
 207   1          FlashCheckID();
 208   1          FlashCheckID();
 209   1          
 210   1          if(!B_FlashOK)  PrintString1("未检测到PM25LV040/W25X40CL/W25Q80BV!\r\n");
 211   1          else
 212   1          {
 213   2              if(B_FlashOK == 1)
 214   2              {
 215   3                  PrintString1("检测到PM25LV040!\r\n");
 216   3              }
 217   2              else if(B_FlashOK == 2)
 218   2              {
 219   3                  PrintString1("检测到W25X40CL!\r\n");
 220   3              }
 221   2              else if(B_FlashOK == 3)
 222   2              {
 223   3                  PrintString1("检测到W25Q80BV!\r\n");
 224   3              }
 225   2              PrintString1("制造商ID1 = 0x");
 226   2              UART1_TxByte(Hex2Ascii(PM25LV040_ID1 >> 4));
 227   2              UART1_TxByte(Hex2Ascii(PM25LV040_ID1));
 228   2              PrintString1("\r\n      ID2 = 0x");
 229   2              UART1_TxByte(Hex2Ascii(PM25LV040_ID2 >> 4));
 230   2              UART1_TxByte(Hex2Ascii(PM25LV040_ID2));
 231   2              PrintString1("\r\n   设备ID = 0x");
 232   2              UART1_TxByte(Hex2Ascii(PM25LV040_ID >> 4));
 233   2              UART1_TxByte(Hex2Ascii(PM25LV040_ID));
 234   2              PrintString1("\r\n");
 235   2          }
 236   1      
 237   1          while (1)
 238   1          {
 239   2              delay_ms(1);
 240   2                      
C51 COMPILER V9.59.0.0   SPI_PM25LV040                                                     02/08/2021 11:37:42 PAGE 5   

 241   2              if(RX1_TimeOut > 0)
 242   2              {
 243   3                  if(--RX1_TimeOut == 0)  //超时,则串口接收结束
 244   3                  {
 245   4                      if(RX1_Cnt > 0)
 246   4                      {
 247   5                          RX1_Check();    //串口1处理数据
 248   5                      }
 249   4                      RX1_Cnt = 0;
 250   4                  }
 251   3              }
 252   2          }
 253   1      }
 254          
 255          
 256          //========================================================================
 257          // 函数: void  delay_ms(unsigned char ms)
 258          // 描述: 延时函数。
 259          // 参数: ms,要延时的ms数, 这里只支持1~255ms. 自动适应主时钟.
 260          // 返回: none.
 261          // 版本: VER1.0
 262          // 日期: 2013-4-1
 263          // 备注: 
 264          //========================================================================
 265          void delay_ms(u8 ms)
 266          {
 267   1          u16 i;
 268   1          do{
 269   2              i = MAIN_Fosc / 13000;
 270   2              while(--i)    ;   //14T per loop
 271   2          }while(--ms);
 272   1      }
 273          
 274          
 275          /**************** ASCII码转BIN ****************************/
 276          u8  CheckData(u8 dat)
 277          {
 278   1          if((dat >= '0') && (dat <= '9'))        return (dat-'0');
 279   1          if((dat >= 'A') && (dat <= 'F'))        return (dat-'A'+10);
 280   1          return 0xff;
 281   1      }
 282          
 283          /**************** 获取写入地址 ****************************/
 284          u32 GetAddress(void)
 285          {
 286   1          u32 address;
 287   1          u8  i,j;
 288   1          
 289   1          address = 0;
 290   1          if((RX1_Buffer[2] == '0') && (RX1_Buffer[3] == 'X'))
 291   1          {
 292   2              for(i=4; i<10; i++)
 293   2              {
 294   3                  j = CheckData(RX1_Buffer[i]);
 295   3                  if(j >= 0x10)   return 0x80000000;  //error
 296   3                  address = (address << 4) + j;
 297   3              }
 298   2              return (address);
 299   2          }
 300   1          return  0x80000000; //error
 301   1      }
 302          
C51 COMPILER V9.59.0.0   SPI_PM25LV040                                                     02/08/2021 11:37:42 PAGE 6   

 303          /**************** 获取要读出数据的字节数 ****************************/
 304          u8  GetDataLength(void)
 305          {
 306   1          u8  i;
 307   1          u8  length;
 308   1          
 309   1          length = 0;
 310   1          for(i=11; i<RX1_Cnt; i++)
 311   1          {
 312   2              if(CheckData(RX1_Buffer[i]) >= 10)  break;
 313   2              length = length * 10 + CheckData(RX1_Buffer[i]);
 314   2          }
 315   1          return (length);
 316   1      }
 317          
 318          
 319          /**************** 串口1处理函数 ****************************/
 320          
 321          void RX1_Check(void)
 322          {
 323   1          u8  i,j;
 324   1      
 325   1          if((RX1_Cnt == 1) && (RX1_Buffer[0] == 'C'))    //发送C强制允许操作
 326   1          {
 327   2              B_FlashOK = 1;
 328   2              PrintString1("强制允许操作FLASH!\r\n");
 329   2          }
 330   1      
 331   1          if(!B_FlashOK)
 332   1          {
 333   2              PrintString1("PM25LV040/W25X40CL/W25Q80BV不存在, 不能操作FLASH!\r\n");
 334   2              return;
 335   2          }
 336   1          
 337   1          F0 = 0;
 338   1          if((RX1_Cnt >= 10) && (RX1_Buffer[1] == ' '))   //最短命令为10个字节
 339   1          {
 340   2              for(i=0; i<10; i++)
 341   2              {
 342   3                  if((RX1_Buffer[i] >= 'a') && (RX1_Buffer[i] <= 'z'))    RX1_Buffer[i] = RX1_Buffer[i] - 'a' + 
             -'A';//小写转大写
 343   3              }
 344   2              Flash_addr = GetAddress();
 345   2              if(Flash_addr < 0x80000000)
 346   2              {
 347   3                  if(RX1_Buffer[0] == 'E')    //擦除
 348   3                  {
 349   4                      FlashSectorErase(Flash_addr);
 350   4                      PrintString1("已擦除一个扇区数据!\r\n");
 351   4                      F0 = 1;
 352   4                  }
 353   3      
 354   3                  else if((RX1_Buffer[0] == 'W') && (RX1_Cnt >= 12) && (RX1_Buffer[10] == ' '))   //写入N个字节
 355   3                  {
 356   4                      j = RX1_Cnt - 11;
 357   4                      for(i=0; i<j; i++)  tmp[i] = 0xff;      //检测要写入的空间是否为空
 358   4                      i = SPI_Read_Compare(Flash_addr,tmp,j);
 359   4                      if(i > 0)
 360   4                      {
 361   5                          PrintString1("要写入的地址为非空,不能写入,请先擦除!\r\n");
 362   5                      }
 363   4                      else
C51 COMPILER V9.59.0.0   SPI_PM25LV040                                                     02/08/2021 11:37:42 PAGE 7   

 364   4                      {
 365   5                          SPI_Write_Nbytes(Flash_addr,&RX1_Buffer[11],j);     //写N个字节 
 366   5                          i = SPI_Read_Compare(Flash_addr,&RX1_Buffer[11],j); //比较写入的数据
 367   5                          if(i == 0)
 368   5                          {
 369   6                              PrintString1("已写入");
 370   6                              if(j >= 100)    {UART1_TxByte(j/100+'0');   j = j % 100;}
 371   6                              if(j >= 10)     {UART1_TxByte(j/10+'0');    j = j % 10;}
 372   6                              UART1_TxByte(j%10+'0');
 373   6                              PrintString1("字节数据!\r\n");
 374   6                          }
 375   5                          else        PrintString1("写入错误!\r\n");
 376   5                      }
 377   4                      F0 = 1;
 378   4                  }
 379   3                  else if((RX1_Buffer[0] == 'R') && (RX1_Cnt >= 12) && (RX1_Buffer[10] == ' '))   //读出N个字节
 380   3                  {
 381   4                      j = GetDataLength();
 382   4                      if((j > 0) && (j < EE_BUF_LENGTH))
 383   4                      {
 384   5                          SPI_Read_Nbytes(Flash_addr,tmp,j);
 385   5                          PrintString1("读出");
 386   5                          if(j>=100)  UART1_TxByte(j/100+'0');
 387   5                          UART1_TxByte(j%100/10+'0');
 388   5                          UART1_TxByte(j%10+'0');
 389   5                          PrintString1("个字节数据如下：\r\n");
 390   5                          for(i=0; i<j; i++)  UART1_TxByte(tmp[i]);
 391   5                          UART1_TxByte(0x0d);
 392   5                          UART1_TxByte(0x0a);
 393   5                          F0 = 1;
 394   5                      }
 395   4                  }
 396   3              }
 397   2          }
 398   1          if(!F0) PrintString1("命令错误!\r\n");
 399   1      }
 400          
 401          
 402          //========================================================================
 403          // 函数: void UART1_TxByte(u8 dat)
 404          // 描述: 发送一个字节.
 405          // 参数: 无.
 406          // 返回: 无.
 407          // 版本: V1.0, 2014-6-30
 408          //========================================================================
 409          
 410          void UART1_TxByte(u8 dat)
 411          {
 412   1          SBUF = dat;
 413   1          B_TX1_Busy = 1;
 414   1          while(B_TX1_Busy);
 415   1      }
 416          
 417          //========================================================================
 418          // 函数: void PrintString1(u8 *puts)
 419          // 描述: 串口1发送字符串函数。
 420          // 参数: puts:  字符串指针.
 421          // 返回: none.
 422          // 版本: VER1.0
 423          // 日期: 2014-11-28
 424          // 备注: 
 425          //========================================================================
C51 COMPILER V9.59.0.0   SPI_PM25LV040                                                     02/08/2021 11:37:42 PAGE 8   

 426          void PrintString1(u8 *puts) //发送一个字符串
 427          {
 428   1          for (; *puts != 0;  puts++) UART1_TxByte(*puts);    //遇到停止符0结束
 429   1      }
 430          
 431          //========================================================================
 432          // 函数: SetTimer2Baudraye(u16 dat)
 433          // 描述: 设置Timer2做波特率发生器。
 434          // 参数: dat: Timer2的重装值.
 435          // 返回: none.
 436          // 版本: VER1.0
 437          // 日期: 2014-11-28
 438          // 备注: 
 439          //========================================================================
 440          void SetTimer2Baudraye(u16 dat)  // 选择波特率, 2: 使用Timer2做波特率, 其它值: 使用Timer1做波特率.
 441          {
 442   1          AUXR &= ~(1<<4);    //Timer stop
 443   1          AUXR &= ~(1<<3);    //Timer2 set As Timer
 444   1          AUXR |=  (1<<2);    //Timer2 set as 1T mode
 445   1          TH2 = dat / 256;
 446   1          TL2 = dat % 256;
 447   1          IE2  &= ~(1<<2);    //禁止中断
 448   1          AUXR |=  (1<<4);    //Timer run enable
 449   1      }
 450          
 451          //========================================================================
 452          // 函数: void UART1_config(u8 brt)
 453          // 描述: UART1初始化函数。
 454          // 参数: brt: 选择波特率, 2: 使用Timer2做波特率, 其它值: 使用Timer1做波特率.
 455          // 返回: none.
 456          // 版本: VER1.0
 457          // 日期: 2014-11-28
 458          // 备注: 
 459          //========================================================================
 460          void UART1_config(u8 brt)    // 选择波特率, 2: 使用Timer2做波特率, 其它值: 使用Timer1做波特率.
 461          {
 462   1          /*********** 波特率使用定时器2 *****************/
 463   1          if(brt == 2)
 464   1          {
 465   2              AUXR |= 0x01;       //S1 BRT Use Timer2;
 466   2              SetTimer2Baudraye(65536UL - (MAIN_Fosc / 4) / Baudrate1);
 467   2          }
 468   1      
 469   1          /*********** 波特率使用定时器1 *****************/
 470   1          else
 471   1          {
 472   2              TR1 = 0;
 473   2              AUXR &= ~0x01;      //S1 BRT Use Timer1;
 474   2              AUXR |=  (1<<6);    //Timer1 set as 1T mode
 475   2              TMOD &= ~(1<<6);    //Timer1 set As Timer
 476   2              TMOD &= ~0x30;      //Timer1_16bitAutoReload;
 477   2              TH1 = (u8)((65536UL - (MAIN_Fosc / 4) / Baudrate1) / 256);
 478   2              TL1 = (u8)((65536UL - (MAIN_Fosc / 4) / Baudrate1) % 256);
 479   2              ET1 = 0;    //禁止中断
 480   2              INT_CLKO &= ~0x02;  //不输出时钟
 481   2              TR1  = 1;
 482   2          }
 483   1          /*************************************************/
 484   1      
 485   1          SCON = (SCON & 0x3f) | 0x40;    //UART1模式, 0x00: 同步移位输出, 0x40: 8位数据,可变波特率, 0x80: 9位数
             -据,固定波特率, 0xc0: 9位数据,可变波特率
 486   1      //  PS  = 1;    //高优先级中断
C51 COMPILER V9.59.0.0   SPI_PM25LV040                                                     02/08/2021 11:37:42 PAGE 9   

 487   1          ES  = 1;    //允许中断
 488   1          REN = 1;    //允许接收
 489   1          P_SW1 &= 0x3f;
 490   1          P_SW1 |= 0x00;      //UART1 switch to, 0x00: P3.0 P3.1, 0x40: P3.6 P3.7, 0x80: P1.6 P1.7, 0xC0: P4.3 P
             -4.4
 491   1      
 492   1          B_TX1_Busy = 0;
 493   1          TX1_Cnt = 0;
 494   1          RX1_Cnt = 0;
 495   1      }
 496          
 497          //========================================================================
 498          // 函数: void UART1_int (void) interrupt UART1_VECTOR
 499          // 描述: UART1中断函数。
 500          // 参数: nine.
 501          // 返回: none.
 502          // 版本: VER1.0
 503          // 日期: 2014-11-28
 504          // 备注: 
 505          //========================================================================
 506          void UART1_int (void) interrupt 4
 507          {
 508   1          if(RI)
 509   1          {
 510   2              RI = 0;
 511   2              if(RX1_Cnt >= UART1_BUF_LENGTH) RX1_Cnt = 0;
 512   2              RX1_Buffer[RX1_Cnt] = SBUF;
 513   2              RX1_Cnt++;
 514   2              RX1_TimeOut = 5;
 515   2          }
 516   1      
 517   1          if(TI)
 518   1          {
 519   2              TI = 0;
 520   2              B_TX1_Busy = 0;
 521   2          }
 522   1      }
 523          
 524          /******************* FLASH相关程序 ************************/
 525          #define SFC_WREN        0x06        //串行Flash命令集
 526          #define SFC_WRDI        0x04
 527          #define SFC_RDSR        0x05
 528          #define SFC_WRSR        0x01
 529          #define SFC_READ        0x03
 530          #define SFC_FASTREAD    0x0B
 531          #define SFC_RDID        0xAB
 532          #define SFC_PAGEPROG    0x02
 533          #define SFC_RDCR        0xA1
 534          #define SFC_WRCR        0xF1
 535          #define SFC_SECTORER1   0xD7        //PM25LV040 扇区擦除指令
 536          #define SFC_SECTORER2   0x20        //W25Xxx 扇区擦除指令
 537          #define SFC_BLOCKER     0xD8
 538          #define SFC_CHIPER      0xC7
 539          
 540          #define SPI_CE_High()   P_PM25LV040_CE  = 1     // set CE high
 541          #define SPI_CE_Low()    P_PM25LV040_CE  = 0     // clear CE low
 542          #define SPI_Hold()      P_SPI_Hold      = 0     // clear Hold pin
 543          #define SPI_UnHold()    P_SPI_Hold      = 1     // set Hold pin
 544          #define SPI_WP()        P_SPI_WP        = 0     // clear WP pin
 545          #define SPI_UnWP()      P_SPI_WP        = 1     // set WP pin
 546          
 547          /************************************************************************/
C51 COMPILER V9.59.0.0   SPI_PM25LV040                                                     02/08/2021 11:37:42 PAGE 10  

 548          void SPI_init(void)
 549          {
 550   1          SPCTL |=  (1 << 7); //忽略 SS 引脚功能，使用 MSTR 确定器件是主机还是从机
 551   1          SPCTL |=  (1 << 6); //使能 SPI 功能
 552   1          SPCTL &= ~(1 << 5); //先发送/接收数据的高位（ MSB）
 553   1          SPCTL |=  (1 << 4); //设置主机模式
 554   1          SPCTL &= ~(1 << 3); //SCLK 空闲时为低电平，SCLK 的前时钟沿为上升沿，后时钟沿为下降沿
 555   1          SPCTL &= ~(1 << 2); //数据 SS 管脚为低电平驱动第一位数据并在 SCLK 的后时钟沿改变数据
 556   1          SPCTL = (SPCTL & ~3) | 0;   //SPI 时钟频率选择, 0: 4T, 1: 8T,  2: 16T,  3: 32T
 557   1          AUXR1 = (AUXR1 & ~(3<<2)) | (1<<2);     //IO口切换. 0: P1.2/P5.4 P1.3 P1.4 P1.5, 1: P2.2 P2.3 P2.4 P2.
             -5, 2: P5.4 P4.0 P4.1 P4.3, 3: P3.5 P3.4 P3.3 P3.2
 558   1      
 559   1          P_PM25LV040_SCK = 0;    // set clock to low initial state
 560   1          P_PM25LV040_SI = 1;
 561   1          SPSTAT = SPIF + WCOL;   //清0 SPIF和WCOL标志
 562   1      }
 563          
 564          /************************************************************************/
 565          void SPI_WriteByte(u8 out)
 566          {
 567   1          SPDAT = out;
 568   1          while((SPSTAT & SPIF) == 0) ;
 569   1          SPSTAT = SPIF + WCOL;   //清0 SPIF和WCOL标志
 570   1      }
 571          
 572          /************************************************************************/
 573          u8 SPI_ReadByte(void)
 574          {
 575   1          SPDAT = 0xff;
 576   1          while((SPSTAT & SPIF) == 0) ;
 577   1          SPSTAT = SPIF + WCOL;   //清0 SPIF和WCOL标志
 578   1          return (SPDAT);
 579   1      }
 580          
 581          /************************************************
 582          检测Flash是否准备就绪
 583          入口参数: 无
 584          出口参数:
 585              0 : 没有检测到正确的Flash
 586              1 : Flash准备就绪
 587          ************************************************/
 588          void FlashCheckID(void)
 589          {
 590   1          SPI_CE_Low();
 591   1          SPI_WriteByte(SFC_RDID);        //发送读取ID命令
 592   1          SPI_WriteByte(0x00);            //空读3个字节
 593   1          SPI_WriteByte(0x00);
 594   1          SPI_WriteByte(0x00);
 595   1          PM25LV040_ID1 = SPI_ReadByte();         //读取制造商ID1
 596   1          PM25LV040_ID  = SPI_ReadByte();         //读取设备ID
 597   1          PM25LV040_ID2 = SPI_ReadByte();         //读取制造商ID2
 598   1          SPI_CE_High();
 599   1      
 600   1      //    UART1_TxByte(PM25LV040_ID1);
 601   1      //    UART1_TxByte(PM25LV040_ID);
 602   1      //    UART1_TxByte(PM25LV040_ID2);
 603   1        
 604   1          if((PM25LV040_ID1 == 0x9d) && (PM25LV040_ID2 == 0x7f))  B_FlashOK = 1;  //检测是否为PM25LVxx系列的Flas
             -h
 605   1          else if(PM25LV040_ID == 0x12)  B_FlashOK = 2;                           //检测是否为W25X4x系列的Flash
 606   1          else if(PM25LV040_ID == 0x13)  B_FlashOK = 3;                           //检测是否为W25X8x系列的Flash
 607   1          else                                                    B_FlashOK = 0;
C51 COMPILER V9.59.0.0   SPI_PM25LV040                                                     02/08/2021 11:37:42 PAGE 11  

 608   1      }
 609          
 610          /************************************************
 611          检测Flash的忙状态
 612          入口参数: 无
 613          出口参数:
 614              0 : Flash处于空闲状态
 615              1 : Flash处于忙状态
 616          ************************************************/
 617          u8 CheckFlashBusy(void)
 618          {
 619   1          u8  dat;
 620   1      
 621   1          SPI_CE_Low();
 622   1          SPI_WriteByte(SFC_RDSR);        //发送读取状态命令
 623   1          dat = SPI_ReadByte();           //读取状态
 624   1          SPI_CE_High();
 625   1      
 626   1          return (dat);                   //状态值的Bit0即为忙标志
 627   1      }
 628          
 629          /************************************************
 630          使能Flash写命令
 631          入口参数: 无
 632          出口参数: 无
 633          ************************************************/
 634          void FlashWriteEnable(void)
 635          {
 636   1          while(CheckFlashBusy() > 0);    //Flash忙检测
 637   1          SPI_CE_Low();
 638   1          SPI_WriteByte(SFC_WREN);        //发送写使能命令
 639   1          SPI_CE_High();
 640   1      }
 641          
 642          /************************************************
 643          擦除整片Flash
 644          入口参数: 无
 645          出口参数: 无
 646          ************************************************/
 647          /*
 648          void FlashChipErase(void)
 649          {
 650              if(B_FlashOK)
 651              {
 652                  FlashWriteEnable();             //使能Flash写命令
 653                  SPI_CE_Low();
 654                  SPI_WriteByte(SFC_CHIPER);      //发送片擦除命令
 655                  SPI_CE_High();
 656              }
 657          }
 658          */
 659          
 660          /************************************************
 661          擦除扇区, 一个扇区4KB
 662          入口参数: 无
 663          出口参数: 无
 664          ************************************************/
 665          void FlashSectorErase(u32 addr)
 666          {
 667   1          if(B_FlashOK)
 668   1          {
 669   2              FlashWriteEnable();             //使能Flash写命令
C51 COMPILER V9.59.0.0   SPI_PM25LV040                                                     02/08/2021 11:37:42 PAGE 12  

 670   2              SPI_CE_Low();
 671   2              if(B_FlashOK == 1)
 672   2              {
 673   3                  SPI_WriteByte(SFC_SECTORER1);    //发送扇区擦除命令
 674   3              }
 675   2              else
 676   2              {
 677   3                  SPI_WriteByte(SFC_SECTORER2);    //发送扇区擦除命令
 678   3              }
 679   2              SPI_WriteByte(((u8 *)&addr)[1]);           //设置起始地址
 680   2              SPI_WriteByte(((u8 *)&addr)[2]);
 681   2              SPI_WriteByte(((u8 *)&addr)[3]);
 682   2              SPI_CE_High();
 683   2          }
 684   1      }
 685          
 686          /************************************************
 687          从Flash中读取数据
 688          入口参数:
 689              addr   : 地址参数
 690              buffer : 缓冲从Flash中读取的数据
 691              size   : 数据块大小
 692          出口参数:
 693              无
 694          ************************************************/
 695          void SPI_Read_Nbytes(u32 addr, u8 *buffer, u16 size)
 696          {
 697   1          if(size == 0)   return;
 698   1          if(!B_FlashOK)  return;
 699   1          while(CheckFlashBusy() > 0);        //Flash忙检测
 700   1      
 701   1          SPI_CE_Low();                       //enable device
 702   1          SPI_WriteByte(SFC_READ);            //read command
 703   1      
 704   1          SPI_WriteByte(((u8 *)&addr)[1]);    //设置起始地址
 705   1          SPI_WriteByte(((u8 *)&addr)[2]);
 706   1          SPI_WriteByte(((u8 *)&addr)[3]);
 707   1      
 708   1          do{
 709   2              *buffer = SPI_ReadByte();       //receive byte and store at buffer
 710   2              buffer++;
 711   2          }while(--size);                     //read until no_bytes is reached
 712   1          SPI_CE_High();                      //disable device
 713   1      }
 714          
 715          /************************************************************************
 716          读出n个字节,跟指定的数据进行比较, 错误返回1,正确返回0
 717          ************************************************************************/
 718          u8 SPI_Read_Compare(u32 addr, u8 *buffer, u16 size)
 719          {
 720   1          u8  j;
 721   1          if(size == 0)   return 2;
 722   1          if(!B_FlashOK)  return 2;
 723   1          while(CheckFlashBusy() > 0);            //Flash忙检测
 724   1      
 725   1          j = 0;
 726   1          SPI_CE_Low();                           //enable device
 727   1          SPI_WriteByte(SFC_READ);                //read command
 728   1          SPI_WriteByte(((u8 *)&addr)[1]);        //设置起始地址
 729   1          SPI_WriteByte(((u8 *)&addr)[2]);
 730   1          SPI_WriteByte(((u8 *)&addr)[3]);
 731   1          do
C51 COMPILER V9.59.0.0   SPI_PM25LV040                                                     02/08/2021 11:37:42 PAGE 13  

 732   1          {
 733   2              if(*buffer != SPI_ReadByte())       //receive byte and store at buffer
 734   2              {
 735   3                  j = 1;
 736   3                  break;
 737   3              }
 738   2              buffer++;
 739   2          }while(--size);         //read until no_bytes is reached
 740   1          SPI_CE_High();          //disable device
 741   1          return j;
 742   1      }
 743          
 744          
 745          /************************************************
 746          写数据到Flash中
 747          入口参数:
 748              addr   : 地址参数
 749              buffer : 缓冲需要写入Flash的数据
 750              size   : 数据块大小
 751          出口参数: 无
 752          ************************************************/
 753          void SPI_Write_Nbytes(u32 addr, u8 *buffer, u8 size)
 754          {
 755   1          if(size == 0)   return;
 756   1          if(!B_FlashOK)  return;
 757   1          while(CheckFlashBusy() > 0);        //Flash忙检测
 758   1      
 759   1      
 760   1          FlashWriteEnable();                 //使能Flash写命令
 761   1      
 762   1          SPI_CE_Low();                       // enable device
 763   1          SPI_WriteByte(SFC_PAGEPROG);        // 发送页编程命令
 764   1          SPI_WriteByte(((u8 *)&addr)[1]);    //设置起始地址
 765   1          SPI_WriteByte(((u8 *)&addr)[2]);
 766   1          SPI_WriteByte(((u8 *)&addr)[3]);
 767   1          do{
 768   2              SPI_WriteByte(*buffer++);       //连续页内写
 769   2              addr++;
 770   2              if ((addr & 0xff) == 0) break;
 771   2          }while(--size);
 772   1          SPI_CE_High();                      // disable device
 773   1      }
 774          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1886    ----
   CONSTANT SIZE    =    625    ----
   XDATA SIZE       =    109    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     12      38
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
