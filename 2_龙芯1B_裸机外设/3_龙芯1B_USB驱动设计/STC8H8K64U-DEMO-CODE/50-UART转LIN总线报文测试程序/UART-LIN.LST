C51 COMPILER V9.59.0.0   UART_LIN                                                          02/08/2021 11:45:25 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE UART_LIN
OBJECT MODULE PLACED IN UART-LIN.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE UART-LIN.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          /*---------------------------------------------------------------------*/
   2          /* --- STC MCU Limited ------------------------------------------------*/
   3          /* --- STC 1T Series MCU Demo Programme -------------------------------*/
   4          /* --- Mobile: (86)13922805190 ----------------------------------------*/
   5          /* --- Fax: 86-0513-55012956,55012947,55012969 ------------------------*/
   6          /* --- Tel: 86-0513-55012928,55012929,55012966 ------------------------*/
   7          /* --- Web: www.STCMCU.com --------------------------------------------*/
   8          /* --- Web: www.STCMCUDATA.com  ---------------------------------------*/
   9          /* --- QQ:  800003751 -------------------------------------------------*/
  10          /* 如果要在程序中使用此代码,请在程序中注明使用了STC的资料及程序        */
  11          /*---------------------------------------------------------------------*/
  12          
  13          
  14          /*************  功能说明    **************
  15          
  16          本例程基于STC8H8K64U为主控芯片的实验箱8进行编写测试，STC8G、STC8H系列芯片可通用参考.
  17          
  18          通过UART接口连接LIN收发器实现LIN总线信号收发测试例程.
  19          
  20          UART1通过串口工具连接电脑.
  21          
  22          UART2外接LIN收发器(TJA1020/1), 连接LIN总线.
  23          
  24          将电脑串口发送的数据转发到LIN总线; 从LIN总线接收到的数据转发到电脑串口.
  25          
  26          默认传输速率：9600波特率，发送LIN数据前切换波特率，发送13个显性间隔信号.
  27          
  28          下载时, 选择时钟 22.1184MHz (用户可自行修改频率).
  29          
  30          ******************************************/
  31          
  32          #include    "reg51.h"       //包含此头文件后，里面声明的寄存器不需要再手动输入，避免重复定义
  33          #include    "intrins.h"
  34          
  35          #define MAIN_Fosc       22118400L   //定义主时钟（精确计算波特率）
  36          
  37          typedef     unsigned char   u8;
  38          typedef     unsigned int    u16;
  39          typedef     unsigned long   u32;
  40          
  41          //手动输入声明"reg51.h"头文件里面没有定义的寄存器
  42          sfr AUXR = 0x8E;
  43          sfr S2CON = 0x9A;   //
  44          sfr S2BUF = 0x9B;   //
  45          sfr TH2  = 0xD6;
  46          sfr TL2  = 0xD7;
  47          sfr IE2   = 0xAF;
  48          sfr INT_CLKO = 0x8F;
  49          sfr P_SW1 = 0xA2;
  50          sfr P_SW2 = 0xBA;
  51          
  52          sfr P4   = 0xC0;
  53          sfr P5   = 0xC8;
  54          sfr P6   = 0xE8;
  55          sfr P7   = 0xF8;
C51 COMPILER V9.59.0.0   UART_LIN                                                          02/08/2021 11:45:25 PAGE 2   

  56          sfr P1M1 = 0x91;    //PxM1.n,PxM0.n     =00--->Standard,    01--->push-pull
  57          sfr P1M0 = 0x92;    //                  =10--->pure input,  11--->open drain
  58          sfr P0M1 = 0x93;
  59          sfr P0M0 = 0x94;
  60          sfr P2M1 = 0x95;
  61          sfr P2M0 = 0x96;
  62          sfr P3M1 = 0xB1;
  63          sfr P3M0 = 0xB2;
  64          sfr P4M1 = 0xB3;
  65          sfr P4M0 = 0xB4;
  66          sfr P5M1 = 0xC9;
  67          sfr P5M0 = 0xCA;
  68          sfr P6M1 = 0xCB;
  69          sfr P6M0 = 0xCC;
  70          sfr P7M1 = 0xE1;
  71          sfr P7M0 = 0xE2;
  72          
  73          sbit P00 = P0^0;
  74          sbit P01 = P0^1;
  75          sbit P02 = P0^2;
  76          sbit P03 = P0^3;
  77          sbit P04 = P0^4;
  78          sbit P05 = P0^5;
  79          sbit P06 = P0^6;
  80          sbit P07 = P0^7;
  81          sbit P10 = P1^0;
  82          sbit P11 = P1^1;
  83          sbit P12 = P1^2;
  84          sbit P13 = P1^3;
  85          sbit P14 = P1^4;
  86          sbit P15 = P1^5;
  87          sbit P16 = P1^6;
  88          sbit P17 = P1^7;
  89          sbit P20 = P2^0;
  90          sbit P21 = P2^1;
  91          sbit P22 = P2^2;
  92          sbit P23 = P2^3;
  93          sbit P24 = P2^4;
  94          sbit P25 = P2^5;
  95          sbit P26 = P2^6;
  96          sbit P27 = P2^7;
  97          sbit P30 = P3^0;
  98          sbit P31 = P3^1;
  99          sbit P32 = P3^2;
 100          sbit P33 = P3^3;
 101          sbit P34 = P3^4;
 102          sbit P35 = P3^5;
 103          sbit P36 = P3^6;
 104          sbit P37 = P3^7;
 105          sbit P40 = P4^0;
 106          sbit P41 = P4^1;
 107          sbit P42 = P4^2;
 108          sbit P43 = P4^3;
 109          sbit P44 = P4^4;
 110          sbit P45 = P4^5;
 111          sbit P46 = P4^6;
 112          sbit P47 = P4^7;
 113          sbit P50 = P5^0;
 114          sbit P51 = P5^1;
 115          sbit P52 = P5^2;
 116          sbit P53 = P5^3;
 117          sbit P54 = P5^4;
C51 COMPILER V9.59.0.0   UART_LIN                                                          02/08/2021 11:45:25 PAGE 3   

 118          sbit P55 = P5^5;
 119          sbit P56 = P5^6;
 120          sbit P57 = P5^7;
 121          
 122          sbit SLP_N  = P2^4;     //0: Sleep
 123          
 124          /****************************** 用户定义宏 ***********************************/
 125          
 126          #define Baudrate1           (65536UL - (MAIN_Fosc / 4) / 9600UL)
 127          #define Baudrate2           (65536UL - (MAIN_Fosc / 4) / 9600UL)  //发送数据传输波特率
 128          
 129          #define Baudrate_Break      (65536UL - (MAIN_Fosc / 4) / 6647UL)  //发送显性间隔信号波特率
 130          
 131          #define UART1_BUF_LENGTH    32
 132          #define UART2_BUF_LENGTH    32
 133          
 134          #define LIN_ID    0x31
 135          
 136          u8  TX1_Cnt;    //发送计数
 137          u8  RX1_Cnt;    //接收计数
 138          u8  TX2_Cnt;    //发送计数
 139          u8  RX2_Cnt;    //接收计数
 140          bit B_TX1_Busy; //发送忙标志
 141          bit B_TX2_Busy; //发送忙标志
 142          u8  RX1_TimeOut;
 143          u8  RX2_TimeOut;
 144          
 145          u8  xdata RX1_Buffer[UART1_BUF_LENGTH]; //接收缓冲
 146          u8  xdata RX2_Buffer[UART2_BUF_LENGTH]; //接收缓冲
 147          
 148          void UART1_config(u8 brt);   // 选择波特率, 2: 使用Timer2做波特率, 其它值: 使用Timer1做波特率.
 149          void UART2_config(u8 brt);   // 选择波特率, 2: 使用Timer2做波特率, 其它值: 无效.
 150          void PrintString1(u8 *puts);
 151          void delay_ms(u8 ms);
 152          void UART1_TxByte(u8 dat);
 153          void UART2_TxByte(u8 dat);
 154          void Lin_Send(u8 *puts);
 155          void SetTimer2Baudraye(u16 dat);
 156          //========================================================================
 157          // 函数: void main(void)
 158          // 描述: 主函数。
 159          // 参数: none.
 160          // 返回: none.
 161          // 版本: VER1.0
 162          // 日期: 2014-11-28
 163          // 备注: 
 164          //========================================================================
 165          void main(void)
 166          {
 167   1          u8 i;
 168   1      
 169   1          P0M1 = 0;   P0M0 = 0;   //设置为准双向口
 170   1          P1M1 = 0;   P1M0 = 0;   //设置为准双向口
 171   1          P2M1 = 0;   P2M0 = 0;   //设置为准双向口
 172   1          P3M1 = 0;   P3M0 = 0;   //设置为准双向口
 173   1          P4M1 = 0;   P4M0 = 0;   //设置为准双向口
 174   1          P5M1 = 0;   P5M0 = 0;   //设置为准双向口
 175   1          P6M1 = 0;   P6M0 = 0;   //设置为准双向口
 176   1          P7M1 = 0;   P7M0 = 0;   //设置为准双向口
 177   1      
 178   1          UART1_config(1);    // 选择波特率, 2: 使用Timer2做波特率, 其它值: 使用Timer1做波特率.
 179   1          UART2_config(2);    // 选择波特率, 2: 使用Timer2做波特率, 其它值: 无效.
C51 COMPILER V9.59.0.0   UART_LIN                                                          02/08/2021 11:45:25 PAGE 4   

 180   1          EA = 1;             //允许全局中断
 181   1          SLP_N = 1;
 182   1      
 183   1          PrintString1("STC8H8K64U UART1 Test Programme!\r\n");  //UART1发送一个字符串
 184   1      
 185   1          while (1)
 186   1          {
 187   2              delay_ms(1);
 188   2              if(RX1_TimeOut > 0)
 189   2              {
 190   3                  if(--RX1_TimeOut == 0)  //超时,则串口接收结束
 191   3                  {
 192   4                      if(RX1_Cnt > 0)
 193   4                      {
 194   5                        Lin_Send(RX1_Buffer);  //将UART1收到的数据发送到LIN总线上
 195   5                      }
 196   4                      RX1_Cnt = 0;
 197   4                  }
 198   3              }
 199   2              
 200   2              if(RX2_TimeOut > 0)
 201   2              {
 202   3                  if(--RX2_TimeOut == 0)  //超时,则串口接收结束
 203   3                  {
 204   4                      if(RX2_Cnt > 0)
 205   4                      {
 206   5                          for (i=0; i < RX2_Cnt; i++)     //遇到停止符0结束
 207   5                          {
 208   6                            UART1_TxByte(RX2_Buffer[i]);  //从LIN总线收到的数据发送到UART1
 209   6                          }
 210   5                      }
 211   4                      RX2_Cnt = 0;
 212   4                  }
 213   3              }
 214   2          }
 215   1      }
 216          
 217          
 218          //========================================================================
 219          // 函数: void delay_ms(unsigned char ms)
 220          // 描述: 延时函数。
 221          // 参数: ms,要延时的ms数, 这里只支持1~255ms. 自动适应主时钟.
 222          // 返回: none.
 223          // 版本: VER1.0
 224          // 日期: 2013-4-1
 225          // 备注: 
 226          //========================================================================
 227          void delay_ms(u8 ms)
 228          {
 229   1          u16 i;
 230   1          do{
 231   2              i = MAIN_Fosc / 13000;
 232   2              while(--i)    ;   //14T per loop
 233   2          }while(--ms);
 234   1      }
 235          
 236          //========================================================================
 237          // 函数: u8 Lin_CheckPID(u8 id)
 238          // 描述: ID码加上校验符，转成PID码。
 239          // 参数: ID码.
 240          // 返回: PID码.
 241          // 版本: VER1.0
C51 COMPILER V9.59.0.0   UART_LIN                                                          02/08/2021 11:45:25 PAGE 5   

 242          // 日期: 2020-12-2
 243          // 备注: 
 244          //========================================================================
 245          u8 Lin_CheckPID(u8 id)
 246          {
 247   1        u8 returnpid ;
 248   1        u8 P0 ;
 249   1        u8 P1 ;
 250   1        
 251   1        P0 = (((id)^(id>>1)^(id>>2)^(id>>4))&0x01)<<6 ;
 252   1        P1 = ((~((id>>1)^(id>>3)^(id>>4)^(id>>5)))&0x01)<<7 ;
 253   1        
 254   1        returnpid = id|P0|P1 ;
 255   1        
 256   1        return returnpid ;
 257   1      }
 258          
 259          //========================================================================
 260          // 函数: u8 LINCalcChecksum(u8 *dat)
 261          // 描述: 计算校验码。
 262          // 参数: 数据场传输的数据.
 263          // 返回: 校验码.
 264          // 版本: VER1.0
 265          // 日期: 2020-12-2
 266          // 备注: 
 267          //========================================================================
 268          static u8 LINCalcChecksum(u8 *dat)
 269          {
 270   1        u16 sum = 0;
 271   1        u8 i;
 272   1      
 273   1        for(i = 0; i < 8; i++)
 274   1        {
 275   2          sum += dat[i];
 276   2          if(sum & 0xFF00)
 277   2          {
 278   3            sum = (sum & 0x00FF) + 1;
 279   3          }
 280   2        }
 281   1        sum ^= 0x00FF;
 282   1        return (u8)sum;
 283   1      }
 284          
 285          //========================================================================
 286          // 函数: void Lin_SendBreak(void)
 287          // 描述: 发送显性间隔信号。
 288          // 参数: none.
 289          // 返回: none.
 290          // 版本: VER1.0
 291          // 日期: 2020-12-2
 292          // 备注: 
 293          //========================================================================
 294          void Lin_SendBreak(void)
 295          {
 296   1          SetTimer2Baudraye(Baudrate_Break);
 297   1          UART2_TxByte(0);
 298   1          SetTimer2Baudraye(Baudrate2);
 299   1      }
 300          
 301          //========================================================================
 302          // 函数: void Lin_Send(u8 *puts)
 303          // 描述: 发送LIN总线报文。
C51 COMPILER V9.59.0.0   UART_LIN                                                          02/08/2021 11:45:25 PAGE 6   

 304          // 参数: 待发送的数据场内容.
 305          // 返回: none.
 306          // 版本: VER1.0
 307          // 日期: 2020-12-2
 308          // 备注: 
 309          //========================================================================
 310          void Lin_Send(u8 *puts)
 311          {
 312   1          u8 i;
 313   1      
 314   1          Lin_SendBreak();      //Break
 315   1          UART2_TxByte(0x55);   //SYNC
 316   1          UART2_TxByte(Lin_CheckPID(LIN_ID));   //LIN ID
 317   1          for(i=0;i<8;i++)
 318   1          {
 319   2              UART2_TxByte(puts[i]);
 320   2          }
 321   1          UART2_TxByte(LINCalcChecksum(puts));
 322   1      }
 323          
 324          //========================================================================
 325          // 函数: void UART1_TxByte(u8 dat)
 326          // 描述: 发送一个字节.
 327          // 参数: 无.
 328          // 返回: 无.
 329          // 版本: V1.0, 2014-6-30
 330          //========================================================================
 331          void UART1_TxByte(u8 dat)
 332          {
 333   1          SBUF = dat;
 334   1          B_TX1_Busy = 1;
 335   1          while(B_TX1_Busy);
 336   1      }
 337          
 338          //========================================================================
 339          // 函数: void UART2_TxByte(u8 dat)
 340          // 描述: 发送一个字节.
 341          // 参数: 无.
 342          // 返回: 无.
 343          // 版本: V1.0, 2014-6-30
 344          //========================================================================
 345          void UART2_TxByte(u8 dat)
 346          {
 347   1          S2BUF = dat;
 348   1          B_TX2_Busy = 1;
 349   1          while(B_TX2_Busy);
 350   1      }
 351          
 352          //========================================================================
 353          // 函数: void PrintString1(u8 *puts)
 354          // 描述: 串口1发送字符串函数。
 355          // 参数: puts:  字符串指针.
 356          // 返回: none.
 357          // 版本: VER1.0
 358          // 日期: 2014-11-28
 359          // 备注: 
 360          //========================================================================
 361          void PrintString1(u8 *puts)
 362          {
 363   1          for (; *puts != 0;  puts++)     //遇到停止符0结束
 364   1          {
 365   2              SBUF = *puts;
C51 COMPILER V9.59.0.0   UART_LIN                                                          02/08/2021 11:45:25 PAGE 7   

 366   2              B_TX1_Busy = 1;
 367   2              while(B_TX1_Busy);
 368   2          }
 369   1      }
 370          
 371          //========================================================================
 372          // 函数: void PrintString2(u8 *puts)
 373          // 描述: 串口2发送字符串函数。
 374          // 参数: puts:  字符串指针.
 375          // 返回: none.
 376          // 版本: VER1.0
 377          // 日期: 2014-11-28
 378          // 备注: 
 379          //========================================================================
 380          //void PrintString2(u8 *puts)
 381          //{
 382          //    for (; *puts != 0;  puts++)     //遇到停止符0结束
 383          //    {
 384          //        S2BUF = *puts;
 385          //        B_TX2_Busy = 1;
 386          //        while(B_TX2_Busy);
 387          //    }
 388          //}
 389          
 390          //========================================================================
 391          // 函数: SetTimer2Baudraye(u16 dat)
 392          // 描述: 设置Timer2做波特率发生器。
 393          // 参数: dat: Timer2的重装值.
 394          // 返回: none.
 395          // 版本: VER1.0
 396          // 日期: 2014-11-28
 397          // 备注: 
 398          //========================================================================
 399          void SetTimer2Baudraye(u16 dat)
 400          {
 401   1          AUXR &= ~(1<<4);    //Timer stop
 402   1          AUXR &= ~(1<<3);    //Timer2 set As Timer
 403   1          AUXR |=  (1<<2);    //Timer2 set as 1T mode
 404   1          TH2 = dat / 256;
 405   1          TL2 = dat % 256;
 406   1          IE2  &= ~(1<<2);    //禁止中断
 407   1          AUXR |=  (1<<4);    //Timer run enable
 408   1      }
 409          
 410          //========================================================================
 411          // 函数: void UART1_config(u8 brt)
 412          // 描述: UART1初始化函数。
 413          // 参数: brt: 选择波特率, 2: 使用Timer2做波特率, 其它值: 使用Timer1做波特率.
 414          // 返回: none.
 415          // 版本: VER1.0
 416          // 日期: 2014-11-28
 417          // 备注: 
 418          //========================================================================
 419          void UART1_config(u8 brt)
 420          {
 421   1          /*********** 波特率使用定时器2 *****************/
 422   1          if(brt == 2)
 423   1          {
 424   2              AUXR |= 0x01;       //S1 BRT Use Timer2;
 425   2              SetTimer2Baudraye(Baudrate1);
 426   2          }
 427   1      
C51 COMPILER V9.59.0.0   UART_LIN                                                          02/08/2021 11:45:25 PAGE 8   

 428   1          /*********** 波特率使用定时器1 *****************/
 429   1          else
 430   1          {
 431   2              TR1 = 0;
 432   2              AUXR &= ~0x01;      //S1 BRT Use Timer1;
 433   2              AUXR |=  (1<<6);    //Timer1 set as 1T mode
 434   2              TMOD &= ~(1<<6);    //Timer1 set As Timer
 435   2              TMOD &= ~0x30;      //Timer1_16bitAutoReload;
 436   2              TH1 = (u8)(Baudrate1 / 256);
 437   2              TL1 = (u8)(Baudrate1 % 256);
 438   2              ET1 = 0;    //禁止中断
 439   2              INT_CLKO &= ~0x02;  //不输出时钟
 440   2              TR1  = 1;
 441   2          }
 442   1          /*************************************************/
 443   1      
 444   1          SCON = (SCON & 0x3f) | 0x40;    //UART1模式, 0x00: 同步移位输出, 0x40: 8位数据,可变波特率, 0x80: 9位数
             -据,固定波特率, 0xc0: 9位数据,可变波特率
 445   1      //  PS  = 1;    //高优先级中断
 446   1          ES  = 1;    //允许中断
 447   1          REN = 1;    //允许接收
 448   1          P_SW1 &= 0x3f;
 449   1      //  P_SW1 |= 0x80;      //UART1 switch to, 0x00: P3.0 P3.1, 0x40: P3.6 P3.7, 0x80: P1.6 P1.7, 0xC0: P4.3 P
             -4.4
 450   1      
 451   1          B_TX1_Busy = 0;
 452   1          TX1_Cnt = 0;
 453   1          RX1_Cnt = 0;
 454   1      }
 455          
 456          //========================================================================
 457          // 函数: void UART2_config(u8 brt)
 458          // 描述: UART2初始化函数。
 459          // 参数: brt: 选择波特率, 2: 使用Timer2做波特率, 其它值: 无效.
 460          // 返回: none.
 461          // 版本: VER1.0
 462          // 日期: 2014-11-28
 463          // 备注: 
 464          //========================================================================
 465          void UART2_config(u8 brt)    // 选择波特率, 2: 使用Timer2做波特率, 其它值: 无效.
 466          {
 467   1          if(brt == 2)
 468   1          {
 469   2              SetTimer2Baudraye(Baudrate2);
 470   2      
 471   2              S2CON &= ~(1<<7);   // 8位数据, 1位起始位, 1位停止位, 无校验
 472   2              IE2   |= 1;         //允许中断
 473   2              S2CON |= (1<<4);    //允许接收
 474   2              P_SW2 &= ~0x01; 
 475   2      //        P_SW2 |= 1;         //UART2 switch to: 0: P1.0 P1.1,  1: P4.6 P4.7
 476   2      
 477   2              B_TX2_Busy = 0;
 478   2              TX2_Cnt = 0;
 479   2              RX2_Cnt = 0;
 480   2          }
 481   1      }
 482          
 483          //========================================================================
 484          // 函数: void UART1_int (void) interrupt UART1_VECTOR
 485          // 描述: UART1中断函数。
 486          // 参数: nine.
 487          // 返回: none.
C51 COMPILER V9.59.0.0   UART_LIN                                                          02/08/2021 11:45:25 PAGE 9   

 488          // 版本: VER1.0
 489          // 日期: 2014-11-28
 490          // 备注: 
 491          //========================================================================
 492          void UART1_int (void) interrupt 4
 493          {
 494   1          if(RI)
 495   1          {
 496   2              RI = 0;
 497   2              if(RX1_Cnt >= UART1_BUF_LENGTH) RX1_Cnt = 0;
 498   2              RX1_Buffer[RX1_Cnt] = SBUF;
 499   2              RX1_Cnt++;
 500   2              RX1_TimeOut = 5;
 501   2          }
 502   1      
 503   1          if(TI)
 504   1          {
 505   2              TI = 0;
 506   2              B_TX1_Busy = 0;
 507   2          }
 508   1      }
 509          
 510          //========================================================================
 511          // 函数: void UART2_int (void) interrupt UART2_VECTOR
 512          // 描述: UART2中断函数。
 513          // 参数: nine.
 514          // 返回: none.
 515          // 版本: VER1.0
 516          // 日期: 2014-11-28
 517          // 备注: 
 518          //========================================================================
 519          void UART2_int (void) interrupt 8
 520          {
 521   1          if((S2CON & 1) != 0)
 522   1          {
 523   2              S2CON &= ~1;    //Clear Rx flag
 524   2              if(RX2_Cnt >= UART2_BUF_LENGTH) RX2_Cnt = 0;
 525   2              RX2_Buffer[RX2_Cnt] = S2BUF;
 526   2              RX2_Cnt++;
 527   2              RX2_TimeOut = 5;
 528   2          }
 529   1      
 530   1          if((S2CON & 2) != 0)
 531   1          {
 532   2              S2CON &= ~2;    //Clear Tx flag
 533   2              B_TX2_Busy = 0;
 534   2          }
 535   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    687    ----
   CONSTANT SIZE    =     35    ----
   XDATA SIZE       =     64    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      6      10
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
